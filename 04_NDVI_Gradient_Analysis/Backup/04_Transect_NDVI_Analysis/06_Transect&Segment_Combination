/**
 * Introduction:
 * 1) Select transects with at least 10 annual observations.
 * 2) Combine the variables of elevational transects and the corresponding
 *  lower and upper segments.
 * 
 * Update: 1/27/2022.
 * 
 * Runtime: 12m ~ 21m.
 */


/* Load module(s). */

var GATE = require("users/ChenyangWei/Public:Modules/Global_ATE");
var TNA = require("users/ChenyangWei/Public:Modules/Transect_NDVI_Analysis");
var FC_AP = require("users/ChenyangWei/Public:Modules/FeatureCollection_Analysis&Processing");


/* Data and function preparation. */

// Set the major working directory.
var wd_Main = GATE.wd_Europe;

// Load the raw transects.
var raw_Transects_All = ee.FeatureCollection(wd_Main
  + "Transect_NDVI_Analysis/"
  + TNA.elvNDVIgradientTrends_fileName);

// Determine the universal file paths of lower and upper segments.
var wd_LowerSegments = wd_Main
  + "Transect_NDVI_Analysis/"
  + TNA.lowerSegments_MaxNDVIsds_fileName
  + "/"
  + TNA.lowerSegmentsMaxNDVIsds_CLidSubset_fileName;

var wd_UpperSegments = wd_Main
  + "Transect_NDVI_Analysis/"
  + TNA.upperSegments_MaxNDVIsds_fileName
  + "/"
  + TNA.upperSegmentsMaxNDVIsds_CLidSubset_fileName;

// Generate a list of five filters
//  for subsetting the centerline IDs.
var centerlineID = "CL_ID";

var CLid_FilterList = TNA.Create_CLid_FilterList(centerlineID);

// Name the unnecessary properties of segments.
var unnecessaryPrpts = ["Hybas_ID", "SegmentID"];


/* Select transects with at least 10 annual observations. */

var selected_Transects_All = TNA.Filter_TransectYearNum(raw_Transects_All);


/* Perform the following operations for each subset (ID: 1 ~ 5) of
  transects/segments. */

for (var subsetID = 1; subsetID <= 5; subsetID ++) {
  
  // Load the lower and upper segments of each subset.
  var lowerSegments = ee.FeatureCollection(wd_LowerSegments
    + subsetID);
  
  var upperSegments = ee.FeatureCollection(wd_UpperSegments
    + subsetID);
  
  // Select the corresponding centerline ID filter.
  var CLid_Filter = CLid_FilterList[subsetID - 1];
  
  // Extract the transects of each subset.
  var selected_Transects = selected_Transects_All
    .filter(CLid_Filter);
  
  
  /* Combine the transect variables with the variables
    of the corresponding lower and upper segments. */
  
  // Remove the unnecessary properties from each type of segments.
  var lowerSegments_PrptsRemoved = FC_AP.FtrCol_PropertyRemoval(
    lowerSegments, unnecessaryPrpts);
  
  var upperSegments_PrptsRemoved = FC_AP.FtrCol_PropertyRemoval(
    upperSegments, unnecessaryPrpts);
  
  // Combine the variables of the selected transects and
  //  the corresponding lower and upper segments.
  var transects_withLowerSegments = FC_AP.combine_twoFtrCols_byCommonProperty(
    selected_Transects, lowerSegments_PrptsRemoved, centerlineID
  );
  
  var transects_withBothSegments = FC_AP.combine_twoFtrCols_byCommonProperty(
    transects_withLowerSegments, upperSegments_PrptsRemoved, centerlineID
  );
  
  
  /* Final output. */
  
  if (false) { //// true OR false.
  
    FC_AP.Examine_FtrCol_PropertyPercentiles(
      "selected_Transects:", 
      selected_Transects, 
      centerlineID, 100);
    
    FC_AP.Print_FtrColInfo("selected_Transects:", 
      selected_Transects);
    
    FC_AP.Print_FtrColInfo("lowerSegments_PrptsRemoved:", 
      lowerSegments_PrptsRemoved);
    
    FC_AP.Print_FtrColInfo("upperSegments_PrptsRemoved:", 
      upperSegments_PrptsRemoved);
  
  } else { //// Export the result(s).
    
    var wd_Output = wd_Main
      + "Transect_NDVI_Analysis/"
      + TNA.transects_withBothSegments_fileName
      + "/";
    
    var fileName = TNA.transects_withBothSegments_CLidSubset_fileName
      + subsetID;
    
    Export.table.toAsset({
      collection: transects_withBothSegments, 
      description: fileName, 
      assetId: wd_Output
        + fileName
    });
    
  }
}

