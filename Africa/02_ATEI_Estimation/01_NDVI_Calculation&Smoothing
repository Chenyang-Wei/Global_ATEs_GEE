/**
 * Introduction: 
 * 1) Mask cloud and cloud shadow and remove invalid pixels in the LANDSAT surface reflectance data
 *  within the 300m-buffered new CATE.
 * 2) Calculate NDVIs at each LANDSAT pixel.
 * 3) Calculate the annual maximum NDVIs over the study period of time.
 * 4) Remove the water body from the NDVI composite to avoid its impact 
 *  (normally with low NDVI values) on the smoothing process.
 * 5) Smooth the annual maximum NDVI by calculating its focal median value 
 *  within a 10-pixel circular kernel.
 * 
 * Update: 7/28/2021.
 * 
 * Runtime: 
 */


/* Load and reproject the required dataset(s). */

// Function to print the image information.
function printImgInfo(name, image) {
  print(name,
    image.bandTypes(),
    image.projection().crs(),
    image.projection().nominalScale());
}


/**** The following section needs to be updated. ****/

// Set the 10-km buffered bounding box of the study domain.
var africaAOI = ee.Geometry.Rectangle({
  coords: [[-25.492819736711297,-47.07238134131982],
    [63.634730607383325,37.63280220193939]],
  geodesic: false
});
//// Need to update.

var AOI = africaAOI;
//// Need to update.

// Set the working directory.
var wdAfrica = "users/Mountains/Africa_ATE/";
//// Need to update.

var wd_Main = wdAfrica;
//// Need to update.

/**** The section above needs to be updated. ****/


// Load the buffered new CATE.
//  (Choose the 300-m buffer because the NDVI-smoothing kernel
//  is a 10-pixel (10*30m) circle.)
var bufNewCATE = ee.Image(wd_Main
  + "Climate-Based_ATE/"
  + "300mBuffered_30mNewCATE_AOI");


var check = false; //// true OR false.

if (check) {
  printImgInfo("bufNewCATE:", bufNewCATE);
}


// Target projection.
var targetPrj = {
  crs: "EPSG:4326",
  scale: 30
};

// Land surface area based on the Hansen Global Forest Change dataset (v1.7).
var land = ee.Image("UMD/hansen/global_forest_change_2019_v1_7")
  .select("datamask")
  .eq(1) // Select the "Mapped land surface" area in the Hansen dataset.
  .reproject(targetPrj);


/* Image processing functions. */

// Function to reproject a dataset to the target projection.
var reprj = function(image) {
  return image.reproject(targetPrj);
};

// Function to extract pixels within the buffered new CATE.
var extractBufCATE = function(image) {
  var withinBufCATE = image.updateMask(bufNewCATE);
  
  return withinBufCATE;
};

// Function to remove cloud (high confidence), cloud shadow, and NA edge pixels 
//  in each LANDSAT image.
var maskCloudShadow = function(image) {
  // Get the pixel QA band.
  var qa = image.select('pixel_qa');
  
  // If the cloud bit (5) is set and the cloud confidence (7) is high
  //  or the cloud shadow bit is set (3), then it's a bad pixel.
  var cloud_shadow = qa.bitwiseAnd(1 << 5).and(qa.bitwiseAnd(1 << 7))
    .or(qa.bitwiseAnd(1 << 3));
  
  // Remove edge pixels that don't occur in all bands.
  var removeEdge = image.mask().reduce(ee.Reducer.min());
  
  // Mask the unwanted pixels.
  var masked = image.updateMask(cloud_shadow.not())
    .updateMask(removeEdge);
  
  // Select the bands of surface reflectance. 
  return masked.select('B.*');
};

// Function to remove invalid pixels (both < 0 and > 10000) 
//  from each band of surface reflectance. 
var removeInvalid = function(image) {
  // Keep pixels with all the surface reflectance bands 
  //  within the valid range: 0-10000.
  var lowerLimit = image.gte(0).reduce(ee.Reducer.min());
  var upperLimit = image.lte(1e4).reduce(ee.Reducer.min());
  
  var masked = image.updateMask(lowerLimit)
    .updateMask(upperLimit);
  
  return masked;
};

// Function to calculate the NDVI of LANDSAT 5 & 7 imagery.
var calNDVI_L57 = function(image) {
  var ndvi = image.normalizedDifference(['B4', 'B3'])
    .rename('NDVI');
  
  return image.addBands(ndvi)
    .select('NDVI');
};

// Function to calculate the NDVI of LANDSAT 8 imagery and 
//  convert the OLI NDVI to the ETM+ NDVI.
// ETM+ = 0.0029 + 0.9589 OLI D.P. Roy et al. (RSE 185 (2016) 57â€“70).
var calNDVI_L8 = function(image) {
  // Calculate the OLI NDVI.
  var OLI_NDVI = image.normalizedDifference(['B5', 'B4']);
  
  // Convert the OLI NDVI to the ETM+ NDVI.
  var ETM_NDVI = OLI_NDVI.multiply(0.9589).add(0.0029)
    .rename('NDVI');
  
  return image.addBands(ETM_NDVI)
    .select('NDVI');
};

// Functions to combine all the pre-processing 
//  and NDVI calculation operations.
// LANDSAT 5 & 7.
var imageProcessing_L57 = function(image) {
  var reprojected = reprj(image);
  var bufCATEextracted = extractBufCATE(reprojected);
  var cloudShadowMasked = maskCloudShadow(bufCATEextracted);
  var invalidRemoved = removeInvalid(cloudShadowMasked);
  var NDVI_L57 = calNDVI_L57(invalidRemoved);
  
  return NDVI_L57;
};

// LANDSAT 8.
var imageProcessing_L8 = function(image) {
  var reprojected = reprj(image);
  var bufCATEextracted = extractBufCATE(reprojected);
  var cloudShadowMasked = maskCloudShadow(bufCATEextracted);
  var invalidRemoved = removeInvalid(cloudShadowMasked);
  var NDVI_L8 = calNDVI_L8(invalidRemoved);
  
  return NDVI_L8;
};


/* NDVI composing and smoothing functions. */

// Function to calculate the annual maximum NDVI and
//  remove the water body from the NDVI composite to avoid its impact 
//  (normally with low NDVI values) on the smoothing process.
var calMaxNDVI_removeWater = function(year) {
  // Extract all the LANDSAT NDVIs in one year.
  var allNDVIs = LANDSAT_NDVI.filter(ee.Filter.calendarRange({
    start: year, 
    end: year, 
    field: "year"
  }));
  
  // Calculate their annual maximum value.
  var maxNDVI = allNDVIs.max()
    .reproject(targetPrj) // Reproject to the target projection.
    .set("Year", year); // Add the year as a property.
  
  // Remove the water body.
  var waterRemoved = maxNDVI.updateMask(land);
  
  return waterRemoved;
};

// Define a circular kernel of 10 pixels.
var Kn = ee.Kernel.circle({
  radius: 10,
  units: "pixels"
}); 

// Function to calculate the focal median of the annual maximum NDVI.
var NDVIsmoothing = function(image) {
  // Create a new band name according to the year.
  var year = ee.Number(image.get("Year")).int();
  var newName = ee.String(year);
  
  // Smooth the annual NDVI.
  var smoothed = image.reduceNeighborhood({
    // The median reducer is less smooth than the mean reducer, 
    //  but the former one makes the spatial variation of NDVI more abrupt (i.e., less gradual),
    //  which then provides a sharper gradient (i.e., with a greater magnitude).
    reducer: ee.Reducer.median(),
    kernel: Kn,
    skipMasked: false // Fill in the masked water body with the smoothed NDVI.
  }).reproject(targetPrj); // Reproject to the target projection.
  
  // Extract the result within the buffered new CATE.
  var extracted = extractBufCATE(smoothed);
  
  // Rename the result.
  return extracted.rename(newName);
};


/* Import and process the LANDSAT Surface Reflectance datasets. */

// Determine the bands of interest.
var bands_L57 = ['B[1-5]', 'B7', 'pixel_qa'];

var bands_L8 = ['B[1-7]', 'pixel_qa'];

// LANDSAT 5.
var L5_NDVI = ee.ImageCollection("LANDSAT/LT05/C01/T1_SR")
  .select(bands_L57)
  .filterBounds(AOI)
  .filterDate('1984-01-01', '2012-01-01') // The end date is exclusive. 
  .map(imageProcessing_L57);

// LANDSAT 7.
var L7_NDVI = ee.ImageCollection("LANDSAT/LE07/C01/T1_SR")
  .select(bands_L57)
  .filterBounds(AOI)
  .filterDate('2012-01-01', '2014-01-01') // The end date is exclusive. 
  .map(imageProcessing_L57);

// LANDSAT 8.
var L8_NDVI = ee.ImageCollection("LANDSAT/LC08/C01/T1_SR")
  .select(bands_L8)
  .filterBounds(AOI)
  .filterDate('2014-01-01', '2021-01-01') // The end date is exclusive.
  .map(imageProcessing_L8);

// Merge the NDVIs of LANDSAT 5, 7, and 8.
var LANDSAT_NDVI = L5_NDVI.merge(L7_NDVI)
  .merge(L8_NDVI);


/* Annual maximum NDVI calculation and smoothing. */

// Function to generate the list of old band names.
var start;

var generateOldNames = function(year) {
  var yearInt = ee.Number(year).int();
  
  var index = yearInt.subtract(start);
  
  var oldName = ee.String(index).cat("_")
    .cat(yearInt);
  
  return oldName;
};

// Function to generate the list of new band names.
var generateNewNames = function(year) {
  var yearInt = ee.Number(year).int();
  
  var newName = ee.String("smdNDVI_")
    .cat(yearInt);
  
  return newName;
};

// Determine the list of periods from 1984 to 2020:
//  the first period is five years,
//  each period after that is four years.
var periodList = [[1984, 1988], // Five years.
  [1989, 1992], // Four years hereafter.
  [1993, 1996],
  [1997, 2000],
  [2001, 2004],
  [2005, 2008],
  [2009, 2012],
  [2013, 2016],
  [2017, 2020]];

// Perform the analysis and output the result by period.
for (var i = 0; i < periodList.length; i++) {
  var firstYear = periodList[i][0];
  var lastYear = periodList[i][1];
  
  var years = ee.List.sequence(firstYear, lastYear);
  
  // Calculate the annual maximum NDVI and remove the water body.
  var annualMaxNDVI_col = ee.ImageCollection.fromImages(
    years.map(calMaxNDVI_removeWater)
  ); // Return an image collection.
  
  // Smooth the annual maximum NDVI.
  var annualSmdNDVI_col = annualMaxNDVI_col.map(NDVIsmoothing);
  
  // Convert the image collection to a multi-band image.
  var annualSmdNDVI_img = annualSmdNDVI_col.toBands();
  

  /* Rename the smoothed annual maximum NDVI bands. */
  
  // Generate the lists of old and new band names, respectively.
  start = firstYear;
  
  var oldNames = years.map(generateOldNames);
  
  var newNames = years.map(generateNewNames);
  
  // Rename the annually smoothed NDVIs.
  var annualSmdNDVI_renamed = annualSmdNDVI_img.select(oldNames, newNames)
    .float(); // Convert the PixelType to float.
  
  if (check) {
    print("annualSmdNDVI_renamed:", annualSmdNDVI_renamed.bandNames());
    
  } else {
    /* Export the result. */
    
    var fileName = "smdNDVI_" + firstYear + "to" + lastYear;
    
    Export.image.toAsset({
      image: annualSmdNDVI_renamed,
      description: fileName, 
      
      assetId: wd_Main
        + "ATEI_Estimation/" //// Need to create.
        + "medianSmdAnnualMaxNDVI_cloudShadowMasked_300mBufNewCATE_AOI/" //// Need to create.
        + fileName, 
      
      crs: "EPSG:4326",
      scale: 30,
      region: AOI,
      maxPixels: 1e13
    }); 
  }
}

