/**
 * Introduction:
 * 
 *  1) Load and preprocess the LANDSAT-8 imagery of 2020. 
 * 
 *  2) Calculate the annual maximum NDVI.
 * 
 *  3) Compute the unweighted spatial average NDVI and 
 *    the corresponding 30-m pixel number for each segment.
 * 
 * 
 * Need to check: 3.
 * 
 * Update: 8/3/2022.
 * 
 * Runtime: 3m.
 */


/* Load module(s). */

var GATE = require("users/ChenyangWei/Public:Modules/Global_ATE");
var NGA = require("users/ChenyangWei/Public:Modules/NDVI_Gradient_Analysis.js");
var IMG = require("users/ChenyangWei/Public:Modules/Image_Analysis&Processing");
var LDM = require("users/ChenyangWei/Public:Modules/LANDSAT_Data_Manipulation.js");
var TNA = require("users/ChenyangWei/Public:Modules/Transect_NDVI_Analysis");
var VIS = require("users/ChenyangWei/Public:Modules/Visualization");


/* Setup. */

// Set the major working directory.
var wd_Main = GATE.wd_Africa   /**** 1) Need to change. ****/
  + "Elevational_Transect_Generation/";

// Load the transect segments.
var segments = ee.FeatureCollection(wd_Main
  + TNA.segments_withCanopyHt_FullName);   /**** 2) Need to check. ****/

// Set the area of interest.
var AOI = GATE.AOI_Africa;   /**** 3) Need to change. ****/

// Target projection.
var targetPrj = IMG.WGS84_30m;

// Land surface area based on the Hansen Global Forest Change dataset (v1.7).
var land = ee.Image("UMD/hansen/global_forest_change_2019_v1_7")
  .select("datamask")
  .eq(1) // Select the "Mapped land surface" area in the Hansen dataset.
  .reproject(targetPrj);

// Define the reflectance bands.
var refBands = LDM.L8_SR_refBands_List;

// Define the pixel quality band.
var qualBand = LDM.L578_SR_qualBand_Str;

// Combine the two types of bands.
var L8_Bands = ee.List(refBands).add(qualBand);

// Determine the start and end (exclusive) dates.
var startDate = "2020-01-01";

var endDate = "2021-01-01";

// Load the function to preprocess the LANDSAT-8 SR imagery.
var Preprocess_SRimg = LDM.MaskCloudShadow_RemoveInvalidPx_SRimg;

// Load the function to compute the NDVI for each image.
var ComputeNDVI_byImg = LDM.Calculate_L8SR_NDVI;

// Whether test the algorithm.
var test = false; // true OR false.


/* 1) Load and preprocess the LANDSAT-8 imagery of 2020. */

// Load the raw LANDSAT-8 SR imagery.
var raw_L8_ImgCol = LDM.Load_L8_SR_byRegionDate(
  L8_Bands, AOI, startDate, endDate
);

// Preprocess each loaded image.
var L8_ImgCol = raw_L8_ImgCol.map(Preprocess_SRimg);


/* 2) Calculate the annual maximum NDVI. */

// Derive the NDVI for each image.
var NDVI_ImgCol = L8_ImgCol.map(ComputeNDVI_byImg);

// Compute the maximum value at each pixel.
var maxNDVI_img = NDVI_ImgCol.max();

// Reproject the NDVI image.
var maxNDVI_reprj = maxNDVI_img.reproject(targetPrj);

// Remove the water body.
var maxNDVI_noWater = maxNDVI_reprj.updateMask(land);


/* 3) Compute the unweighted spatial average NDVI and 
  the corresponding 30-m pixel number for each segment. */

if (test) {
  segments = segments.limit(100);
}

var segments_withAvgNDVI = TNA.Compute_UnWtdAvgVar_PxNum_perSegment(
  segments, maxNDVI_noWater, 
  "avg_NDVI", "NDVI_PxNum", 
  targetPrj);


if (test) { //// Check the datasets.

  print("segments_withAvgNDVI:", 
    segments_withAvgNDVI.first(),
    segments_withAvgNDVI.size());
  
} else { //// Export the result(s).
  
  var fileName = TNA.segments_withNDVIcanopyHt_FullName;
  
  Export.table.toAsset({
    collection: segments_withAvgNDVI, 
    description: fileName, 
    assetId: wd_Main
      + fileName
  });
}


/* Map the datasets. */

if (test) {

  print("segments:", 
    segments.first());

  IMG.printImgInfo("maxNDVI_noWater", maxNDVI_noWater);
  
  Map.setOptions("satellite");
  Map.centerObject(segments.first(), 12);
  
  Map.addLayer(maxNDVI_noWater, VIS.NDVI_vis, "maxNDVI_noWater");
  
  Map.addLayer(segments.filter(ee.Filter.eq("SegmentID", 1)), 
    {color: "FF0000"}, "Lower segments");
  
  Map.addLayer(segments.filter(ee.Filter.eq("SegmentID", 2)), 
    {color: "FFFF00"}, "Upper segments");
}


