/**
 * Introduction:
 *  1) Group the mid-half and mid-quarter sections of transect centerlines. 
 * 
 * Update: 9/21/2021.
 * 
 * Runtime: 18 ~ 26m.
 */


/* Load module(s). */

var IMG = require("users/ChenyangWei/Public:Modules/Image_Analysis&Processing");
var GATE = require("users/ChenyangWei/Public:Modules/Global_ATE");


/**** The following section needs to be updated. ****/

// Set the area of interest.
var AOI = GATE.AOI_Alps; // Testing.

// Set the working directory.
var wd_Main = GATE.wd_Europe;

// Set the cloud asset directory.
var cloud_Main = GATE.cloud_Europe;

/**** The section above needs to be updated. ****/


/* Data and function preparation. */

// Load the transect centerlines.
var transectCLs = ee.FeatureCollection(cloud_Main + "Cloud_Temp/" // Testing.
  + "transectCLs_LowestCF_HighestNonFRidge");

// Mid-sections.
var midHalfCLs = ee.FeatureCollection(cloud_Main + "Cloud_Temp/" // Testing.
  + "midHalfCLs_LowestCF_HighestNonFRidge");

var midQuarterCLs = ee.FeatureCollection(cloud_Main + "Cloud_Temp/" // Testing.
  + "midQuarterCLs_LowestCF_HighestNonFRidge");

var midOneThirdCLs = ee.FeatureCollection(cloud_Main + "Cloud_Temp/" // Testing.
  + "midOneThirdCLs_LowestCF_HighestNonFRidge");


/* Group the mid-segments of transect centerlines by distance. */

// Function to group the mid-segments of transect centerlines by distance.
var selectLocalLongestCLs = function(midSegments, centerLines) {
  var groupDist = 90;
  // var groupDist = 180;
  
  // Union a buffer of mid-segments.
  var unionedBuffer = midSegments.map(function(segment) {
    return segment.buffer(groupDist);
  }).union();
  
  // Convert the multiPolygon of the unioned buffer
  //  to a set of individual polygons.
  var unionedBuffer_indPlgs = unionedBuffer.first()
    .geometry().coordinates().map(function(coords) {
      var plg = ee.Geometry.Polygon(coords);
      
      return ee.Feature(plg);
    });
  
  // Define a spatial filter as geometries that intersect.
  var spatialFilter = ee.Filter.intersects({
    leftField: ".geo",
    rightField: ".geo"
  });
  
  // Define a save all join.
  var keyName = "groupedFeatures";
  
  var saveAllJoin = ee.Join.saveAll({
    matchesKey: keyName,
  });
  
  // Join each individual polygon of the unioned buffer with 
  //  the mid-segments that it intersects.
  var joined_FtrCol = saveAllJoin.apply(unionedBuffer_indPlgs, midSegments, 
    spatialFilter);
  
  // Select the mid-segment of the longest transect in each group.
  var selected_FtrCol = joined_FtrCol.map(function(joined) {
    var grouped_Ftrs = ee.FeatureCollection(ee.List(joined.get(keyName)));
  
    var sorted_Ftrs = grouped_Ftrs.sort({
      property: "CL_length", 
      ascending: false
    });
    
    var selected_Ftr = sorted_Ftrs.first();
    
    return selected_Ftr;
  });
  
  // Select the longest centerlines.
  var IDname = "CL_ID";
  
  var selected_IDs = selected_FtrCol.aggregate_array(IDname);
  
  var selected_CLs = centerLines.filter(ee.Filter.inList({
    leftField: IDname, 
    rightValue: selected_IDs
  }));
  
  return selected_CLs;
};

// var selected_LongestCLs_midHalf = selectLocalLongestCLs(midHalfCLs, transectCLs);

// var selected_LongestCLs_midQuarter = selectLocalLongestCLs(midQuarterCLs, transectCLs);

var selected_LongestCLs_midOneThird = selectLocalLongestCLs(midOneThirdCLs, transectCLs);


if (true) { // true OR false.

  //// Export the result(s).
  // Export.table.toAsset({
  //   collection: selected_LongestCLs_midHalf, 
  //   description: "selected_LongestCLs_midHalf_180m",
  //   assetId: cloud_Main + "Cloud_Temp/" // Testing.
  //     + "selected_LongestCLs_midHalf_180m"
  // });
  
  // Export.table.toAsset({
  //   collection: selected_LongestCLs_midQuarter, 
  //   description: "selected_LongestCLs_midQuarter_180m",
  //   assetId: cloud_Main + "Cloud_Temp/" // Testing.
  //     + "selected_LongestCLs_midQuarter_180m"
  // });
  
  Export.table.toAsset({
    collection: selected_LongestCLs_midOneThird, 
    description: "selected_LongestCLs_midOneThird_90m",
    assetId: cloud_Main + "Cloud_Temp/" // Testing.
      + "selected_LongestCLs_midOneThird_90m"
  });
}

