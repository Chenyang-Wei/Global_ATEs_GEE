/**
 * Introduction:
 * 
 * 1) Extract the upper non-forested areas and lower closed forests 
 *  in the segmented study area based on the distance to ridge and valley.
 * 
 * Update: 8/12/2021.
 * 
 * Runtime: 44s ~ 1m.
*/


/* Load module(s). */
var IMG = require("users/ChenyangWei/Public:Modules/Image_Analysis&Processing");
var GATE = require("users/ChenyangWei/Public:Modules/Global_ATE");


/* Data preparation. */

// Extract the most detailed (level 12) HydroSHEDS basin.
var POI = ee.Geometry.Point([10.35857, 46.51679]);
var basin = ee.Feature(ee.FeatureCollection("WWF/HydroSHEDS/v1/Basins/hybas_12")
  .filterBounds(POI).first());

// Working directory.
var wd_Temp = "users/ChenyangWei/Temp/";

// Target projection.
var targetPrj = IMG.WGS84_30m;

// Function to print the image information.
var printImgInfo = IMG.printImageInformation;

// Segmentation results.
var CL_filled = ee.Image(wd_Temp + "CL_filled");
var CL_notFilled = ee.Image(wd_Temp + "CL_notFilled");


// Function to extract landforms.
var extractUpper = function(landforms) {
  // Upper regions (Cliff and Upper slopes).
  var upper = landforms.gte(15).and(landforms.lte(24));
  
  return upper;
};

var extractLower = function(landforms) {
  // Lower regions (Lower slopes).
  var lower = landforms.gte(31).and(landforms.lte(34));
  
  return lower;
};


/* Pre-process the ALOS landform dataset. */

// The landform dataset is based on the 30m "AVE" band of JAXA's ALOS DEM 
//  (available in EE as JAXA/ALOS/AW3D30_V1_1).
//  There are stripes of invalid data in areas over 60 degrees in latitude.
var rawLF = ee.Image('CSP/ERGo/1_0/Global/ALOS_landforms').select('constant')
  .reproject(targetPrj);

// Remove the high-latitude stripes of invalid landforms  
//  in the landform dataset (based on the ALOS DEM V1.1).
var ALOSv11 = ee.Image("JAXA/ALOS/AW3D30_V1_1").select("AVE")
  .reproject(targetPrj);

var LF_noInvaid = rawLF.updateMask(ALOSv11.mask());

var UpperLF = extractUpper(LF_noInvaid);

var LowerLF = extractLower(LF_noInvaid);



/* Load the Copernicus Global Land Cover datasets (v3.0.1) from 2015 to 2019. */

// Set the file path and band name of land cover data.
var lcPath = "COPERNICUS/Landcover/100m/Proba-V-C3/Global/";

var lcName = "discrete_classification";

// Function to read the annual land cover datasets.
function readAnnualLC(year) {
  return ee.Image(lcPath + year).select(lcName);
}

// Read the datasets of 2015-2019.
var landCover = ee.ImageCollection.fromImages([
  readAnnualLC(2015),
  readAnnualLC(2016),
  readAnnualLC(2017),
  readAnnualLC(2018),
  readAnnualLC(2019),
]);


/* Extract and reproject the elevation of closed forests 
  (tree canopy > 70 %) in 2015-2019. */

// Function to extract the annual closed forests.
function extractCF(lcImg) {
  return lcImg.gte(111).and(lcImg.lte(116));
}

// Annual closed forests from 2015 to 2019.
var annualCF = landCover.map(extractCF);

// Extract and reproject areas classified as closed forests 
//  in ALL the five years.
var CF_5yr = annualCF.min()
  .reproject(targetPrj);


/* Extract and reproject the non-forested areas in 2015-2019. */

// Function to extract the annual non-forested areas
//  (from "Shrubs" to "Moss and lichen").
function extractNonF(lcImg) {
  return lcImg.gte(20).and(lcImg.lte(100));
}

// Annual non-forested areas from 2015 to 2019.
var annualNonF = landCover.map(extractNonF);

// Extract and reproject areas classified as non-forested areas 
//  in ALL the five years.
var NonF_5yr = annualNonF.min()
  .reproject(targetPrj);


/* Obtain the qualified closed forests and non-forested areas. */

// Closed forests on the lower slope or in the valley.
var CF_lower = CF_5yr.updateMask(LowerLF)
  .updateMask(CL_filled);

// Non-forested areas on the upper slope or the cliff.
var nonF_upper = NonF_5yr.updateMask(UpperLF)
  .updateMask(CL_filled);


if (true) { // true OR false.
  // Visualization.
  Map.setOptions("satellite");
  
  Map.centerObject(POI, 14); 
  
  Map.addLayer(basin, {color: "FFFFFF"}, "basin", false);
  
  Map.addLayer(NonF_5yr.selfMask(), {palette: "0000FF"}, "NonF_5yr", true);
  
  Map.addLayer(CF_5yr.selfMask(), {palette: "00FF00"}, "CF_5yr", true);
  
  Map.addLayer(nonF_upper.selfMask(), {palette: "0000FF"}, "nonF_upper", false);
  
  Map.addLayer(CF_lower.selfMask(), {palette: "00FF00"}, "CF_lower", false);
  
  Map.addLayer(CL_filled.selfMask(), {palette: "00FFFF"}, "CL_filled", false, 0.5);
  
  Map.addLayer(CL_notFilled.selfMask(), {palette: "FFFF00"}, "CL_notFilled", false, 0.5);
  
} else {
  // Output the results.
  Export.image.toAsset({
    image: CF_lower,
    description: "CF_lower", 
    assetId: "users/ChenyangWei/Temp/"
      + "CF_lower", 
    crs: "EPSG:4326",
    scale: 30,
    region: basin.bounds(),
    maxPixels: 1e13
  }); 
  
  Export.image.toAsset({
    image: nonF_upper,
    description: "nonF_upper", 
    assetId: "users/ChenyangWei/Temp/"
      + "nonF_upper", 
    crs: "EPSG:4326",
    scale: 30,
    region: basin.bounds(),
    maxPixels: 1e13
  }); 
}

