/**
 * Introduction:
 * 1) Ground and buffer the centroids of the medial axis between ridge and valley.
 * 
 * Update: 9/2/2021.
 * 
 * Runtime: 1m ~ 12m.
*/


/* Load module(s). */
var IMG = require("users/ChenyangWei/Public:Modules/Image_Analysis&Processing");
var GATE = require("users/ChenyangWei/Public:Modules/Global_ATE");
var VIS = require("users/ChenyangWei/Public:Modules/Visualization");

// Working directory.
var wd_Main = GATE.wd_Europe;

// Load the new CATE.
var newCATEname = GATE.newCATE_fileName;

var newCATE = ee.Image(wd_Main + "Climate-Based_ATE/" 
  + newCATEname);


/* Data preparation. */

// Extract the most detailed (level 12) HydroSHEDS basin.
var POI = ee.Geometry.Point([10.35857, 46.51679]);
var basin = ee.Feature(ee.FeatureCollection("WWF/HydroSHEDS/v1/Basins/hybas_12")
  .filterBounds(POI).first());

// Working directory.
var wd_Temp = "users/ChenyangWei/Temp/";

// Target projection.
var targetPrj = IMG.WGS84_30m;

// Medial axis between ridge and valley.
var medialAxis = ee.Image(wd_Temp + "medialAxis_centerLine_sqDist")
  .sqrt();

// Medial axis centroid.
var medialAxis_ctds = ee.FeatureCollection(wd_Temp + "medialAxis_centroids")
  .randomColumn();

medialAxis_ctds = medialAxis_ctds.map(function(ctd) {
  var SqDist_Px = ctd.get("medialAxis_SqDist_Px");
  var dist_Px = ee.Number(SqDist_Px).sqrt();
  var dist_m = dist_Px.multiply(30);
  
  return ctd.set("medialDist_m", dist_m);
});

print(medialAxis_ctds.size());


var buffered_medialAxis_ctds = medialAxis_ctds.map(function(ctd){
  var bufferDist = ctd.get("medialDist_m");
  
  return ctd.buffer(bufferDist);
});

print(buffered_medialAxis_ctds.first());


/* Spatial join. */

var distThres = 300;

// Define a spatial filter, with distance 90 m.
var distFilter = ee.Filter.withinDistance({
  distance: distThres,
  leftField: ".geo",
  rightField: ".geo"
});

// Define a saveAll join.
var distSaveAll = ee.Join.saveAll({
  matchesKey: "adjacent_ctds",
  measureKey: "distance"
});

// Apply the join.
var spatialJoined_ctds = distSaveAll.apply(medialAxis_ctds, medialAxis_ctds, distFilter);


/* Select centroids with at least 1 neighbor (other than itself). */

spatialJoined_ctds = spatialJoined_ctds.map(function neighborCounting(ctd) {
  var neighborNum = ee.List(ctd.get("adjacent_ctds")).size();
  
  return ctd.set("neighborNum", neighborNum);
});

var withNeighbor = spatialJoined_ctds.filter(ee.Filter.gt("neighborNum", 1))
  .sort("random");

var no_Neighbor = spatialJoined_ctds.filter(ee.Filter.eq("neighborNum", 1));

// Print the result.
// print(spatialJoined_ctds.sort("random").first());

// print(withNeighbor.size(), no_Neighbor.size());

// print(withNeighbor.limit(5));

spatialJoined_ctds = spatialJoined_ctds.map(function neighborCounting(ctd) {
  var neighborNum = ee.List(ctd.get("adjacent_ctds")).size();
  
  return ctd.set("neighborNum", neighborNum);
});



/* Convert centroid buffer to multipoints. */

var medialAxis_distBuffered = ee.FeatureCollection(wd_Temp + "medialAxis_distBuffered");

var bufferCoords = medialAxis_distBuffered.geometry().coordinates();

var bufferPtList = bufferCoords.map(function(coords_Lv1) {
  return ee.List(coords_Lv1).map(function(coords_Lv2) {
    return ee.List(coords_Lv2).map(function(coords_Lv3) {
      return ee.Feature(ee.Geometry.Point(coords_Lv3));
    });
  });
});
// var bufferPts = bufferCoords.map(function(coords_Lv1) {
//   return ee.Geometry.MultiPoint(ee.List(coords_Lv1).map(function(coords_Lv2) {
//     return ee.Geometry.MultiPoint(coords_Lv2);
//   }));
// });
// var bufferPts = bufferCoords;

var bufferPtFC = ee.FeatureCollection(bufferPtList.flatten());

print(bufferPtFC.first())

// var buffer_multiPt = ee.Geometry.MultiPoint(bufferPtList.flatten());
// print(buffer_multiPt)


/* Find the nearest two perimeter points for each centroid. */


// Define a spatial filter, with distance 10 km.
var nearestFilter = ee.Filter.withinDistance({
  distance: 1e4,
  leftField: ".geo",
  rightField: ".geo"
});

// Define a saveAll join.
var nearestSaveAll = ee.Join.saveAll({
  matchesKey: "nearest_perimeterPts", 
  ordering: "distance", 
  measureKey: "distance"
});

// Apply the join.
var nearest_perimeterPts = nearestSaveAll.apply(medialAxis_ctds, bufferPtFC, nearestFilter);
print(nearest_perimeterPts.first())

nearest_perimeterPts = nearest_perimeterPts.map(function(ctd) {
  var perimeterPts = ee.List(ctd.get("nearest_perimeterPts"));
  
  var pt1 = ee.Feature(perimeterPts.get(0)).geometry();
  var pt2 = ee.Feature(perimeterPts.get(1)).geometry();
  
  var ctdGeom = ctd.geometry();
  
  var lineString = ee.Geometry.MultiPoint([pt1]);
  
  return ee.Feature(lineString).copyProperties({
    source: ctd, 
    exclude: ["nearest_perimeterPts"]
  });
  
});
print(nearest_perimeterPts.first())

var bufferedCtds = medialAxis_ctds.map(function(ctd){
  var bufferDist = ctd.get("medialDist_m");
  
  var polygon = ctd.buffer(bufferDist);
  
  var perimeterCoords = ee.List(polygon.geometry().coordinates())
    .get(0);
  
  var perimeter = ee.Geometry.LineString(perimeterCoords);
  
  return ee.Feature(perimeter).copyProperties({source: ctd});
});

// var bufferedCtds = medialAxis_ctds.map(function(ctd){
//   var bufferDist = ctd.get("medialDist_m");
  
//   return ctd.buffer(bufferDist);
// });

var adjacentCtds = medialAxis_ctds.map(function(ctd){
  return ctd.buffer(distThres);
}).union();

adjacentCtds = ee.FeatureCollection(adjacentCtds.first().geometry().coordinates().map(function(coords) {
  var geom = ee.Geometry.Polygon(coords);
  
  return ee.Feature(geom);
}));

print("adjacentCtds:", adjacentCtds)


// Define a spatial filter as geometries that intersect.
var spatialFilter = ee.Filter.intersects({
  leftField: ".geo",
  rightField: ".geo"
});

// Define a save all join.
var saveAllJoin = ee.Join.saveAll({
  matchesKey: "adjacentCtds",
});

// Apply the join.
var intersectJoined = saveAllJoin.apply(adjacentCtds, medialAxis_ctds, spatialFilter);

print("intersectJoined", intersectJoined.limit(10))

intersectJoined = intersectJoined.map(function(joined) {
  var adjacent = ee.FeatureCollection(ee.List(joined.get("adjacentCtds")));
  
  var geom = adjacent.geometry().centroid();
  
  var avgDist_m = adjacent.aggregate_mean("medialDist_m");
  
  return ee.Feature(geom).set("avgDist_m", avgDist_m);
});

var buffered_intersectJoined = intersectJoined.map(function(joined){
  var bufferDist = joined.get("avgDist_m");
  
  return joined.buffer(bufferDist);
});

// var buffered_intersectJoined = intersectJoined.map(function(joined){
//   var bufferDist = joined.get("avgDist_m");
  
//   var perimeterCoords = ee.List(joined.buffer(bufferDist).geometry().coordinates())
//     .get(0);
  
//   var perimeter = ee.Geometry.LineString(perimeterCoords);
  
//   return ee.Feature(perimeter);
// });

print("intersectJoined", intersectJoined.size())


/* Extract the landforms of mountain ridges both inside and outside the new CATE.
  Including: peak/ridge (warm/normal/cool) and mountain/divide. */

// The landform dataset is based on the 30m "AVE" band of JAXA's ALOS DEM 
//  (available in EE as JAXA/ALOS/AW3D30_V1_1).
//  There are stripes of invalid data in areas over 60 degrees in latitude.
var rawLF = ee.Image('CSP/ERGo/1_0/Global/ALOS_landforms').select('constant')
  .reproject(targetPrj);

// Remove the high-latitude stripes of invalid landforms  
//  in the landform dataset (based on the ALOS DEM V1.1).
var ALOSv11 = ee.Image("JAXA/ALOS/AW3D30_V1_1").select("AVE")
  .reproject(targetPrj);

var LF_noInvaid = rawLF.updateMask(ALOSv11.mask());


// Function to extract mountain ridge and valley landforms.
var extractRidges = function(landforms) {
  var ridges = landforms.lte(14);
  
  return ridges;
};

var extractValleys = function(landforms) {
  var valleys = landforms.gte(41);
  
  return valleys;
};


// Extract the mountain ridge pixels.
var ridge = extractRidges(LF_noInvaid);

// Valley.
var valley = extractValleys(LF_noInvaid);



if (true) { // true OR false.

  // Visualization.
  Map.setOptions("satellite");
  
  Map.centerObject(POI, 14); 
  
  Map.addLayer(newCATE, {palette: "FFA500"}, "newCATE", false, 0.5);
  
  Map.addLayer(valley.selfMask(), {palette: "00FF00"}, "valley", true, 1);
  
  Map.addLayer(ridge.selfMask(), {palette: "0000FF"}, "ridge", true, 1);
  
  
  Map.addLayer(medialAxis, {min: 0, max: 30, palette: "0000FF, FFFFFF, FF0000"}, 
    "medialAxis", false);
  
  Map.addLayer(bufferedCtds, {color: "FFFF00"}, "bufferedCtds", false, 0.5);
  
  Map.addLayer(bufferPtFC, {color: "00FF00"}, "buffer_multiPt", false, 0.5);
  
  Map.addLayer(buffered_intersectJoined, {color: "228B22"}, "buffered_intersectJoined", true, 0.5);
  
  Map.addLayer(adjacentCtds, {color: "00FFFF"}, "adjacentCtds", true, 0.5);
  
  Map.addLayer(intersectJoined, {color: "FF0000"}, "intersectJoined", true, 0.5);
  
  Map.addLayer(medialAxis_ctds, {color: "0000FF"}, "medialAxis_ctds", true);
  // Map.addLayer(nearest_perimeterPts, {color: "FFA500"}, "nearest_perimeterPts", false);
  
  // Map.addLayer(withNeighbor, {color: "00FFFF"}, "withNeighbor", true);
  
  // Map.addLayer(no_Neighbor, {color: "0000FF"}, "no_Neighbor", true);
  
} else {
  // Export the result.
  var fileName = "buffered_groupedMedialCentroids_" + distThres +"m";
  
  Export.table.toAsset({
    collection: buffered_intersectJoined, 
    description: fileName, 
    assetId: wd_Temp
      + fileName
  });
  
  var fileName2 = "buffered_medialAxis_ctds";
  
  Export.table.toAsset({
    collection: buffered_medialAxis_ctds, 
    description: fileName2, 
    assetId: wd_Temp
      + fileName2
  });
}
