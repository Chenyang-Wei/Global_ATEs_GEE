/**
 * Introduction:
 * 1) Create a transect in each buffer of the grouped medial axis centroid.
 * 
 * Update: 9/3/2021.
 * 
 * Runtime: 1m.
 */


/* Load module(s). */
var IMG = require("users/ChenyangWei/Public:Modules/Image_Analysis&Processing");
var GATE = require("users/ChenyangWei/Public:Modules/Global_ATE");
var VIS = require("users/ChenyangWei/Public:Modules/Visualization");


/* Data preparation. */

// Extract the most detailed (level 12) HydroSHEDS basin.
var POI = ee.Geometry.Point([10.35857, 46.51679]);
var basin = ee.Feature(ee.FeatureCollection("WWF/HydroSHEDS/v1/Basins/hybas_12")
  .filterBounds(POI).first());

// Working directory.
var wd_Temp = "users/ChenyangWei/Temp/";

var wd_Main = GATE.wd_Europe;

// Target projection.
var targetPrj = IMG.WGS84_30m;

// Buffer of the grouped medial axis centroid.
var medialBuffer = ee.FeatureCollection(wd_Temp 
  + "buffered_medialAxis_ctds");

// var bufDist = 180;

// var medialBuffer = ee.FeatureCollection(wd_Temp 
//   + "buffered_groupedMedialCentroids_"
//   + bufDist + "m");

print("medialBuffer", medialBuffer.size())

// Load the new CATE.
var newCATEname = GATE.newCATE_fileName;

var newCATE = ee.Image(wd_Main + "Climate-Based_ATE/" 
  + newCATEname);


/* Extract the upper and lower landforms. */

// The landform dataset is based on the 30m "AVE" band of JAXA's ALOS DEM 
//  (available in EE as JAXA/ALOS/AW3D30_V1_1).
//  There are stripes of invalid data in areas over 60 degrees in latitude.
var rawLF = ee.Image('CSP/ERGo/1_0/Global/ALOS_landforms').select('constant')
  .reproject(targetPrj);

// Remove the high-latitude stripes of invalid landforms  
//  in the landform dataset (based on the ALOS DEM V1.1).
var ALOSv11 = ee.Image("JAXA/ALOS/AW3D30_V1_1").select("AVE")
  .reproject(targetPrj);

var LF_noInvaid = rawLF.updateMask(ALOSv11.mask());


// Function to extract landforms.
var extractUpper = function(landforms) {
  var upper = landforms.lte(24);
  
  return upper;
};

var extractLower = function(landforms) {
  var lower = landforms.gte(31);
  
  return lower;
};

var UpperLF = extractUpper(LF_noInvaid);

var LowerLF = extractLower(LF_noInvaid);


/* Load the Copernicus Global Land Cover datasets (v3.0.1) from 2015 to 2019. */

// Set the file path and band name of land cover data.
var lcPath = "COPERNICUS/Landcover/100m/Proba-V-C3/Global/";

var lcName = "discrete_classification";

// Function to read the annual land cover datasets.
function readAnnualLC(year) {
  return ee.Image(lcPath + year).select(lcName);
}

// Read the datasets of 2015-2019.
var landCover = ee.ImageCollection.fromImages([
  readAnnualLC(2015),
  readAnnualLC(2016),
  readAnnualLC(2017),
  readAnnualLC(2018),
  readAnnualLC(2019),
]);


/* Extract and reproject the elevation of closed forests 
  (tree canopy > 70 %) in 2015-2019. */

// Function to extract the annual closed forests.
function extractCF(lcImg) {
  return lcImg.gte(111).and(lcImg.lte(116));
}

// Annual closed forests from 2015 to 2019.
var annualCF = landCover.map(extractCF);

// Extract and reproject areas classified as closed forests 
//  in ALL the five years.
var CF_5yr = annualCF.min()
  .reproject(targetPrj);


/* Extract and reproject the non-forested areas in 2015-2019. */

// Function to extract the annual non-forested areas
//  (from "Shrubs" to "Moss and lichen").
function extractNonF(lcImg) {
  return lcImg.gte(20).and(lcImg.lte(100));
}

// Annual non-forested areas from 2015 to 2019.
var annualNonF = landCover.map(extractNonF);

// Extract and reproject areas classified as non-forested areas 
//  in ALL the five years.
var NonF_5yr = annualNonF.min()
  .reproject(targetPrj);


/* Obtain the lower closed forests and the upper non-forested areas in the new CATE. */

// Lower closed forests.
var CF_lower = CF_5yr.updateMask(LowerLF)
  .updateMask(newCATE);

// Upper non-forested areas.
var nonF_upper = NonF_5yr.updateMask(UpperLF)
  .updateMask(newCATE);


/* Combine the elevations and pixel coordinates of
  the qualified closed forests and non-forested areas, respectively. */


// ALOS elevation (Version 3.2, released in January 2021) in the AOI.
var ALOSelv = ee.ImageCollection('JAXA/ALOS/AW3D30/V3_2').select('DSM')
  .filterBounds(basin.geometry())
  .mosaic()
  .reproject(targetPrj);


// Get the elevation of each type of area.
var closedForestsElv = ALOSelv.updateMask(CF_lower)
  .rename("CF_Elv");

var nonForestedElv = ALOSelv.updateMask(nonF_upper)
  .rename("nonF_Elv");

// Determine and rename the pixel coordinates 
//  of each type of area.
var rawCoords = ee.Image.pixelLonLat()
  .reproject(targetPrj);

var closedForestsCoords = rawCoords.updateMask(CF_lower)
  .select(["latitude", "longitude"], 
    ["CF_Lat", "CF_Long"]);

var nonForestedCoords = rawCoords.updateMask(nonF_upper)
  .select(["latitude", "longitude"], 
    ["nonF_Lat", "nonF_Long"]);

// Combine the elevations and pixel coordinates of each type of area.
var CF_ElvCoords = closedForestsElv
  .addBands(closedForestsCoords);

var nonF_ElvCoords = nonForestedElv
  .addBands(nonForestedCoords);


// Combine the elevation and coordinate datasets
//  of the two types of areas for further extracting the elevational extremes by centroid buffer
//  (Note: the order of bands here should be consistent with the order of combined reducers
//    in the following "reduceRegions()" function).
var CF_nonF_ElvCoords = CF_ElvCoords
  .addBands(nonF_ElvCoords)
  .reproject(targetPrj);


/*  Within each centroid buffer, extract the elevations and corresponding coordinates 
  of the lowest pixel of closed forests in the lower regions and 
  the highest non-forested pixel in the upper regions, respectively. */

// Create a reducer to extract the elevation and corresponding coordinates 
//  of the lowest pixel of closed forests in the lower regions.
var minReducer_CFelv_Coords = ee.Reducer.min({
  numInputs: 3
}).setOutputs(CF_ElvCoords.bandNames());

// Create a reducer to extract the elevation and corresponding coordinates 
//  of the highest non-forested pixel in the upper regions.
var maxReducer_nonFelv_Coords = ee.Reducer.max({
  numInputs: 3
}).setOutputs(nonF_ElvCoords.bandNames());

// Combine the two elevation reducers
//  (Note: the order of reducers here should be consistent with the order of combined bands
//    in the previously generated "CF_nonF_ElvCoords" image).
var combinedReducer = minReducer_CFelv_Coords.combine({
  reducer2: maxReducer_nonFelv_Coords, 
  sharedInputs: false
});
// (Note: if "sharedInputs" is false, 
//  the inputs of the combined reducer will be 
//  those of reducer1 followed by those of reducer2.)


// Extract the elevational extremes and corresponding coordinates 
//  within each centroid buffer.
var bufferElvMinMax = CF_nonF_ElvCoords.reduceRegions({
  collection: medialBuffer, 
  reducer: combinedReducer, 
  scale: targetPrj.scale, 
  crs: targetPrj.crs
});


// Get the properties of interest.
var HYBAS_ID = basin.get("HYBAS_ID");
var PFAF_ID = basin.get("PFAF_ID");

// Set the properties of interest by segment.
var bufferElvMinMax_withBasinInfo = bufferElvMinMax.map(function(buffer) {
  var buffer_withBasinInfo = buffer.set({
    HYBAS_ID: HYBAS_ID,
    PFAF_ID: PFAF_ID
  });
  
  return buffer_withBasinInfo;
});

print("bufferElvMinMax_withBasinInfo", 
  bufferElvMinMax_withBasinInfo.first(), bufferElvMinMax_withBasinInfo.size())


// Select centroid buffers with both the minimum elevation of closed forests and 
//  the maximum non-forested elevation.
// Also, the latter one should be greater than the former one.
var selectedBuffers = bufferElvMinMax_withBasinInfo.filter(ee.Filter.and(
  ee.Filter.neq("nonF_Elv", null),
  ee.Filter.neq("CF_Elv", null),
  ee.Filter.greaterThan({
    leftField: "nonF_Elv", 
    rightField: "CF_Elv"
  })));

print("selectedBuffers", 
  selectedBuffers.first(), selectedBuffers.size())


/* In each selected centroid buffer, generate points of 
  the highest non-forested pixel and the lowest pixel of closed forests. */

function generateCFptByBuffer(buffer) {
  // Extract the coordinates of pixels with 
  // the minimum elevation of closed forests.
  var CF_Long = buffer.get("CF_Long");
  var CF_Lat = buffer.get("CF_Lat");

  // Construct a Point of the closed-forest pixel.
  var CF_pt = ee.Geometry.Point([CF_Long, CF_Lat]);

  // Create a feature with 
  //  the properties of interest.
  var ptFeature = ee.Feature(CF_pt).copyProperties({
    source: buffer
  }).set({
    Type: "lowest_CF"
  });
  
  return ptFeature;
}

function generateNonFptByBuffer(buffer) {
  // Extract the coordinates of pixels with 
  // the maximum non-forested elevation.
  var nonF_Long = buffer.get("nonF_Long");
  var nonF_Lat = buffer.get("nonF_Lat");

  // Construct a Point of the non-forested pixel.
  var nonF_pt = ee.Geometry.Point([nonF_Long, nonF_Lat]);

  // Create a feature with 
  //  the properties of interest.
  var ptFeature = ee.Feature(nonF_pt).copyProperties({
    source: buffer
  }).set({
    Type: "highest_NonF"
  });
  
  return ptFeature;
}


var CFpts = selectedBuffers.map(generateCFptByBuffer);
var NonFpts = selectedBuffers.map(generateNonFptByBuffer);

print("CFpts:", 
  CFpts.first())

print("NonFpts:", 
  NonFpts.first())



if (true) { // true OR false.

  // Visualization.
  Map.setOptions("satellite");
  
  Map.centerObject(POI, 14); 
  
  Map.addLayer(basin, {color: "FFFFFF"}, "basin", false);
  
  Map.addLayer(nonF_upper.selfMask(), {palette: "0000FF"}, "nonF_upper", false);
  
  Map.addLayer(CF_lower.selfMask(), {palette: "00FF00"}, "CF_lower", false);
  
  Map.addLayer(medialBuffer, {color: "FFFF00"}, "medialBuffer", true, 0.5);
  
  Map.addLayer(selectedBuffers, {color: "00FFFF"}, "selectedBuffers", true, 0.5);
  
  Map.addLayer(CFpts, {color: "00FF00"}, "CFpts", true);
  
  Map.addLayer(NonFpts, {color: "0000FF"}, "NonFpts", true);
  
} else {
  // Export the results.
  var fileName = "CFpts";
  
  Export.table.toAsset({
    collection: CFpts, 
    description: fileName, 
    assetId: wd_Temp
      + fileName
  });
  
  var fileName2 = "NonFpts";
  
  Export.table.toAsset({
    collection: NonFpts, 
    description: fileName2, 
    assetId: wd_Temp
      + fileName2
  });
}
