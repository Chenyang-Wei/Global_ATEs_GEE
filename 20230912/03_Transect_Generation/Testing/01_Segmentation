/**
 * Introduction:
 * 
 * 1) Extract the centerline between ridge and valley.
 * 2) Segment the study area based on the distance to ridge and valley.
 * 3) Segment the study area based on the distance to ridge, valley, and the centerline.
 * 
 * Update: 8/15/2021.
 * 
 * Runtime: 1m ~ 2m.
*/


/* Load module(s). */
var IMG = require("users/ChenyangWei/Public:Modules/Image_Analysis&Processing");
var GATE = require("users/ChenyangWei/Public:Modules/Global_ATE");


/* Data preparation. */

// Extract the most detailed (level 12) HydroSHEDS basin.
var POI = ee.Geometry.Point([10.35857, 46.51679]);
var basin = ee.Feature(ee.FeatureCollection("WWF/HydroSHEDS/v1/Basins/hybas_12")
  .filterBounds(POI).first());

// Working directory.
var wd_Main = GATE.wd_Europe;

// Load the new CATE.
var newCATEname = GATE.newCATE_fileName;

var newCATE = ee.Image(wd_Main + "Climate-Based_ATE/" 
  + newCATEname);

// Target projection.
var targetPrj = IMG.WGS84_30m;

// Function to print the image information.
var printImgInfo = IMG.printImageInformation;

// Function to extract mountain ridge and valley landforms.
var extractRidges = function(landforms) {
  var ridges = landforms.lte(14);
  
  return ridges;
};

var extractValleys = function(landforms) {
  var valleys = landforms.gte(41);
  
  return valleys;
};


/* Pre-process the ALOS landform dataset. */

// The landform dataset is based on the 30m "AVE" band of JAXA's ALOS DEM 
//  (available in EE as JAXA/ALOS/AW3D30_V1_1).
//  There are stripes of invalid data in areas over 60 degrees in latitude.
var rawLF = ee.Image('CSP/ERGo/1_0/Global/ALOS_landforms').select('constant')
  .reproject(targetPrj);

// Remove the high-latitude stripes of invalid landforms  
//  in the landform dataset (based on the ALOS DEM V1.1).
var ALOSv11 = ee.Image("JAXA/ALOS/AW3D30_V1_1").select("AVE")
  .reproject(targetPrj);

var LF_noInvaid = rawLF.updateMask(ALOSv11.mask());


/* Extract the landforms of mountain ridges both inside and outside the new CATE.
  Including: peak/ridge (warm/normal/cool) and mountain/divide. */

// Extract the mountain ridge pixels.
var ridge = extractRidges(LF_noInvaid);

// Valley.
var valley = extractValleys(LF_noInvaid);

// Ridge or valley.
var ridgeValley = ridge.or(valley); 


/* Segmentation. */

var distParams = {
  neighborhood: 1e3,
  units: "pixels",
  metric: "squared_euclidean" // Get the distance in the squared number of 30-m pixels.
};


// Define a Laplacian, or isotropic-edge-detection kernel.
var laplacian = ee.Kernel.laplacian8({ 
  normalize: false 
});

function segmentation(landform) {
  var LF_dist = landform.fastDistanceTransform(distParams).reproject(targetPrj);
  
  // Apply the Laplacian edge-detection kernel to detect the boundary of the ridge distance.
  var edgy = LF_dist.convolve(laplacian)
    .reproject(targetPrj);

  var segmented = edgy.gt(0);
  
  return segmented;
}

var segRidge = segmentation(ridge);
var segValley = segmentation(valley);
var seg_RV = segmentation(ridgeValley);

// Center line.
var centerLine = segRidge.and(segValley).and(seg_RV.not());

// New segmentation result.
var segRV_CL = seg_RV.or(centerLine);

function removeRidgeValley_extractNewCATE(segmented) {
  return segmented.updateMask(ridgeValley.not())
    .updateMask(newCATE)
    .clip(basin);
}

// Clipping.
var CL_notFilled = removeRidgeValley_extractNewCATE(seg_RV);

var CL_filled = removeRidgeValley_extractNewCATE(segRV_CL);


if (false) { // true OR false.
  // Visualization.
  Map.setOptions("satellite");
  
  Map.centerObject(POI, 14); 
  
  Map.addLayer(basin, {color: "FFFFFF"}, "basin", false);
  
  Map.addLayer(newCATE, {palette: "FFA500"}, "newCATE", false);
  
  Map.addLayer(segRidge.selfMask(), {palette: "FF00FF"}, "segRidge", false);
  
  Map.addLayer(segValley.selfMask(), {palette: "00FFFF"}, "segValley", false);
  
  Map.addLayer(CL_filled.selfMask(), {palette: "00FFFF"}, "CL_filled", true);
  
  Map.addLayer(CL_notFilled.selfMask(), {palette: "FFFF00"}, "CL_notFilled", true);
  
  Map.addLayer(centerLine.selfMask(), {palette: "FF0000"}, "centerLine", true);
  
  Map.addLayer(ridgeValley.selfMask(), {palette: "228B22"}, "ridgeValley", false);
  
  Map.addLayer(ridge.selfMask(), {palette: "0000FF"}, "ridge", true);
  
  Map.addLayer(valley.selfMask(), {palette: "00FF00"}, "valley", true);
  
} else {
  // Output the results.
  Export.image.toAsset({
    image: CL_notFilled,
    description: "CL_notFilled", 
    assetId: "users/ChenyangWei/Temp/"
      + "CL_notFilled", 
    crs: "EPSG:4326",
    scale: 30,
    region: basin.bounds(),
    maxPixels: 1e13
  }); 
  
  Export.image.toAsset({
    image: CL_filled,
    description: "CL_filled", 
    assetId: "users/ChenyangWei/Temp/"
      + "CL_filled", 
    crs: "EPSG:4326",
    scale: 30,
    region: basin.bounds(),
    maxPixels: 1e13
  }); 
  
  Export.image.toAsset({
    image: centerLine.selfMask(),
    description: "ridgeValley_CL", 
    assetId: "users/ChenyangWei/Temp/"
      + "ridgeValley_CL", 
    crs: "EPSG:4326",
    scale: 30,
    region: basin.bounds(),
    maxPixels: 1e13
  }); 
}

