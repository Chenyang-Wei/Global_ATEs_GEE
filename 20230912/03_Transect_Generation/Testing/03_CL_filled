/**
 * Introduction:
 * 1) Generate a line string between the highest upper non-forested pixel 
 *  to the lowest lower closed forest pixel within each study area segment
 *  based on the distance to ridge and valley.
 * 
 * Update: 8/12/2021.
 * 
 * Runtime: 54s.
*/


/* Load module(s). */
var IMG = require("users/ChenyangWei/Public:Modules/Image_Analysis&Processing");
var GATE = require("users/ChenyangWei/Public:Modules/Global_ATE");


/* Data preparation. */

// Extract the most detailed (level 12) HydroSHEDS basin.
var POI = ee.Geometry.Point([10.35857, 46.51679]);
var basin = ee.Feature(ee.FeatureCollection("WWF/HydroSHEDS/v1/Basins/hybas_12")
  .filterBounds(POI).first());

// Working directory.
var wd_Temp = "users/ChenyangWei/Temp/";

// Target projection.
var targetPrj = IMG.WGS84_30m;

// Function to print the image information.
var printImgInfo = IMG.printImageInformation;

// Segmentation results.
var CL_filled = ee.Image(wd_Temp + "CL_filled");
var CL_notFilled = ee.Image(wd_Temp + "CL_notFilled");

// Land cover datasets.
var CF_lower = ee.Image(wd_Temp + "CF_lower");
var nonF_upper = ee.Image(wd_Temp + "nonF_upper");

// ALOS elevation (Version 3.2, released in January 2021) in the AOI.
var ALOSelv = ee.ImageCollection('JAXA/ALOS/AW3D30/V3_2').select('DSM')
  .filterBounds(basin.geometry())
  .mosaic()
  .reproject(targetPrj);


/* Combine the elevations and pixel coordinates of
  the qualified closed forests and non-forested areas, respectively. */

// Get the elevation of each type of area.
var closedForestsElv = ALOSelv.updateMask(CF_lower)
  .rename("CF_Elv");

var nonForestedElv = ALOSelv.updateMask(nonF_upper)
  .rename("nonF_Elv");

// Determine and rename the pixel coordinates 
//  of each type of area.
var rawCoords = ee.Image.pixelLonLat()
  .reproject(targetPrj);

var closedForestsCoords = rawCoords.updateMask(CF_lower)
  .select(["latitude", "longitude"], 
    ["CF_Lat", "CF_Long"]);

var nonForestedCoords = rawCoords.updateMask(nonF_upper)
  .select(["latitude", "longitude"], 
    ["nonF_Lat", "nonF_Long"]);

// Combine the elevations and pixel coordinates of each type of area.
var CF_ElvCoords = closedForestsElv
  .addBands(closedForestsCoords);

var nonF_ElvCoords = nonForestedElv
  .addBands(nonForestedCoords);

// Combine the segmented new CATE with the elevation and coordinate datasets
//  of the two types of areas for further extracting the elevational extremes by CATE segment
//  (Note: the order of bands here should be consistent with the order of combined reducers
//    in the following "reduceToVectors()" function).
var segCATE_CF_nonF_ElvCoords = CL_filled
  .addBands(CF_ElvCoords)
  .addBands(nonF_ElvCoords)
  .reproject(targetPrj);


/*  Within each previously selected basin, extract the elevations and corresponding coordinates 
  of the lowest pixel of closed forests in the lower regions (lower slope) and 
  the highest non-forested pixel in the upper regions (upper slope or cliff) 
  within each CATE segment, respectively. */

// Create a reducer to extract the elevation and corresponding coordinates 
//  of the lowest pixel of closed forests in the lower regions.
var minReducer_CFelv_Coords = ee.Reducer.min({
  numInputs: 3
}).setOutputs(CF_ElvCoords.bandNames());

// Create a reducer to extract the elevation and corresponding coordinates 
//  of the highest non-forested pixel in the upper regions.
var maxReducer_nonFelv_Coords = ee.Reducer.max({
  numInputs: 3
}).setOutputs(nonF_ElvCoords.bandNames());

// Combine the two elevation reducers
//  (Note: the order of reducers here should be consistent with the order of combined bands
//    in the previously generated "segCATE_CF_nonF_ElvCoords" image).
var combinedReducer = minReducer_CFelv_Coords.combine({
  reducer2: maxReducer_nonFelv_Coords, 
  sharedInputs: false
});
// (Note: if "sharedInputs" is false, 
//  the inputs of the combined reducer will be 
//  those of reducer1 followed by those of reducer2.)

// Extract the geometry of each basin.
var basinGeom = basin.geometry();

// Get the properties of interest.
var HYBAS_ID = basin.get("HYBAS_ID");
var PFAF_ID = basin.get("PFAF_ID");

// Vectorize the segmented new CATE in the basin and 
//  extract the elevational extremes and corresponding coordinates 
//  within each vectorized segment.
var segmentElvMinMax = segCATE_CF_nonF_ElvCoords.reduceToVectors({
  // The first band (i.e., the segmented new CATE) of the input image 
  //  is expected to be an integer type; 
  //  adjacent pixels will be in the same vector 
  //  if they have the same value in this band.
  reducer: combinedReducer, 
  // Extract the minimum and maximum elevations.
  //  The inputs of this combined reducer will be taken from 
  //  the image's bands after dropping the first band 
  //  (i.e., the segmented new CATE). 
  geometry: basinGeom,
  maxPixels: 1e13,
  crs: "EPSG:4326",
  scale: 30,
  geometryType: "polygon",
  eightConnected: false // Only pixels that share an edge are considered adjacent.
});

// Set the properties of interest by segment.
var segmentElvMinMax_withBasinInfo = segmentElvMinMax.map(function(segment) {
  var segment_withBasinInfo = segment.set({
    HYBAS_ID: HYBAS_ID,
    PFAF_ID: PFAF_ID
  });
  
  return segment_withBasinInfo;
});


// Select CATE segments with both the minimum elevation of closed forests and 
//  the maximum non-forested elevation.
//  Also, the latter one should be greater than the former one.
var selectedSegments = segmentElvMinMax_withBasinInfo.filter(ee.Filter.and(
  ee.Filter.neq("nonF_Elv", null),
  ee.Filter.neq("CF_Elv", null),
  ee.Filter.greaterThan({
    leftField: "nonF_Elv", 
    rightField: "CF_Elv"
  })));


/* In each selected CATE segment, generate a line string between 
  the highest non-forested pixel and the lowest pixel of closed forests  
  as the center line of an elevational transect. */

// Function to generate a transect center line within each selected CATE segment.
function generateCenterLineBySegment(segment) {
  // Extract the coordinates of pixels with 
  // the minimum elevation of closed forests.
  var CF_Long = segment.get("CF_Long");
  var CF_Lat = segment.get("CF_Lat");

  // Extract the coordinates of pixels with 
  // the maximum non-forested elevation.
  var nonF_Long = segment.get("nonF_Long");
  var nonF_Lat = segment.get("nonF_Lat");

  // Construct a line string between the closed-forest and non-forested pixels.
  var lineString = ee.Geometry.LineString([[CF_Long, CF_Lat], 
    [nonF_Long, nonF_Lat]]);

  // Get the length of the constructed line string.
  var cL_length = lineString.length(); // In meters.
  
  // Create a center line feature based on the line string with 
  //  the properties of interest.
  var centerLine = ee.Feature(lineString).copyProperties({
    source: segment, 
    exclude: ["label"]
  }).set({
    cL_length: cL_length
  });
  
  return centerLine;
}

// Generate transect center lines by CATE segment.
var centerLines = selectedSegments.map(generateCenterLineBySegment);


if (true) { // true OR false.
  // Visualization.
  Map.setOptions("satellite");
  
  Map.centerObject(POI, 14); 
  
  Map.addLayer(basin, {color: "FFFFFF"}, "basin", false);
  
  Map.addLayer(nonF_upper.selfMask(), {palette: "0000FF"}, "nonF_upper", true);
  
  Map.addLayer(CF_lower.selfMask(), {palette: "00FF00"}, "CF_lower", true);
  
  Map.addLayer(CL_filled.selfMask(), {palette: "00FFFF"}, "CL_filled", true, 0.5);
  
  Map.addLayer(CL_notFilled.selfMask(), {palette: "FFFF00"}, "CL_notFilled", false, 0.5);
  
  Map.addLayer(centerLines, {color: "FF0000"}, "centerLines", true);
  
} else {
  // Export the result.
  var fileName = "TransectCenterLines_CLfilled";
  
  Export.table.toAsset({
    collection: centerLines, 
    description: fileName, 
    assetId: wd_Temp
      + fileName
  });
}

