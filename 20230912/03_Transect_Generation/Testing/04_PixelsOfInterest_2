/**
 * Introduction:
 * 1) Extract the highest upper non-forested pixel 
 *  and the lowest lower closed forest pixel within each study area segment
 *  based on the distance to ridge, valley, and their centerline
 *  (segments with both upper non-forested areas and closed forests
 *  are used to extract both types of extreme pixels).
 * 
 * Update: 8/13/2021.
 * 
 * Runtime: 3m.
*/


/* Load module(s). */
var IMG = require("users/ChenyangWei/Public:Modules/Image_Analysis&Processing");
var GATE = require("users/ChenyangWei/Public:Modules/Global_ATE");
var VIS = require("users/ChenyangWei/Public:Modules/Visualization");


/* Data preparation. */

// Extract the most detailed (level 12) HydroSHEDS basin.
var POI = ee.Geometry.Point([10.35857, 46.51679]);
var basin = ee.Feature(ee.FeatureCollection("WWF/HydroSHEDS/v1/Basins/hybas_12")
  .filterBounds(POI).first());

// Working directory.
var wd_Temp = "users/ChenyangWei/Temp/";

// Target projection.
var targetPrj = IMG.WGS84_30m;

// Segmentation results.
var CL_filled = ee.Image(wd_Temp + "CL_filled");
var CL_notFilled = ee.Image(wd_Temp + "CL_notFilled");

// Land cover datasets.
var CF_lower = ee.Image(wd_Temp + "CF_lower");
var nonF_upper = ee.Image(wd_Temp + "nonF_upper");

// Transect centerlines (CL-filled).
var centerLines = ee.FeatureCollection(wd_Temp + "TransectCenterLines_CLfilled");


// ALOS elevation (Version 3.2, released in January 2021) in the AOI.
var ALOSelv = ee.ImageCollection('JAXA/ALOS/AW3D30/V3_2').select('DSM')
  .filterBounds(basin.geometry())
  .mosaic()
  .reproject(targetPrj);


/* Combine the elevations and pixel coordinates of
  the qualified closed forests and non-forested areas, respectively. */

// Get the elevation of each type of area.
var closedForestsElv = ALOSelv.updateMask(CF_lower)
  .rename("CF_Elv");

var nonForestedElv = ALOSelv.updateMask(nonF_upper)
  .rename("nonF_Elv");

// Determine and rename the pixel coordinates 
//  of each type of area.
var rawCoords = ee.Image.pixelLonLat()
  .reproject(targetPrj);

var closedForestsCoords = rawCoords.updateMask(CF_lower)
  .select(["latitude", "longitude"], 
    ["CF_Lat", "CF_Long"]);

var nonForestedCoords = rawCoords.updateMask(nonF_upper)
  .select(["latitude", "longitude"], 
    ["nonF_Lat", "nonF_Long"]);

// Combine the elevations and pixel coordinates of each type of area.
var CF_ElvCoords = closedForestsElv
  .addBands(closedForestsCoords);

var nonF_ElvCoords = nonForestedElv
  .addBands(nonForestedCoords);


// Combine the segmented new CATE with the elevation and coordinate datasets
//  of the two types of areas for further extracting the elevational extremes by CATE segment
//  (Note: the order of bands here should be consistent with the order of combined reducers
//    in the following "reduceToVectors()" function).
var segCATE_CF_nonF_ElvCoords = CL_notFilled
  .addBands(CF_ElvCoords)
  .addBands(nonF_ElvCoords)
  .reproject(targetPrj);


/*  Within each previously selected basin, extract the elevations and corresponding coordinates 
  of the lowest pixel of closed forests in the lower regions (lower slope) and 
  the highest non-forested pixel in the upper regions (upper slope or cliff) 
  within each CATE segment, respectively. */

// Create a reducer to extract the elevation and corresponding coordinates 
//  of the lowest pixel of closed forests in the lower regions.
var minReducer_CFelv_Coords = ee.Reducer.min({
  numInputs: 3
}).setOutputs(CF_ElvCoords.bandNames());

// Create a reducer to extract the elevation and corresponding coordinates 
//  of the highest non-forested pixel in the upper regions.
var maxReducer_nonFelv_Coords = ee.Reducer.max({
  numInputs: 3
}).setOutputs(nonF_ElvCoords.bandNames());

// Combine the two elevation reducers
//  (Note: the order of reducers here should be consistent with the order of combined bands
//    in the previously generated "segCATE_CF_nonF_ElvCoords" image).
var combinedReducer = minReducer_CFelv_Coords.combine({
  reducer2: maxReducer_nonFelv_Coords, 
  sharedInputs: false
});
// (Note: if "sharedInputs" is false, 
//  the inputs of the combined reducer will be 
//  those of reducer1 followed by those of reducer2.)


// Extract the geometry of each basin.
var basinGeom = basin.geometry();


// Vectorize the segmented new CATE in the basin and 
//  extract the elevational extremes and corresponding coordinates 
//  within each vectorized segment.
var segmentElvMinMax = segCATE_CF_nonF_ElvCoords.reduceToVectors({
  // The first band (i.e., the segmented new CATE) of the input image 
  //  is expected to be an integer type; 
  //  adjacent pixels will be in the same vector 
  //  if they have the same value in this band.
  reducer: combinedReducer, 
  // Extract the minimum and maximum elevations.
  //  The inputs of this combined reducer will be taken from 
  //  the image's bands after dropping the first band 
  //  (i.e., the segmented new CATE). 
  geometry: basinGeom,
  maxPixels: 1e13,
  crs: "EPSG:4326",
  scale: 30,
  geometryType: "polygon",
  eightConnected: false // Only pixels that share an edge are considered adjacent.
});


// Select CATE segments with either the minimum elevation of closed forests or 
//  the maximum non-forested elevation.
var selectedSegments = segmentElvMinMax.filter(ee.Filter.or(
  ee.Filter.neq("nonF_Elv", null),
  ee.Filter.neq("CF_Elv", null)));

var CF_segments = selectedSegments.filter(ee.Filter.neq("CF_Elv", null));

var nonF_segments = selectedSegments.filter(ee.Filter.neq("nonF_Elv", null));


// Function to extract the pixel of the lowest closed forest in each lower segment.
function extract_LowCFpixel(CFseg) {
  // Extract the pixel of interest.
  var CF_Lat = CFseg.get("CF_Lat");
  var CF_Long = CFseg.get("CF_Long");

  var lat_Mask = CF_ElvCoords.select("CF_Lat")
    .eq(ee.Number(CF_Lat));
  var long_Mask = CF_ElvCoords.select("CF_Long")
    .eq(ee.Number(CF_Long));

  var lowCF_pixel = CF_ElvCoords.updateMask(lat_Mask)
    .updateMask(long_Mask);

  return lowCF_pixel;
}

// Function to extract the pixel of the highest non-forested area in each upper segment.
function extract_HighNonFpixel(nonFseg) {
  // Extract the pixel of interest.
  var nonF_Lat = nonFseg.get("nonF_Lat");
  var nonF_Long = nonFseg.get("nonF_Long");

  var lat_Mask = nonF_ElvCoords.select("nonF_Lat")
    .eq(ee.Number(nonF_Lat));
  var long_Mask = nonF_ElvCoords.select("nonF_Long")
    .eq(ee.Number(nonF_Long));

  var highNonF_pixel = nonF_ElvCoords.updateMask(lat_Mask)
    .updateMask(long_Mask);

  return highNonF_pixel;
}

var lowCFpixel_Img = ee.ImageCollection(CF_segments.map(extract_LowCFpixel))
  .mosaic()
  .reproject(targetPrj);

var highNonFpixel_Img = ee.ImageCollection(nonF_segments.map(extract_HighNonFpixel))
  .mosaic()
  .reproject(targetPrj);

// Combine the two types of pixels.
var lowCFpixel_highNonFpixel = lowCFpixel_Img.addBands(highNonFpixel_Img)
  .reproject(targetPrj);


if (false) { // true OR false.
  IMG.printImageInformation("lowCFpixel_highNonFpixel:", lowCFpixel_highNonFpixel);

  // Visualization.
  Map.setOptions("satellite");
  
  Map.centerObject(POI, 14); 
  
  Map.addLayer(basin, {color: "FFFFFF"}, "basin", false);
  
  Map.addLayer(nonF_upper.selfMask(), {palette: "0000FF"}, "nonF_upper", true);
  
  Map.addLayer(CF_lower.selfMask(), {palette: "00FF00"}, "CF_lower", true);
  
  Map.addLayer(CL_filled.selfMask(), {palette: "00FFFF"}, "CL_filled", true, 0.5);
  
  Map.addLayer(CL_notFilled.selfMask(), {palette: "FFFF00"}, "CL_notFilled", false, 0.5);
  
  Map.addLayer(centerLines, {color: "FFFF00"}, "centerLines", true);
  
  Map.addLayer(lowCFpixel_highNonFpixel.select("CF_Elv"), {palette: "FF0000"}, "lowCFpixel", true);
  
  Map.addLayer(lowCFpixel_highNonFpixel.select("nonF_Elv"), {palette: "00FFFF"}, "highNonFpixel", true);
  
}  else {
  // Output the results.
  Export.image.toAsset({
    image: lowCFpixel_highNonFpixel,
    description: "lowCFpixel_highNonFpixel_2", 
    assetId: wd_Temp
      + "lowCFpixel_highNonFpixel_2", 
    crs: "EPSG:4326",
    scale: 30,
    region: basin.bounds(),
    maxPixels: 1e13
  }); 
  
}
