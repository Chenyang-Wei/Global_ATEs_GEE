/**
 * Introduction:
 * 1) Group the adjacent lowest closed-forest points/highest non-forested points, respectively.
 * 
 * Update: 9/16/2021.
 * 
 * Runtime: 8 ~ 12m.
 */


/* Load module(s). */

var IMG = require("users/ChenyangWei/Public:Modules/Image_Analysis&Processing");
var GATE = require("users/ChenyangWei/Public:Modules/Global_ATE");


/**** The following section needs to be updated. ****/

// Set the area of interest.
var AOI = GATE.AOI_Alps; // Testing.

// Set the working directory.
var wd_Main = GATE.wd_Europe;

// Set the cloud asset directory.
var cloud_Main = GATE.cloud_Europe;

/**** The section above needs to be updated. ****/


/* Data and function preparation. */

// Load the lowest lower closed-forest point within each medial axis buffer.
var CFpts = ee.FeatureCollection(wd_Main + "Temp_2/" // Testing.
  + GATE.CFpts_fileName);

// Load the highest upper non-forested point within each medial axis buffer.
var NonFpts = ee.FeatureCollection(wd_Main + "Temp_2/" // Testing.
  + GATE.NonFpts_fileName);


/* Group the adjacent upper/lower endpoints
  of elevational transects, respectively. */

var dist = 300;

var groupedCFpts = GATE.groupAdjacentPOIs(CFpts, dist);

var groupedNonFpts = GATE.groupAdjacentPOIs(NonFpts, dist);


if (true) { // true OR false.

  //// Export the result(s).
  Export.table.toAsset({
    collection: groupedCFpts, 
    description: GATE.groupedCFpts_fileName + "_" + dist + "m", 
    assetId: cloud_Main + "Cloud_Temp/" // Testing.
      + GATE.groupedCFpts_fileName + "_" + dist + "m"
  });
  
  Export.table.toAsset({
    collection: groupedNonFpts, 
    description: GATE.groupedNonFpts_fileName + "_" + dist + "m", 
    assetId: cloud_Main + "Cloud_Temp/" // Testing.
      + GATE.groupedNonFpts_fileName + "_" + dist + "m"
  });
}
