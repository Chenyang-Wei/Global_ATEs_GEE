/**
 * Introduction:
 *  1) Compare different grouping metrics.
 * 
 * Update: 9/17/2021.
 */


/* Load module(s). */

var IMG = require("users/ChenyangWei/Public:Modules/Image_Analysis&Processing");
var GATE = require("users/ChenyangWei/Public:Modules/Global_ATE");


/**** The following section needs to be updated. ****/

// Set the area of interest.
var AOI = GATE.AOI_Alps; // Testing.

// Set the working directory.
var wd_Main = GATE.wd_Europe;

// Set the cloud asset directory.
var cloud_Main = GATE.cloud_Europe;

/**** The section above needs to be updated. ****/


/* Data and function preparation. */

// Load the new CATE.
var newCATE = ee.Image(wd_Main + "Climate-Based_ATE/" 
  + GATE.newCATE_fileName);

// Target projection.
var targetPrj = IMG.WGS84_30m;


/* Only grouping endpoints. */

// Load the pixel centroids along the medial axis.
var ctds_1g = ee.FeatureCollection(wd_Main + "Temp_2/" // Testing.
  + GATE.medialAxisPxCtds_fileName);

var buffer_1g = ee.FeatureCollection(cloud_Main + "Cloud_Temp/" // Testing.
  + "distBuffered_PxCtds");

// Load the transect centerlines.
var transectCLs_1g = ee.FeatureCollection(cloud_Main + "Cloud_Temp/" // Testing.
  + GATE.transectCLs_fileName
  + "_90m");


/* Grouping both medial points and endpoints. */

// Load the grouped pixel centroids along the medial axis.
var ctds_2g = ee.FeatureCollection(cloud_Main + "Cloud_Temp/" // Testing.
  + GATE.groupedPxCtds_fileName + "_90m");

// Load the buffered grouped medial points.
var buffer_2g = ee.FeatureCollection(cloud_Main + "Cloud_Temp/" // Testing.
  + GATE.buffered_GroupedPxCtds_fileName + "_90m");

// Load the transect centerlines.
var transectCLs_2g = ee.FeatureCollection(cloud_Main + "Cloud_Temp/" // Testing.
  + GATE.transectCLs_fileName
  + "_90m_90mGroupedCtd");


/* New transect construction criteria. */

// Load the transect centerlines.
var transectCLs_newCriteria = ee.FeatureCollection(cloud_Main + "Cloud_Temp/" // Testing.
  + "transectCLs_LowestCF_HighestNonFridge_90m_90mGroupedCtd");

var CLctds_newCriteria = transectCLs_newCriteria.map(function(CL) {
  return CL.centroid();
});

var CLctds_buffer = CLctds_newCriteria.map(function(ctd) {
  return ctd.buffer(180);
});

print(CLctds_buffer.first())

// Load the old transect centerlines.
var oldCLs = ee.FeatureCollection(wd_Main + "Transect_Generation/" // Testing.
  + GATE.Centerlines_fileName)
  .filterBounds(AOI); // Testing.


print("transectCLs_1g", transectCLs_1g.size());
print("transectCLs_2g", transectCLs_2g.size());
print("transectCLs_newCriteria", transectCLs_newCriteria.size());
print("oldCLs", oldCLs.size());


if (true) { // true OR false.
  //// Visualization.
  Map.setOptions("satellite");
  
  Map.centerObject(AOI, 13); 
  
  Map.addLayer(newCATE, {palette: "FFA500"}, "newCATE", false, 0.5);
  
  
  // Grouping once. 
  Map.addLayer(buffer_1g, {color: "FFFF00"}, "buffer_1g", true, 0.5);
  
  Map.addLayer(ctds_1g, {color: "0000FF"}, "ctds_1g", true);
  
  Map.addLayer(transectCLs_1g, {color: "00FF00"}, "transectCLs_1g", true);
  
  
  // Grouping twice. 
  Map.addLayer(buffer_2g, {color: "00FFFF"}, "buffer_2g", true, 0.5);
  
  Map.addLayer(ctds_2g, {color: "FF0000"}, "ctds_2g", true);
  
  Map.addLayer(transectCLs_2g, {color: "FF00FF"}, "transectCLs_2g", true);
  
  
  // New criteria.
  Map.addLayer(transectCLs_newCriteria, {color: "0000FF"}, "transectCLs_newCriteria", true);
  
  Map.addLayer(CLctds_buffer, {color: "FFFF00"}, "CLctds_buffer", true);
  
  Map.addLayer(CLctds_newCriteria, {color: "FF0000"}, "CLctds_newCriteria", true);
  
  
  Map.addLayer(oldCLs, {color: "FFFFFF"}, "old transectCLs", false);
  
}
