/**
 * Introduction:
 * 1) Buffer the pixel centroids along the medial axis
 *  by the distance to the nearest ridges/valleys.
 * 2) Identify the endpoints of a transect in each buffer.
 * 
 * Update: 9/17/2021.
 * 
 * Runtime: 2 ~ 3m.
 */


/* Load module(s). */

var IMG = require("users/ChenyangWei/Public:Modules/Image_Analysis&Processing");
var GATE = require("users/ChenyangWei/Public:Modules/Global_ATE");


/**** The following section needs to be updated. ****/

// Set the area of interest.
var AOI = GATE.AOI_Alps; // Testing.

// Set the working directory.
var wd_Main = GATE.wd_Europe;

// Set the cloud asset directory.
var cloud_Main = GATE.cloud_Europe;

/**** The section above needs to be updated. ****/


/* Data and function preparation. */

// Load the buffered grouped medial points.
var buffered_GroupedMedCtds = ee.FeatureCollection(cloud_Main + "Cloud_Temp/" // Testing.
  + GATE.buffered_GroupedPxCtds_fileName + "_90m");

// Load the new CATE.
var newCATE = ee.Image(wd_Main + "Climate-Based_ATE/" 
  + GATE.newCATE_fileName);

// Target projection.
var targetPrj = IMG.WGS84_30m;

// Function to read the annual land cover datasets.
var readAnnualLC = GATE.readAnnualCoperLandCover;


/* Extract the landforms of upper and lower regions. */

// Load and reproject the ALOS landforms dataset in the new CATE.
var LF_noInvaid_newCATE = GATE.loadReproject_ALOSlandforms(targetPrj)
  .updateMask(newCATE);

// Landforms of upper and lower regions in the new CATE.
var UpperLF = GATE.extractUpperLandforms(LF_noInvaid_newCATE);

var LowerLF = GATE.extractLowerLandforms(LF_noInvaid_newCATE);


/* Obtain the lower closed forests and the upper non-forested areas 
  in the new CATE. */

// Read the Land Cover datasets of 2015-2019.
var landCover = ee.ImageCollection.fromImages([
  readAnnualLC(2015),
  readAnnualLC(2016),
  readAnnualLC(2017),
  readAnnualLC(2018),
  readAnnualLC(2019),
]);

// Extract and reproject the elevation of closed forests 
//   (tree canopy > 70 %) in 2015-2019.
var CF_inAllYrs = GATE.extractClosedForests_inAllYears(landCover, targetPrj);

// Extract and reproject the non-forested areas in 2015-2019.
var nonF_inAllYrs = GATE.extractNonForested_inAllYears(landCover, targetPrj);

// Closed forests in the lower regions.
var CF_lower = CF_inAllYrs.updateMask(LowerLF)
  .selfMask();

// Non-forested areas in the upper regions.
var nonF_upper = nonF_inAllYrs.updateMask(UpperLF)
  .selfMask();


/* Extract the lowest closed-forest point in the lower region 
  and the highest non-forested point in the upper region 
  within each buffer of the pixel centroids along the medial axis. */

// ALOS elevation (Version 3.2, released in January 2021) in the AOI.
var ALOSelv = GATE.load_ALOSelevation(AOI, targetPrj);

// Extract the elevational extremes per buffer.
var selectedBuffers_withElvMinMax = GATE.extractElvMinMax_perBuffer(ALOSelv, 
  CF_lower, nonF_upper, targetPrj, buffered_GroupedMedCtds);


/* In each selected buffer along the medial axis, 
  construct the highest upper non-forested point
  and the lowest lower closed-forest point. */

var CFpts = GATE.constructPOIs_byBuffer(selectedBuffers_withElvMinMax, 
  "CF_Long", "CF_Lat");

var NonFpts = GATE.constructPOIs_byBuffer(selectedBuffers_withElvMinMax, 
  "nonF_Long", "nonF_Lat");


if (true) {
  //// Export the result(s).
  Export.table.toAsset({
    collection: CFpts, 
    description: GATE.CFpts_fileName + "90mGroupedCtd", 
    assetId: cloud_Main + "Cloud_Temp/" // Testing.
      + GATE.CFpts_fileName + "90mGroupedCtd"
  });
  
  Export.table.toAsset({
    collection: NonFpts, 
    description: GATE.NonFpts_fileName + "90mGroupedCtd", 
    assetId: cloud_Main + "Cloud_Temp/" // Testing.
      + GATE.NonFpts_fileName + "90mGroupedCtd"
  });
}

