/**
 * Introduction:
 *  1) Extract the locally longest transect centerlines. 
 * 
 * Update: 9/20/2021.
 * 
 * Runtime: 9 ~ 11m.
 */


/* Load module(s). */

var IMG = require("users/ChenyangWei/Public:Modules/Image_Analysis&Processing");
var GATE = require("users/ChenyangWei/Public:Modules/Global_ATE");


/**** The following section needs to be updated. ****/

// Set the area of interest.
var AOI = GATE.AOI_Alps; // Testing.

// Set the working directory.
var wd_Main = GATE.wd_Europe;

// Set the cloud asset directory.
var cloud_Main = GATE.cloud_Europe;

/**** The section above needs to be updated. ****/


/* Data and function preparation. */

// Load the transect centerlines.
var transectCLs = ee.FeatureCollection(cloud_Main + "Cloud_Temp/" // Testing.
  + "transectCLs_LowestCF_HighestNonFRidge");


// Load the centroids of transect centerlines.
var CL_centroids = ee.FeatureCollection(cloud_Main + "Cloud_Temp/" // Testing.
  + "transectCLs_Centroids_LowestCF_HighestNonFRidge");


/* Group the centroids of transect centerlines by distance. */

// Function to group the centroids of transect centerlines by distance.
var extractLocalLongestCLs = function(CLctds_FtrCol, groupDist, CLs_FtrCol) {
  // Union the medial points within a distance to each other.
  var unioned_CLctd_buffer = CLctds_FtrCol.map(function(CLctd) {
    return CLctd.buffer(groupDist);
  }).union();
  
  // Convert the multiPolygon of the unioned buffer
  //  to a set of individual polygons.
  var unionedBuffer_Plgs = unioned_CLctd_buffer.first()
    .geometry().coordinates().map(function(coords) {
      var plg = ee.Geometry.Polygon(coords);
      
      return ee.Feature(plg);
    });
  
  // // Convert the multiPolygon of the unioned buffer
  // //  to a set of individual polygons.
  // var unionedBuffer_Plgs = ee.FeatureCollection(unioned_CLctd_buffer.first()
  //   .geometry().coordinates().map(function(coords) {
  //     var plg = ee.Geometry.Polygon(coords);
      
  //     return ee.Feature(plg);
  //   }));
  
  // Define a spatial filter as geometries that intersect.
  var spatialFilter = ee.Filter.intersects({
    leftField: ".geo",
    rightField: ".geo"
  });
  
  // Define a save all join.
  var keyName = "grouped_Ctds";
  
  var saveAllJoin = ee.Join.saveAll({
    matchesKey: keyName,
  });
  
  // Join each polygon of the unioned medial point buffer with 
  //  the medial points that it intersects.
  var grouped_CLctds_FtrCol = saveAllJoin.apply(unionedBuffer_Plgs, CLctds_FtrCol, 
    spatialFilter);
  
  // Extract the centroid of the longest transect in each group.
  var CLctds_LongestCL = grouped_CLctds_FtrCol.map(function(joined_CLctds) {
    var joinedCLctds_FtrCol = ee.FeatureCollection(ee.List(joined_CLctds.get(keyName)));
  
    var sorted_CLctds = joinedCLctds_FtrCol.sort({
      property: "CL_length", 
      ascending: false
    });
    
    var selected_CLctd = sorted_CLctds.first();
    
    return selected_CLctd;
  });
  
  // Select the longest centerlines.
  var IDname = "CL_ID";
  
  var LongestCL_IDs = CLctds_LongestCL.aggregate_array(IDname);
  
  var LongestCLs = CLs_FtrCol.filter(ee.Filter.inList({
    leftField: IDname, 
    rightValue: LongestCL_IDs
  }));
  
  return LongestCLs;
};

var groupDist = 180;

var extracted_LongestCLs = extractLocalLongestCLs(CL_centroids, groupDist, transectCLs);


if (true) { // true OR false.

  //// Export the result(s).
  Export.table.toAsset({
    collection: extracted_LongestCLs, 
    description: "extractedLongestCLs_LowestCF_HighestNonFRidge" + "_180m",
    assetId: cloud_Main + "Cloud_Temp/" // Testing.
      + "extractedLongestCLs_LowestCF_HighestNonFRidge" + "_180m"
  });
}
