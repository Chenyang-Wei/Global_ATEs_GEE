/**
 * Introduction:
 *  1) Group transects based on the distances from the centroid
 *  of each transect to other transects. 
 * 
 * Update: 9/20/2021.
 * 
 * Runtime: 12m ~ 5h.
 */


/* Load module(s). */

var IMG = require("users/ChenyangWei/Public:Modules/Image_Analysis&Processing");
var GATE = require("users/ChenyangWei/Public:Modules/Global_ATE");


/**** The following section needs to be updated. ****/

// Set the area of interest.
var AOI = GATE.AOI_Alps; // Testing.

// Set the working directory.
var wd_Main = GATE.wd_Europe;

// Set the cloud asset directory.
var cloud_Main = GATE.cloud_Europe;

/**** The section above needs to be updated. ****/


/* Data and function preparation. */

// Load the transect centerlines.
// var transectCenterlines = ee.FeatureCollection(cloud_Main + "Cloud_Temp/" // Testing.
//   + "transectCLs_LowestCF_HighestNonFRidge");

var transectCenterlines = ee.FeatureCollection(cloud_Main + "Cloud_Temp/" // Testing.
  + "transectCLs_LowestCF_HighestNonFRidge_180mGrouped");


/* Group transects based on the distances from the centroid of each transect
  to other transects. */

var groupDist = 90;

var groupTransectCLs = function(CLs, dist) {
  // Extract the centroid of each transect.
  var CL_centroids = CLs.map(function(CL) {
    return CL.centroid();
  });
  
  // Define a spatial filter, with a certain distance.
  var distFilter = ee.Filter.withinDistance({
    distance: dist,
    leftField: ".geo",
    rightField: ".geo"
  });
  
  // Define a saveAll join.
  var keyName = "TransectCLs";
  
  var distSaveAll = ee.Join.saveAll({
    matchesKey: keyName
  });
  
  // Apply the join.
  var spatialJoined = distSaveAll.apply(CL_centroids, CLs, distFilter);
  
  // Select the longest transect for each centroid.
  var longestCLs = spatialJoined.map(function(joined) {
    var joinedCLs = ee.FeatureCollection(ee.List(joined.get(keyName)));
  
    var sortedCLs = joinedCLs.sort({
      property: "CL_length", 
      ascending: false
    });
    
    var longestCL = sortedCLs.first();
    
    return longestCL;
  });
  
  // Remove the duplicate transects.
  var noDuplicates = longestCLs.distinct(".geo");
  
  return noDuplicates;
};

var groupedCLs = groupTransectCLs(transectCenterlines, groupDist);

// Print the result.
// print(groupedCLs.first(), groupedCLs.size());


if (true) { // true OR false.

  //// Export the result(s).
  Export.table.toAsset({
    collection: groupedCLs, 
    // description: "groupedCLs_" + groupDist + "m_rawMedCtds",
    description: "groupedCLs_" + groupDist + "m_180mGroupedMedCtds",
    // assetId: cloud_Main + "Cloud_Temp/" // Testing.
    //   + "groupedCLs_" + groupDist + "m_rawMedCtds"
    assetId: cloud_Main + "Cloud_Temp/" // Testing.
      + "groupedCLs_" + groupDist + "m_180mGroupedMedCtds"
  });
}

