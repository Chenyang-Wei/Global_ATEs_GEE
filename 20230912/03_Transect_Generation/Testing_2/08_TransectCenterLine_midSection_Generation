/**
 * Introduction:
 *  1) Generate the mid-half and mid-quarter sections of transect centerlines. 
 * 
 * Update: 9/21/2021.
 * 
 * Runtime: 3 ~ 4m.
 */


/* Load module(s). */

var IMG = require("users/ChenyangWei/Public:Modules/Image_Analysis&Processing");
var GATE = require("users/ChenyangWei/Public:Modules/Global_ATE");


/**** The following section needs to be updated. ****/

// Set the area of interest.
var AOI = GATE.AOI_Alps; // Testing.

// Set the working directory.
var wd_Main = GATE.wd_Europe;

// Set the cloud asset directory.
var cloud_Main = GATE.cloud_Europe;

/**** The section above needs to be updated. ****/


/* Data and function preparation. */

// Load the transect centerlines.
var transectCLs = ee.FeatureCollection(cloud_Main + "Cloud_Temp/" // Testing.
  + "transectCLs_LowestCF_HighestNonFRidge");


/* Extract the centroid of each transect. */

var midHalf_CLs = transectCLs.map(function(CL) {
  var fullLength = CL.get("CL_length");
  
  var halfLength_BufferRadius = ee.Number(fullLength).divide(4);
  
  var halfLength_Buffer = CL.centroid().buffer(halfLength_BufferRadius);
  
  var midHalf = CL.intersection(halfLength_Buffer);
  
  return midHalf;
});

var midQuarter_CLs = transectCLs.map(function(CL) {
  var fullLength = CL.get("CL_length");
  
  var quarterLength_BufferRadius = ee.Number(fullLength).divide(8);
  
  var quarterLength_Buffer = CL.centroid().buffer(quarterLength_BufferRadius);
  
  var midQuarter = CL.intersection(quarterLength_Buffer);
  
  return midQuarter;
});

// var CL_centroids = transectCLs.map(function(CL) {
//   return CL.centroid();
// });

var midOneThird_CLs = transectCLs.map(function(CL) {
  var fullLength = CL.get("CL_length");
  
  var bufferRadius = ee.Number(fullLength).divide(6);
  
  var buffer = CL.centroid().buffer(bufferRadius);
  
  var midOneThird = CL.intersection(buffer);
  
  return midOneThird;
});

print(midQuarter_CLs.first())

Map.addLayer(transectCLs, {color: "0000FF"}, "transectCLs")
Map.addLayer(midHalf_CLs, {color: "FF0000"}, "midHalf_CLs")
Map.addLayer(midQuarter_CLs, {color: "FFFF00"}, "midQuarter_CLs")


if (true) { // true OR false.

  //// Export the result(s).
  Export.table.toAsset({
    collection: midHalf_CLs, 
    description: "midHalfCLs_LowestCF_HighestNonFRidge",
    assetId: cloud_Main + "Cloud_Temp/" // Testing.
      + "midHalfCLs_LowestCF_HighestNonFRidge"
  });

  //// Export the result(s).
  Export.table.toAsset({
    collection: midQuarter_CLs, 
    description: "midQuarterCLs_LowestCF_HighestNonFRidge",
    assetId: cloud_Main + "Cloud_Temp/" // Testing.
      + "midQuarterCLs_LowestCF_HighestNonFRidge"
  });

  //// Export the result(s).
  Export.table.toAsset({
    collection: midOneThird_CLs, 
    description: "midOneThirdCLs_LowestCF_HighestNonFRidge",
    assetId: cloud_Main + "Cloud_Temp/" // Testing.
      + "midOneThirdCLs_LowestCF_HighestNonFRidge"
  });

  // //// Export the result(s).
  // Export.table.toAsset({
  //   collection: CL_centroids, 
  //   description: "transectCLs_Centroids_LowestCF_HighestNonFRidge",
  //   assetId: cloud_Main + "Cloud_Temp/" // Testing.
  //     + "transectCLs_Centroids_LowestCF_HighestNonFRidge"
  // });
}

