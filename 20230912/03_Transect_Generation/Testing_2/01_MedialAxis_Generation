/**
 * Introduction:
 * 1) Extract the landforms of ridges and valleys.
 * 2) Segment the entire area (not just the new CATE) based on the distance to
 *  ridges/valleys/ridges + valleys.
 * 3) Extract the medial axis between ridges and valleys within the new CATE.
 * 4) Extract the squared distance to the nearest ridges/valleys 
 *  at each pixel along the medial axis.
 * 
 * Update: 9/10/2021.
 * 
 * Runtime: 9m.
 * 
 * Notes: The high-latitude stripes with no valid data in the ALOS landform dataset 
 *  can cause some problems in the segmented areas. So, they need to be removed.
 */


/* Load module(s). */

var IMG = require("users/ChenyangWei/Public:Modules/Image_Analysis&Processing");
var GATE = require("users/ChenyangWei/Public:Modules/Global_ATE");


/**** The following section needs to be updated. ****/

// Set the area of interest.
var AOI = GATE.AOI_Alps_2; // Testing.

// Set the working directory.
var wd_Main = GATE.wd_Europe;

/**** The section above needs to be updated. ****/


/* Data and function preparation. */

// Load the new CATE.
var newCATE = ee.Image(wd_Main + "Climate-Based_ATE/" 
  + GATE.newCATE_fileName);

// Target projection.
var targetPrj = IMG.WGS84_30m;

// Segmentation function.
var segmentation = GATE.landformsDistance_Segmentation;


/* Extract the landforms of ridges and valleys. */

// Load and reproject the ALOS landforms dataset.
var LF_noInvaid = GATE.loadReproject_ALOSlandforms(targetPrj);

// Extract ridges.
var ridges = GATE.extractRidgeLandforms(LF_noInvaid);

// Extract valleys.
var valleys = GATE.extractValleyLandforms(LF_noInvaid);

// Ridges or valleys.
var ridges_OR_valleys = ridges.or(valleys); 


/* Segment the entire area (not just the new CATE) based on the distance to
  ridges/valleys/ridges + valleys.*/

// Define the size of neighborhood in pixels.
var neighborSize_inPixels = 1e3;

var segmented_Ridges = segmentation(ridges, 
  neighborSize_inPixels, targetPrj);

var segmented_Valleys = segmentation(valleys, 
  neighborSize_inPixels, targetPrj);

var segmented_ridgesORvalleys = segmentation(ridges_OR_valleys, 
  neighborSize_inPixels, targetPrj);


/* Extract the medial axis between ridges and valleys within the new CATE. */

var medialAxis = segmented_Ridges.and(segmented_Valleys)
  .and(segmented_ridgesORvalleys.not());


/* Extract the squared distance to the nearest ridges/valleys 
  at each pixel along the medial axis. */

var sqDist = ridges_OR_valleys.medialAxis({
  neighborhood: neighborSize_inPixels, 
  units: "pixels"
}).select("medial")
  .reproject(targetPrj);

var medialAxis_sqDist = sqDist.updateMask(medialAxis)
  .updateMask(newCATE)
  .rename("medialAxis_sqDist_inPixels");


if (false) { // true OR false.
  IMG.printImageInformation("medialAxis_sqDist:", medialAxis_sqDist);

  //// Visualization.
  Map.setOptions("satellite");
  
  Map.centerObject(AOI, 13); 
  
  Map.addLayer(AOI, {color: "FFFFFF"}, "AOI", false);
  
  Map.addLayer(newCATE, {palette: "FFA500"}, "newCATE", false);
  
  Map.addLayer(segmented_Ridges.selfMask(), {palette: "0000FF"}, 
    "segmented_Ridges", false);
  
  Map.addLayer(segmented_Valleys.selfMask(), {palette: "00FF00"}, 
    "segmented_Valleys", false);
  
  Map.addLayer(segmented_ridgesORvalleys.selfMask(), {palette: "00FFFF"}, 
    "segmented_ridgesORvalleys", false);
  
  Map.addLayer(ridges.selfMask(), {palette: "FFFF00"}, 
    "ridges", false);
  
  Map.addLayer(valleys.selfMask(), {palette: "FF00FF"}, 
    "valleys", false);
  
  Map.addLayer(medialAxis.selfMask(), {palette: "00FFFF"}, 
    "medialAxis", true);
  
  Map.addLayer(sqDist, {palette: "FF0000"}, 
    "sqDist", false);
  
  Map.addLayer(medialAxis_sqDist, 
    {min: 0, max: 500, palette: "0000FF, FFFFFF, FF0000"}, 
    "medialAxis_sqDist", true);

} else {
  //// Output the result(s).
  var fileName = GATE.medialAxis_fileName;
  
  Export.image.toAsset({
    image: medialAxis_sqDist,
    description: fileName, 
    assetId: wd_Main + "Temp_3/" // Testing.
      + fileName, 
    crs: targetPrj.crs,
    scale: targetPrj.scale,
    region: AOI,
    maxPixels: IMG.maximumPixelNumber
  }); 
}

