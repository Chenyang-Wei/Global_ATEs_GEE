/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var old_CLs = ee.FeatureCollection("users/ChenyangWei/Europe_ATE/Transect_Generation/TransectCenterLines_LowerClosedForests_UpperNonForested_30mSegmentedNewCATE"),
    oldSeg = ee.Image("users/ChenyangWei/Europe_ATE/Transect_Generation/30mSegmentedNewCATE_distToRidgesNoCliff_NAstripesRemoved_ridgesRemoved");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Update: 8/13/2021.


/* Load module(s). */
var IMG = require("users/ChenyangWei/Public:Modules/Image_Analysis&Processing");
var GATE = require("users/ChenyangWei/Public:Modules/Global_ATE");
var VIS = require("users/ChenyangWei/Public:Modules/Visualization");


/* Data preparation. */

// Extract the most detailed (level 12) HydroSHEDS basin.
var POI = ee.Geometry.Point([10.35857, 46.51679]);
var basin = ee.Feature(ee.FeatureCollection("WWF/HydroSHEDS/v1/Basins/hybas_12")
  .filterBounds(POI).first());

print(basin);

// Working directory.
var wd_Temp = "users/ChenyangWei/Temp/";

// Target projection.
var targetPrj = IMG.WGS84_30m;

// Segmentation results.
var CL_filled = ee.Image(wd_Temp + "CL_filled");
var CL_notFilled = ee.Image(wd_Temp + "CL_notFilled");

// Land cover datasets.
var CF_lower = ee.Image(wd_Temp + "CF_lower");
var nonF_upper = ee.Image(wd_Temp + "nonF_upper");

// Transect centerlines (CL-filled).
var raw_CLs = ee.FeatureCollection(wd_Temp + "TransectCenterLines_CLfilled");

// Pixels of interest.
var PxsOI = ee.Image(wd_Temp + "lowCFpixel_highNonFpixel_2");
// var PxsOI = ee.Image(wd_Temp + "lowCFpixel_highNonFpixel");

// Transect centerlines (CL-filled).
var new_CLs = ee.FeatureCollection(wd_Temp + "TransectCenterLines_fromCFtoNonF_2");
// var new_CLs = ee.FeatureCollection(wd_Temp + "TransectCenterLines_fromCFtoNonF");

// Centerline between ridge and valley.
var ridgeValley_CL = ee.Image(wd_Temp + "ridgeValley_CL");
var medialAxis = ee.Image(wd_Temp + "medialAxis_centerLine_sqDist");

// Medial axis.
var medialAxis_distBuffered = ee.FeatureCollection(wd_Temp + "medialAxis_distBuffered");
var medialAxis_centroids = ee.FeatureCollection(wd_Temp + "medialAxis_centroids_withID");

medialAxis_centroids = medialAxis_centroids.sort("ID");

var ctds = ee.Geometry.LineString(medialAxis_centroids.geometry().coordinates());

print(ctds);

var IDs = medialAxis_centroids.aggregate_array("ID");
var slicedIDs = IDs.slice({
  start: 0, 
  end: IDs.size(), 
  step: 5
});

// print(medialAxis_centroids.size(),
//   IDs,
//   slicedIDs);

var centroids_subset = medialAxis_centroids.filter(ee.Filter.inList("ID", slicedIDs));
print(centroids_subset.limit(5));


// // The randomColumn() method will add a column of uniform random
// //  numbers in a column named "random" by default.
// var split = 0.2;

// var centroids_subset = medialAxis_centroids.randomColumn()
//   .filter(ee.Filter.lte("random", split));

// print(centroids_subset.size(),
//   centroids_subset.first());

// Segmented study domain based on the centerline between ridge and valley.
var segRVcl = ee.Image(wd_Temp + "segmented_byRVcenterline");

var segRVorCL = ee.Image(wd_Temp + "segmented_byRidgeValleyORcenterline");


/* Pre-process the ALOS landform dataset. */

// The landform dataset is based on the 30m "AVE" band of JAXA's ALOS DEM 
//  (available in EE as JAXA/ALOS/AW3D30_V1_1).
//  There are stripes of invalid data in areas over 60 degrees in latitude.
var rawLF = ee.Image('CSP/ERGo/1_0/Global/ALOS_landforms').select('constant')
  .reproject(targetPrj);

// Remove the high-latitude stripes of invalid landforms  
//  in the landform dataset (based on the ALOS DEM V1.1).
var ALOSv11 = ee.Image("JAXA/ALOS/AW3D30_V1_1").select("AVE")
  .reproject(targetPrj);

var LF_noInvaid = rawLF.updateMask(ALOSv11.mask());


/* Extract the landforms of mountain ridges both inside and outside the new CATE.
  Including: peak/ridge (warm/normal/cool) and mountain/divide. */

// Function to extract mountain ridge and valley landforms.
var extractRidges = function(landforms) {
  var ridges = landforms.lte(14);
  
  return ridges;
};

var extractValleys = function(landforms) {
  var valleys = landforms.gte(41);
  
  return valleys;
};


// Extract the mountain ridge pixels.
var ridge = extractRidges(LF_noInvaid);

// Valley.
var valley = extractValleys(LF_noInvaid);


if (true) { // true OR false.

  // Visualization.
  Map.setOptions("satellite");
  
  Map.centerObject(POI, 14); 
  
  Map.addLayer(basin, {color: "FFFFFF"}, "basin", false);
  
  Map.addLayer(segRVcl.selfMask(), {palette: "228B22"}, "segRVcl", false, 1);
  
  Map.addLayer(segRVorCL.selfMask(), {palette: "FFA500"}, "segRVorCL", false, 1);
  
  Map.addLayer(ridgeValley_CL, {palette: "228B22"}, "ridgeValley_CL", true);
  
  
  Map.addLayer(medialAxis_distBuffered, {color: "808080"}, "medialAxis_distBuffered", true);
  
  Map.addLayer(medialAxis.sqrt(), {min: 0, max: 30, palette: "0000FF, FFFFFF, FF0000"}, "medialAxis", true);
  
  Map.addLayer(medialAxis_centroids, {color: "FF0000"}, "medialAxis_centroids", true);
  
  // Map.addLayer(centroids_subset, {color: "FFFF00"}, "centroids_subset", true);
  Map.addLayer(ctds, {color: "FFFF00"}, "ctds", true);
  
  
  Map.addLayer(valley.selfMask(), {palette: "00FF00"}, "valley", true, 1);
  
  Map.addLayer(ridge.selfMask(), {palette: "0000FF"}, "ridge", true, 1);
  
  Map.addLayer(nonF_upper.selfMask(), {palette: "0000FF"}, "nonF_upper", false);
  
  Map.addLayer(CF_lower.selfMask(), {palette: "00FF00"}, "CF_lower", false);
  
  Map.addLayer(oldSeg.clip(basin.geometry()), {palette: "FFFF00"}, "Old_Segmented", false, 0.5);
  
  Map.addLayer(CL_filled.selfMask(), {palette: "00FFFF"}, "New_Segmented_noDivide", false, 0.5);
  
  Map.addLayer(CL_notFilled.selfMask(), {palette: "FFFF00"}, "New_Segmented_withDivide", false, 0.5);
  
  
  Map.addLayer(raw_CLs, {color: "00FFFF"}, "raw_CLs", false);
  
  Map.addLayer(PxsOI.select("CF_Elv"), {palette: "00FFFF"}, "lowCFpixel", false);
  
  Map.addLayer(PxsOI.select("nonF_Elv"), {palette: "FFA500"}, "highNonFpixel", false);
  
  Map.addLayer(old_CLs.filterBounds(basin.geometry()), {color: "FFFF00"}, "old_CLs", false);
  
  Map.addLayer(new_CLs, {color: "FF0000"}, "new_CLs", false);
} 