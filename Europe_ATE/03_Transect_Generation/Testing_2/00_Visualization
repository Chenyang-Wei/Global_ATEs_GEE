/**
 * Introduction:
 *  Visualization
 * 
 * Update: 9/17/2021.
 */


/* Load module(s). */

var IMG = require("users/ChenyangWei/Public:Modules/Image_Analysis&Processing");
var GATE = require("users/ChenyangWei/Public:Modules/Global_ATE");


/**** The following section needs to be updated. ****/

// Set the area of interest.
var AOI = GATE.AOI_Alps; // Testing.

// Set the working directory.
var wd_Main = GATE.wd_Europe;

// Set the cloud asset directory.
var cloud_Main = GATE.cloud_Europe;

/**** The section above needs to be updated. ****/


/* Data and function preparation. */

// Segmentation function.
var segmentation = GATE.landformsDistance_Segmentation;

// Load the new CATE.
var newCATE = ee.Image(wd_Main + "Climate-Based_ATE/" 
  + GATE.newCATE_fileName);

// Load the medial axis between ridges and valleys.
var medialAxis = ee.Image(wd_Main + "Temp_2/" // Testing.
  + GATE.medialAxis_fileName);

// Target projection.
var targetPrj = IMG.WGS84_30m;

// Extract the most detailed (level 12) HydroSHEDS basins intersecting the study domain.
var basins = ee.FeatureCollection("WWF/HydroSHEDS/v1/Basins/hybas_12")
  // .filterBounds(ee.Feature(studyDomain.first()).geometry())
  .filterBounds(AOI); // Testing.

// Function to read the annual land cover datasets.
var readAnnualLC = GATE.readAnnualCoperLandCover;

// Function to extract and reproject areas classified as closed forests
//  in ALL the five years from 2015 to 2019.
var extractCF_inAllYrs = GATE.extractClosedForests_inAllYears;

// Function to extract and reproject non-forested areas
//  in ALL the five years from 2015 to 2019.
var extractNonF_inAllYrs = GATE.extractNonForested_inAllYears;

// Load the pixel centroids along the medial axis.
var medialAxis_PxCtds = ee.FeatureCollection(wd_Main + "Temp_2/" // Testing.
  + GATE.medialAxisPxCtds_fileName);

// Load the grouped pixel centroids along the medial axis.
var grouped_PxCtds = ee.FeatureCollection(cloud_Main + "Cloud_Temp/" // Testing.
  + GATE.groupedPxCtds_fileName + "_90m");

// Load the buffered grouped medial points.
var buffered_GroupedPxCtds = ee.FeatureCollection(cloud_Main + "Cloud_Temp/" // Testing.
  + GATE.buffered_GroupedPxCtds_fileName + "_90m");

var distBuffered_PxCtds = ee.FeatureCollection(cloud_Main + "Cloud_Temp/" // Testing.
  + "distBuffered_PxCtds");


/* Extract the landforms of ridges and valleys. */

// Load and reproject the ALOS landforms dataset.
var LF_noInvaid = GATE.loadReproject_ALOSlandforms(targetPrj);

// Extract ridges.
var ridges = GATE.extractRidgeLandforms(LF_noInvaid);

// Extract valleys.
var valleys = GATE.extractValleyLandforms(LF_noInvaid);

// Ridges or valleys.
var ridges_OR_valleys = ridges.or(valleys); 


/* Segment the entire area (not just the new CATE) based on the distance to
  ridges/valleys/ridges + valleys.*/

var segmented_Ridges = segmentation(ridges, targetPrj);

var segmented_Valleys = segmentation(valleys, targetPrj);

var segmented_ridgesORvalleys = segmentation(ridges_OR_valleys, targetPrj);


/* Extract the medial axis between ridges and valleys within the new CATE. */

var medialAxis_Raw = segmented_Ridges.and(segmented_Valleys)
  .and(segmented_ridgesORvalleys.not());


var LF_noInvaid_newCATE = LF_noInvaid
  .updateMask(newCATE);

// Landforms of upper and lower regions in the new CATE.
var UpperLF = GATE.extractUpperLandforms(LF_noInvaid_newCATE);

var LowerLF = GATE.extractLowerLandforms(LF_noInvaid_newCATE);


/* Obtain the lower closed forests and the upper non-forested areas 
  in the new CATE. */

// Read the Land Cover datasets of 2015-2019.
var landCover = ee.ImageCollection.fromImages([
  readAnnualLC(2015),
  readAnnualLC(2016),
  readAnnualLC(2017),
  readAnnualLC(2018),
  readAnnualLC(2019),
]);

// Extract and reproject the elevation of closed forests 
//   (tree canopy > 70 %) in 2015-2019.
var CF_inAllYrs = extractCF_inAllYrs(landCover, targetPrj)
  .updateMask(newCATE);

// Extract and reproject the non-forested areas in 2015-2019.
var nonF_inAllYrs = extractNonF_inAllYrs(landCover, targetPrj)
  .updateMask(newCATE);

// Closed forests in the lower regions.
var CF_lower = CF_inAllYrs.updateMask(LowerLF)
  .selfMask()
  .rename("closedForests_LowerRegions");

// Non-forested areas in the upper regions.
var nonF_upper = nonF_inAllYrs.updateMask(UpperLF)
  .selfMask()
  .rename("nonForested_UpperRegions");

// Select basins with all types of the combined areas.
var selectedBasins = ee.FeatureCollection(wd_Main + "Temp_2/" 
  + GATE.selectedBasins_fileName);

// Load the lowest lower closed-forest point within each medial axis buffer.
var LowestCF = ee.FeatureCollection(cloud_Main + "Cloud_Temp/" // Testing.
  + "LowestCF_90mGroupedCtd");

// Load the highest upper non-forested point within each medial axis buffer.
var HighestNonF_Ridge = ee.FeatureCollection(cloud_Main + "Cloud_Temp/" // Testing.
  + "HighestNonF_Ridge_90mGroupedCtd");

// Load the lowest lower closed-forest point within each medial axis buffer.
var CFpts = ee.FeatureCollection(cloud_Main + "Cloud_Temp/" // Testing.
  + GATE.CFpts_fileName + "90mGroupedCtd");

// Load the highest upper non-forested point within each medial axis buffer.
var NonFpts = ee.FeatureCollection(cloud_Main + "Cloud_Temp/" // Testing.
  + GATE.NonFpts_fileName + "90mGroupedCtd");

// // Load the unioned closed-forest points.
// var unioned_CFpts = ee.FeatureCollection(cloud_Main + "Cloud_Temp/" // Testing.
//   + GATE.unionedCFpts_fileName
//   + "_90m");

// // Load the unioned non-forested points.
// var unioned_NonFpts = ee.FeatureCollection(cloud_Main + "Cloud_Temp/" // Testing.
//   + GATE.unionedNonFpts_fileName
//   + "_90m");

// Load the grouped closed-forest points.
var grouped_CFpts = ee.FeatureCollection(cloud_Main + "Cloud_Temp/" // Testing.
  + GATE.groupedCFpts_fileName
  + "_90m_90mGroupedCtd");

// Load the grouped non-forested points.
var grouped_NonFpts = ee.FeatureCollection(cloud_Main + "Cloud_Temp/" // Testing.
  + GATE.groupedNonFpts_fileName
  + "_90m_90mGroupedCtd");

// Load the grouped lowest closed forest points.
var groupedLowestCF = ee.FeatureCollection(cloud_Main + "Cloud_Temp/" // Testing.
  + "groupedLowestCF_90m_90mGroupedCtd");

// Load the grouped highest non-forested ridge points.
var groupedHighestNonF_Ridge = ee.FeatureCollection(cloud_Main + "Cloud_Temp/" // Testing.
  + "groupedHighestNonF_Ridge_90m_90mGroupedCtd");

// Load the transect centerlines.
var transectCLs_LowestCF_HighestNonFridge = ee.FeatureCollection(cloud_Main + "Cloud_Temp/" // Testing.
  + "transectCLs_LowestCF_HighestNonFridge_90m_90mGroupedCtd");

// Load the transect centerlines.
var transectCLs_90m_90mGroupedCtd = ee.FeatureCollection(cloud_Main + "Cloud_Temp/" // Testing.
  + GATE.transectCLs_fileName
  + "_90m_90mGroupedCtd");

// Load the transect centerlines.
var transectCLs180 = ee.FeatureCollection(cloud_Main + "Cloud_Temp/" // Testing.
  + GATE.transectCLs_fileName
  + "_180m");

// Load the transect centerlines.
var transectCLs90 = ee.FeatureCollection(cloud_Main + "Cloud_Temp/" // Testing.
  + GATE.transectCLs_fileName
  + "_90m");

// Load the old transect centerlines.
var oldCLs = ee.FeatureCollection(wd_Main + "Transect_Generation/" // Testing.
  + GATE.Centerlines_fileName)
  .filterBounds(AOI); // Testing.

print("transectCLs_LowestCF_HighestNonFridge", transectCLs_LowestCF_HighestNonFridge.size())
print("transectCLs_90m_90mGroupedCtd", transectCLs_90m_90mGroupedCtd.size())
print("transectCLs90", transectCLs90.size())
print("oldCLs", oldCLs.size())

if (true) { // true OR false.
  //// Visualization.
  Map.setOptions("satellite");
  
  Map.centerObject(AOI, 13); 
  
  Map.addLayer(selectedBasins, {color: "FFFFFF"}, "selectedBasins", false);
  
  Map.addLayer(newCATE, {palette: "FFA500"}, "newCATE", false);
  
  Map.addLayer(segmented_Ridges.selfMask(), {palette: "0000FF"}, 
    "segmented_Ridges", false);
  
  Map.addLayer(segmented_Valleys.selfMask(), {palette: "00FF00"}, 
    "segmented_Valleys", false);
  
  Map.addLayer(segmented_ridgesORvalleys.selfMask(), {palette: "00FFFF"}, 
    "segmented_ridgesORvalleys", false);
  
  Map.addLayer(CF_inAllYrs.selfMask(), {palette: "00FF00"}, 
    "CF_inAllYrs", false);
  
  Map.addLayer(CF_lower, {palette: "darkgreen"}, 
    "CF_lower", false);
  
  Map.addLayer(nonF_upper, {palette: "darkblue"}, 
    "nonF_upper", false);
  
  Map.addLayer(ridges.selfMask(), {palette: "0000FF"}, 
    "ridges", false);
  
  Map.addLayer(valleys.selfMask(), {palette: "00FF00"}, 
    "valleys", false);
  
  Map.addLayer(medialAxis_Raw.selfMask(), {palette: "00FFFF"}, 
    "medialAxis_Raw", false);
  
  Map.addLayer(medialAxis, 
    {min: 0, max: 500, palette: "0000FF, FFFFFF, FF0000"}, 
    "medialAxis_sqDist", false);
  
  Map.addLayer(distBuffered_PxCtds, {color: "00FFFF"}, "distBuffered_PxCtds", false);
  
  Map.addLayer(CFpts, {color: "00FF00"}, "CFpts", false);
  
  Map.addLayer(NonFpts, {color: "0000FF"}, "NonFpts", false);
  
  Map.addLayer(LowestCF, {color: "darkgreen"}, "LowestCF", false);
  
  Map.addLayer(HighestNonF_Ridge, {color: "darkblue"}, "HighestNonF_Ridge", false);
  
  Map.addLayer(grouped_CFpts, {color: "FF00FF"}, "grouped_CFpts", false);
  
  Map.addLayer(grouped_NonFpts, {color: "FFFF00"}, "grouped_NonFpts", false);
  
  Map.addLayer(groupedLowestCF, {color: "darkgreen"}, "groupedLowestCF", false);
  
  Map.addLayer(groupedHighestNonF_Ridge, {color: "darkblue"}, "groupedHighestNonF_Ridge", false);
  
  Map.addLayer(medialAxis_PxCtds, {color: "FFA500"}, "medialAxis_PxCtds", false);
  
  Map.addLayer(buffered_GroupedPxCtds, {color: "FFFF00"}, "buffered_GroupedPxCtds", false);
  
  Map.addLayer(grouped_PxCtds, {color: "00FFFF"}, "grouped_PxCtds", false);
  
  Map.addLayer(transectCLs_LowestCF_HighestNonFridge, {color: "00FF00"}, 
    "transectCLs_LowestCF_HighestNonFridge", false);
  
  Map.addLayer(transectCLs_90m_90mGroupedCtd, {color: "FFFF00"}, 
    "transectCLs_90m_90mGroupedCtd", false);
  
  Map.addLayer(transectCLs180, {color: "0000FF"}, "transectCLs180", false);
  
  Map.addLayer(transectCLs90, {color: "FF0000"}, "transectCLs90", false);
  
  Map.addLayer(oldCLs, {color: "00FFFF"}, "oldCLs", false);
  
}