/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var Pixels_3km = 
    /* color: #c555d6 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      },
      {
        "type": "rectangle"
      },
      {
        "type": "rectangle"
      }
    ] */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[-123.34767168281117, 47.835288523494],
                  [-123.34767168281117, 47.808339282235856],
                  [-123.32072218773403, 47.808339282235856],
                  [-123.32072218773403, 47.835288523494]]], null, false),
            {
              "Resolution": 3,
              "system:index": "0"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-123.37462119279661, 47.80833990674553],
                  [-123.37462119279661, 47.78139019271582],
                  [-123.34767169771948, 47.78139019271582],
                  [-123.34767169771948, 47.80833990674553]]], null, false),
            {
              "Resolution": 3,
              "system:index": "1"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-123.29377270756521, 47.8083399067455],
                  [-123.29377270756521, 47.78139019271582],
                  [-123.26682455359258, 47.78139019271582],
                  [-123.26682455359258, 47.8083399067455]]], null, false),
            {
              "Resolution": 3,
              "system:index": "2"
            })]),
    Pixels_1km = 
    /* color: #0000ff */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      },
      {
        "type": "rectangle"
      },
      {
        "type": "rectangle"
      },
      {
        "type": "rectangle"
      },
      {
        "type": "rectangle"
      }
    ] */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[-123.36563845989743, 47.82630530817895],
                  [-123.36563845989743, 47.81732222748306],
                  [-123.35665574190655, 47.81732222748306],
                  [-123.35665574190655, 47.82630530817895]]], null, false),
            {
              "Resolution": 1,
              "system:index": "0"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-123.30275767811874, 47.79037415220914],
                  [-123.30275767811874, 47.78139026218717],
                  [-123.29377227791885, 47.78139026218717],
                  [-123.29377227791885, 47.79037415220914]]], null, false),
            {
              "Resolution": 1,
              "system:index": "1"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-123.30275767550687, 47.81732216345357],
                  [-123.30275767550687, 47.80833932968398],
                  [-123.29377227530698, 47.80833932968398],
                  [-123.29377227530698, 47.81732216345357]]], null, false),
            {
              "Resolution": 1,
              "system:index": "2"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-123.31173926078415, 47.80833975766954],
                  [-123.31173926078415, 47.799356270938866],
                  [-123.30275654279328, 47.799356270938866],
                  [-123.30275654279328, 47.80833975766954]]], null, false),
            {
              "Resolution": 1,
              "system:index": "3"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-123.32970621347832, 47.79037264017877],
                  [-123.32970621347832, 47.7813896510658],
                  [-123.32072215438293, 47.7813896510658],
                  [-123.32072215438293, 47.79037264017877]]], null, false),
            {
              "Resolution": 1,
              "system:index": "4"
            })]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
/**
 * Introduction:
 * 
 * 1) Visualize the examples of image pixels of multiple sizes.
 * 
 * 2) Output the elevation, NDVI, and canopy height datasets of the ROI.
 * 
 * 
 * Update: 7/24/2022.
 * 
 * Runtime: 1m.
 */


/* Load module(s). */

var TNA = require("users/ChenyangWei/Public:Modules/Transect_NDVI_Analysis");
var FC_AP = require("users/ChenyangWei/Public:Modules/FeatureCollection_Analysis&Processing");
var GATE = require("users/ChenyangWei/Public:Modules/Global_ATE");
var IMG = require("users/ChenyangWei/Public:Modules/Image_Analysis&Processing");
var VIS = require("users/ChenyangWei/Public:Modules/Visualization");
var LDM = require("users/ChenyangWei/Public:Modules/LANDSAT_Data_Manipulation.js");
var palettes = require('users/gena/packages:palettes');


/* Gridded dataset generation. */

// Create empty images at different resolutions.
var emptyImg = ee.Image.random({
  seed: 17, 
  distribution: "uniform"
});

var CRS = "EPSG:4326";

var img_10km = emptyImg.reproject({
  crs: CRS, 
  scale: 1e4
});

var img_5km = emptyImg.reproject({
  crs: CRS, 
  scale: 5e3
});

var img_3km = emptyImg.reproject({
  crs: CRS, 
  scale: 3e3
});

var img_1km = emptyImg.reproject({
  crs: CRS, 
  scale: 1e3
});

// Construct polygons to represent pixels.
var px_3km = 
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[-123.34767168281117, 47.835288523494],
                  [-123.34767168281117, 47.808339282235856],
                  [-123.32072218773403, 47.808339282235856],
                  [-123.32072218773403, 47.835288523494]]], null, false),
            {
              "Resolution": 3,
              "system:index": "0"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-123.37462119279661, 47.80833990674553],
                  [-123.37462119279661, 47.78139019271582],
                  [-123.34767169771948, 47.78139019271582],
                  [-123.34767169771948, 47.80833990674553]]], null, false),
            {
              "Resolution": 3,
              "system:index": "1"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-123.29377270756521, 47.8083399067455],
                  [-123.29377270756521, 47.78139019271582],
                  [-123.26682455359258, 47.78139019271582],
                  [-123.26682455359258, 47.8083399067455]]], null, false),
            {
              "Resolution": 3,
              "system:index": "2"
            })]);

var px_1km = 
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[-123.36563845989743, 47.82630530817895],
                  [-123.36563845989743, 47.81732222748306],
                  [-123.35665574190655, 47.81732222748306],
                  [-123.35665574190655, 47.82630530817895]]], null, false),
            {
              "Resolution": 1,
              "system:index": "0"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-123.30275767811874, 47.79037415220914],
                  [-123.30275767811874, 47.78139026218717],
                  [-123.29377227791885, 47.78139026218717],
                  [-123.29377227791885, 47.79037415220914]]], null, false),
            {
              "Resolution": 1,
              "system:index": "1"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-123.30275767550687, 47.81732216345357],
                  [-123.30275767550687, 47.80833932968398],
                  [-123.29377227530698, 47.80833932968398],
                  [-123.29377227530698, 47.81732216345357]]], null, false),
            {
              "Resolution": 1,
              "system:index": "2"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-123.31173926078415, 47.80833975766954],
                  [-123.31173926078415, 47.799356270938866],
                  [-123.30275654279328, 47.799356270938866],
                  [-123.30275654279328, 47.80833975766954]]], null, false),
            {
              "Resolution": 1,
              "system:index": "3"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-123.32970621347832, 47.79037264017877],
                  [-123.32970621347832, 47.7813896510658],
                  [-123.32072215438293, 47.7813896510658],
                  [-123.32072215438293, 47.79037264017877]]], null, false),
            {
              "Resolution": 1,
              "system:index": "4"
            })]);


/* Load the study domain. */

// Target projection.
var targetPrj = IMG.WGS84_30m;

// Set the major working directory.
var wd_Main = GATE.wd_NorthAmerica;

// Load the new CATE.
var newCATE = ee.Image(wd_Main
  + "Climate-Based_ATE/" 
  + GATE.newCATE_fileName)
  .reproject(targetPrj);


/* Load and buffer the transect centerlines. */

// Determine the universal file path of the selected transect centerlines
//  with a length between 300m and 3km.
var wd_SelectedCLs = wd_Main
  + "Elevational_Transect_Generation/"
  + TNA.selectedCLs_fileName
  + "/"
  + TNA.selectedCLs_byBasinGroup_fileName;

// Create an empty List to store all the selected transect centerlines.
var allCLs_List = ee.List([]);

for (var basinGroupID = 1; basinGroupID <= 5; basinGroupID ++) {

  // Load the selected transect centerlines of each basin group.
  var selectedCLs = ee.FeatureCollection(wd_SelectedCLs
    + basinGroupID);
  
  // Add the loaded FeatureCollection to the List.
  allCLs_List = allCLs_List
    .add(selectedCLs);

}

// Convert the generated FeatureCollection List to a FeatureCollection.
var allCLs_FtrCol = ee.FeatureCollection(
  allCLs_List
).flatten();

// Buffer each selected centerline by 45 m.
var allTransects = TNA.buffer_Centerlines_by45m(allCLs_FtrCol);


// Determine the ROI.
var ROI = 
    ee.Geometry.Polygon(
        [[[-123.58230322240499,47.656338432609665],
          [-122.9597641481639,47.656338432609665],
          [-122.9597641481639,48.01089235785535],
          [-123.58230322240499,48.01089235785535]]], null, false);


/* Load and preprocess the LANDSAT-8 imagery of 2020. */

// Define the reflectance bands.
var refBands = LDM.L8_SR_refBands_List;

// Define the pixel quality band.
var qualBand = LDM.L578_SR_qualBand_Str;

// Combine the two types of bands.
var L8_Bands = ee.List(refBands).add(qualBand);

// Determine the start and end (exclusive) dates.
var startDate = "2020-01-01";

var endDate = "2021-01-01";

// Load the function to preprocess the LANDSAT-8 SR imagery.
var Preprocess_SRimg = LDM.MaskCloudShadow_RemoveInvalidPx_SRimg;

// Load the function to compute the NDVI for each image.
var ComputeNDVI_byImg = LDM.Calculate_L8SR_NDVI;

// Load the raw LANDSAT-8 SR imagery.
var raw_L8_ImgCol = LDM.Load_L8_SR_byRegionDate(
  L8_Bands, ROI, startDate, endDate
);

// Preprocess each loaded image.
var L8_ImgCol = raw_L8_ImgCol.map(Preprocess_SRimg);


/* Calculate the annual maximum NDVI. */

// Derive the NDVI for each image.
var NDVI_ImgCol = L8_ImgCol.map(ComputeNDVI_byImg);

// Compute the maximum value at each pixel.
var maxNDVI_img = NDVI_ImgCol.max();

// Target projection.
var targetPrj_30m = IMG.WGS84_30m;

// Reproject the NDVI image.
var maxNDVI_reprj = maxNDVI_img.reproject(targetPrj_30m);

// Land surface area based on the Hansen Global Forest Change dataset (v1.7).
var land = ee.Image("UMD/hansen/global_forest_change_2019_v1_7")
  .select("datamask")
  .eq(1) // Select the "Mapped land surface" area in the Hansen dataset.
  .reproject(targetPrj);

// Remove the water body.
var maxNDVI_noWater = maxNDVI_reprj.updateMask(land);


/* Load the 10-m global canopy height dataset of 2020. */

// Target projection.
var targetPrj_10m = IMG.WGS84_10m;

// Load the 10-m global canopy height dataset of 2020.
var canopy_height = ee.Image('users/nlang/ETH_GlobalCanopyHeight_2020_10m_v1')
  .reproject(targetPrj_10m);


/* Load and reproject the ALOS elevation in the ROI. */

var ALOSelv = GATE.load_ALOSelevation(ROI, targetPrj_30m);


if (false) {

  FC_AP.Print_FtrColInfo("allCLs_FtrCol:", allCLs_FtrCol);

  /* Visualization. */
  
  Map.setOptions("satellite");
  // Map.setCenter(-113.763875, 48.667189, 12); // Bearhat Mountain.
  Map.setCenter(-123.3188, 47.79649, 13); // Olympic Mountain.
  
  var Palette = "0000FF, 00FFFF, 00FF00, FFFF00, FF0000";
  
  // Empty images.
  Map.addLayer(img_10km, {min: 0, max: 1, palette: Palette}, 
    "10-km image", false, 0.5);
  
  Map.addLayer(img_5km, {min: 0, max: 1, palette: Palette}, 
    "5-km image", false, 0.5);
  
  Map.addLayer(img_3km, {min: 0, max: 1, palette: Palette}, 
    "3-km image", false, 0.5);
  
  Map.addLayer(img_1km, {min: 0, max: 1, palette: Palette}, 
    "1-km image", false, 0.5);
  
  // Elevational transects.
  Map.addLayer(newCATE, {palette: "808080"}, 
    "newCATE", false, 0.5);
  
  Map.addLayer(allTransects, {color: "FF0000"}, 
    "allTransects", false);

  // Environmental datasets.
  Map.addLayer(maxNDVI_noWater, VIS.NDVI_vis, 
    "maxNDVI_noWater", true, 1);
  
  Map.addLayer(canopy_height, 
    {min: 0, max: 50, 
      palette: palettes.matplotlib.viridis[7]}, 
    "canopy_height", true);

  Map.addLayer(ALOSelv, 
    {min: 500, max: 2000, 
      palette: palettes.matplotlib.plasma[7]}, 
    "ALOSelv", true);

  // Pixel examples.
  Map.addLayer(VIS.paintFtrCol_Edge(
    px_3km, "Resolution", 3), 
    {palette: "0000FF"}, 
    "px_3km", true);
  
  Map.addLayer(VIS.paintFtrCol_Edge(
    px_1km, "Resolution", 3), 
    {palette: "FF0000"}, 
    "px_1km", true);
  
} else if (false) {
  
  /* Output the gridded polygons. */
  
  var px_FCname = "Pixel_Examples_OlympicMt_3";
  
  var px_FC = px_3km.merge(px_1km);
  
  // FC_AP.Print_FtrColInfo("px_FC:", px_FC);

  Export.table.toDrive({
    collection: px_FC, 
    description: px_FCname, 
    folder: px_FCname, 
    fileFormat: "SHP"
  });

} else if (false) {
  
  /* Output the gridded images in the ROI. */
  
  Export.image.toDrive({
    image: img_3km, 
    description: "img_3km", 
    folder: "OlympicMt_Gridded_TIF", 
    region: ROI, 
    scale: 3e3, 
    crs: CRS, 
    maxPixels: 1e13, 
    fileFormat: "GeoTIFF"
  });
  
  Export.image.toDrive({
    image: img_1km, 
    description: "img_1km", 
    folder: "OlympicMt_Gridded_TIF", 
    region: ROI, 
    scale: 1e3, 
    crs: CRS, 
    maxPixels: 1e13, 
    fileFormat: "GeoTIFF"
  });
  
} else {
  
  Export.image.toDrive({
    image: ALOSelv, 
    description: "ALOSelv_30m", 
    folder: "OlympicMt_Gridded_TIF", 
    region: ROI, 
    scale: targetPrj_30m.scale, 
    crs: targetPrj_30m.crs, 
    maxPixels: IMG.maxPxNum, 
    fileFormat: "GeoTIFF"
  });
  
  Export.image.toDrive({
    image: canopy_height, 
    description: "canopy_height_10m", 
    folder: "OlympicMt_Gridded_TIF", 
    region: ROI, 
    scale: targetPrj_10m.scale, 
    crs: targetPrj_10m.crs, 
    maxPixels: IMG.maxPxNum, 
    fileFormat: "GeoTIFF"
  });
  
  Export.image.toDrive({
    image: maxNDVI_noWater, 
    description: "maxNDVI_noWater_30m", 
    folder: "OlympicMt_Gridded_TIF", 
    region: ROI, 
    scale: targetPrj_30m.scale, 
    crs: targetPrj_30m.crs, 
    maxPixels: IMG.maxPxNum, 
    fileFormat: "GeoTIFF"
  });
}

