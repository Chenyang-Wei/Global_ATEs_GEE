/**
 * Introduction:
 * 
 * 1) Visualize the raw centerlines.
 * 
 * 2) Visualize the mid-quarter segments of the raw centerlines.
 * 
 * 3) Visualize the buffers of the mid-quarter segments.
 * 
 * 4) Visualize the converted unioned buffers.
 * 
 * 5) Export datasets in the region of interest.
 * 
 *  
 * Update: 7/7/2022.
 * 
 * Runtime: 
 */


/* Setups. */

// Load module(s).
var GATE = require("users/ChenyangWei/Public:Modules/Global_ATE");
var FC_AP = require("users/ChenyangWei/Public:Modules/FeatureCollection_Analysis&Processing");
var TNA = require("users/ChenyangWei/Public:Modules/Transect_NDVI_Analysis");
var IMG = require("users/ChenyangWei/Public:Modules/Image_Analysis&Processing");

// var VIS = require("users/ChenyangWei/Public:Modules/Visualization");


// Determine the ROI.
var ROI = 
    ee.Geometry.Polygon(
        [[[-123.58230322240499,47.656338432609665],
          [-122.9597641481639,47.656338432609665],
          [-122.9597641481639,48.01089235785535],
          [-123.58230322240499,48.01089235785535]]], null, false);

// Set the working directory.
var wd_Main = GATE.wd_NorthAmerica
  + "Elevational_Transect_Generation/";


/* Visualize the raw centerlines. */

// Load the raw transect centerlines intersecting with the ROI.
var rawCLs = ee.FeatureCollection(wd_Main
  + GATE.rawCLs_fileName + "/"
  + GATE.rawCLs_AllBasinGroups_fileName)
  .filterBounds(ROI);


/* Visualize the mid-quarter segments of the raw centerlines. */

// Load the mid-quarter segments.
var midQuarters = ee.FeatureCollection(wd_Main
  + GATE.midQuarters_AllRawCLs_fileName)
  .filterBounds(ROI);


/* Visualize the buffers of the mid-quarter segments. */

// Load the buffers of the mid-quarter segments.
var midQuarterBuffers = ee.FeatureCollection(wd_Main
  + GATE.midQuarterBuffers_AllRawCLs_fileName)
  .filterBounds(ROI);


/* Visualize the converted unioned buffers. */

// Union the buffers.
var unionedBuffers = midQuarterBuffers.union();

// Obtain the coordinate list of each MultiPolygon.
var coord_List = unionedBuffers.geometry().coordinates();

// Construct a set of individual Polygons
//  based on the obtained coordinate list.
var converted_UnionedBuffers = ee.FeatureCollection(coord_List.map(function(coords) {
  
  // Create a Polygon Feature for each element of the coordinate list.
  var indivPlg_Geom = ee.Geometry.Polygon(coords);
  
  var indivPlg = ee.Feature(indivPlg_Geom);
  
  return indivPlg;
}));


/* Load and buffer the steepest transect centerlines. */

// Determine the universal file path of the selected transect centerlines
//  with a length between 300m and 3km.
var wd_SelectedCLs = wd_Main
  + TNA.selectedCLs_fileName
  + "/"
  + TNA.selectedCLs_byBasinGroup_fileName;

// Create an empty List to store all the selected transect centerlines.
var allCLs_List = ee.List([]);

for (var basinGroupID = 1; basinGroupID <= 5; basinGroupID ++) {

  // Load the selected transect centerlines of each basin group.
  var selectedCLs = ee.FeatureCollection(wd_SelectedCLs
    + basinGroupID);
  
  // Add the loaded FeatureCollection to the List.
  allCLs_List = allCLs_List
    .add(selectedCLs);

}

// Convert the generated FeatureCollection List to a FeatureCollection.
var allCLs_FtrCol = ee.FeatureCollection(
  allCLs_List
).flatten()
  // .filterBounds(ROI);

// Buffer each selected centerline by 45 m.
var allTransects = TNA.buffer_Centerlines_by45m(allCLs_FtrCol);


/* Load the global canopy height 2020. */

var canopy_height = ee.Image('users/nlang/ETH_GlobalCanopyHeight_2020_10m_v1');


if (true) {
  
  FC_AP.Print_FtrColInfo("unionedBuffers:", unionedBuffers);
  FC_AP.Print_FtrColInfo("converted_UnionedBuffers:", converted_UnionedBuffers);

  IMG.printImgInfo("canopy_height", canopy_height);

  /* Visualization. */
  
  Map.setOptions("satellite");
  
  Map.setCenter(-123.3188, 47.79649, 13); // Olympic Mountain.
  
  
  Map.addLayer(ROI, {color: "FFFFFF"}, 
    "ROI", false, 0.5);
  
  Map.addLayer(canopy_height, {min: 0, max: 50, palette: "0000FF, FFFFFF, FF0000"}, 
    "canopy_height", true);

  Map.addLayer(rawCLs, {color: "0000FF"}, 
    "rawCLs", false);

  Map.addLayer(midQuarterBuffers, {color: "FF0000"}, 
    "midQuarterBuffers", false);

  Map.addLayer(converted_UnionedBuffers, {color: "00FFFF"}, 
    "converted_UnionedBuffers", false);

  Map.addLayer(midQuarters, {color: "FFFF00"}, 
    "midQuarters", false);

  Map.addLayer(allTransects, {color: "00FF00"}, 
    "allTransects", true);

  Map.addLayer(allCLs_FtrCol, {color: "FF0000"}, 
    "allCLs_FtrCol", false);

} else {
  
  /* Output the SHP datasets in the ROI. */
  
  Export.table.toDrive({
    collection: midQuarterBuffers, 
    description: "midQuarterBuffers", 
    folder: "OlympicMt_3_midQuarterBuffers", 
    fileFormat: "SHP"
  });
  
  Export.table.toDrive({
    collection: converted_UnionedBuffers, 
    description: "converted_UnionedBuffers", 
    folder: "OlympicMt_3_converted_UnionedBuffers", 
    fileFormat: "SHP"
  });
  
  Export.table.toDrive({
    collection: midQuarters, 
    description: "midQuarters", 
    folder: "OlympicMt_3_midQuarters", 
    fileFormat: "SHP"
  });
  
  Export.table.toDrive({
    collection: allCLs_FtrCol, 
    description: "allCLs_FtrCol", 
    folder: "OlympicMt_3_allCLs_FtrCol", 
    fileFormat: "SHP"
  });
}

