/**
 * Introduction: 
 * 1) Identify areas within the buffered raw CATE higher than 
 *  the smoothed 10-km closed forest elevation.
 * 2) Extract a new CATE in the identified areas within 3 km to closed forests.
 * 
 * Update: 2/28/2021.
 * 
 * Runtime: 
 * 1) Buffer of all closed forests: 5h (AOI) and 5h (BBox).
 * 2) Buffer of the closed forests in the buffered raw CATE: 2h (AOI).
 */


/* Load and reproject the required datasets. */

// Set the 10-km buffered bounding box of the study domain.
var AOI = ee.Geometry.Rectangle({
  coords: [-180, 7.114761500193937, -52.095625030545534, 80.24342770493531],
  geodesic: false
});

// // Set the bounding box of the study domain.
// var BBox = ee.Geometry.Rectangle({
//   coords: [-180, 7.204750099824057, -52.621807049387144, 80.15303042453337],
//   geodesic: false
// });

// Target projection.
var targetPrj = {
  crs: "EPSG:4326",
  scale: 30
};

// Set the working directory.
var wdNA = "users/treeline/NorthAmerica_GME/";

// ALOS elevation (Version 3.2, released in January 2021) in the AOI.
var ALOSelv = ee.ImageCollection('JAXA/ALOS/AW3D30/V3_2').select('DSM')
  .filterBounds(AOI)
  .mosaic()
  .reproject(targetPrj);

// print("ALOSelv:", ALOSelv.bandTypes(),
//   ALOSelv.projection().crs(),
//   ALOSelv.projection().nominalScale())

// Land surface area based on the Hansen Global Forest Change dataset (v1.7).
var land = ee.Image("UMD/hansen/global_forest_change_2019_v1_7")
  .select("datamask")
  .eq(1) // Select the "Mapped land surface" area in the Hansen dataset.
  .reproject(targetPrj);

// print("land:", land.bandTypes(),
//   land.projection().crs(),
//   land.projection().nominalScale())

// // Load the identified study domain.
// var NorthAmerica = ee.FeatureCollection("users/treeline/NorthAmerica_GME/" +
//   "Climate-Based_ATE/NorthAmerica_LSIB_SIMPLE")
//   .first().geometry();

// print("NorthAmerica:", NorthAmerica)

// Load the buffered raw CATE.
var bufCATE = ee.Image(wdNA + "Climate-Based_ATE/" +
  "30mRawCATE_500mToAvgTLH_3kmBuf_NorthAmerica_10kmBufBBoxTo-180");

// print("bufCATE:", bufCATE.bandTypes(),
//   bufCATE.projection().crs(),
//   bufCATE.projection().nominalScale())

// Load the smoothed 10-km closed forest elevation.
var smdElv = ee.Image(wdNA + "Climate-Based_ATE/"
  + "ClosedForestsALLyears_BufRawCATE_10kmMeanElv_10pxCircleMean");

// print("smdElv:", smdElv.bandTypes(), 
//   smdElv.projection().crs(), 
//   smdElv.projection().nominalScale());

// Load the closed forest elevation within the buffered raw CATE.
var CFelv = ee.Image(wdNA + "Climate-Based_ATE/"
  + "ClosedForests_in2015-2019ALLyears_BufRawCATE_ALOSelv");

print("CFelv:", CFelv.bandTypes(), 
  CFelv.projection().crs(), 
  CFelv.projection().nominalScale());


/* Identify areas within the buffered raw CATE higher than 
  the smoothed 10-km closed forest elevation. */

// Elevation of the buffered raw CATE.
var bufCATEelv = ALOSelv.updateMask(bufCATE);

// print("bufCATEelv:", bufCATEelv.bandTypes(),
//   bufCATEelv.projection().crs(), 
//   bufCATEelv.projection().nominalScale());

// Extract areas over the smoothed elevation.
var gteSmdElv = bufCATEelv.gte(smdElv);

// print("gteSmdElv:", gteSmdElv.bandTypes(),
//   gteSmdElv.projection().crs(), 
//   gteSmdElv.projection().nominalScale());


// /* Load the Copernicus Global Land Cover datasets (v3.0.1) from 2015 to 2019. */

// // Set the file path and band name of land cover data.
// var lcPath = "COPERNICUS/Landcover/100m/Proba-V-C3/Global/";

// var lcName = "discrete_classification";

// // Function to read the annual land cover datasets.
// function readAnnualLC(year) {
//   return ee.Image(lcPath + year).select(lcName);
// }

// // Read the datasets of 2015-2019.
// var landCover = ee.ImageCollection.fromImages([
//   readAnnualLC(2015),
//   readAnnualLC(2016),
//   readAnnualLC(2017),
//   readAnnualLC(2018),
//   readAnnualLC(2019),
// ]);


// /* Extract and reproject the elevation of closed forests (tree canopy > 70 %) in 2015-2019. */

// // Function to extract the annual closed forests.
// function extractCF(lcImg) {
//   return lcImg.gte(111).and(lcImg.lte(116));
// }

// // Annual closed forests from 2015 to 2019.
// var annualCF = landCover.map(extractCF);

// // Extract and reproject areas classified as closed forests in ALL the five years.
// var CF_5yr = annualCF.min()
//   .reproject(targetPrj);

// // print("CF_5yr:", CF_5yr.bandTypes(),
// //   CF_5yr.projection().crs(),
// //   CF_5yr.projection().nominalScale())


/* Extract a new CATE in the identified areas within 3 km to closed forests. */

// Select the closed forests within the buffered raw CATE.
var CF_5yr = CFelv.mask();

// Determine the size of neighborhood.
var neighborhood = 200; // Number of 30-m pixels.

// Calculate the distance to closed forests at each pixel in the neighborhood.
var forestDist = CF_5yr.fastDistanceTransform({
  neighborhood: neighborhood,
  units: "pixels",
  metric: "squared_euclidean"
}).sqrt() // Get the distance in the number of pixels (30 m).
  .reproject(targetPrj);

// print("forestDist:", 
//   forestDist.bandTypes(),
//   forestDist.projection().crs(), 
//   forestDist.projection().nominalScale())

// Generate a buffer of closed forests.
var distThres = 100; // Number of 30-m pixels.

var forestBuffer = forestDist.lte(distThres);

// print("forestBuffer:", 
//   forestBuffer.bandTypes(),
//   forestBuffer.projection().crs(), 
//   forestBuffer.projection().nominalScale())

// Extract a new CATE within the forest buffer in the study domain.
var newCATE = gteSmdElv.updateMask(forestBuffer)
  .updateMask(land) // Within the land area.
  .selfMask()
  // .clip(NorthAmerica) // Clip to the study domain.
  .rename("newCATE");

print("newCATE:", 
  newCATE.bandTypes(),
  newCATE.projection().crs(), 
  newCATE.projection().nominalScale())
// Slow to print the information after the clipping operation.

if (false) {
  // Visualization.
  var elvPalette = ['006600', '002200', 'fff700', 'ab7634', 'c4d0ff', 'ffffff'];
  var elvVis = {min: 1000, max: 3000, palette: elvPalette};
  
  Map.setOptions("hybrid");
  // Map.setCenter(-113.8982, 48.8401, 10);
  
  Map.addLayer(smdElv, elvVis, "smdElv", false);
  Map.addLayer(bufCATEelv, elvVis, "bufCATEelv", false);
  Map.addLayer(gteSmdElv, {min: 0, max: 1, palette: "FFFFFF, FF0000"}, "gteSmdElv", false, 0.5);
  
  Map.setCenter(-144.6645, 63.3842, 11);
  Map.addLayer(forestBuffer, {min: 0, max: 1, palette: "FFFFFF, 0000FF"}, "forestBuffer", true, 0.5);
  Map.addLayer(CF_5yr, {min: 0, max: 1, palette: "FFFFFF, 00FF00"}, "CF_5yr", true, 0.5);
  // Map.addLayer(newCATE, {min: 0, max: 1, palette: "FFFFFF, FFFF00"}, "newCATE", false, 0.5); 
  // Unable to display the new CATE after the clipping operation.

} else if (true) {
  // Export the result.
  
  // // Buffer of all closed forests.
  // var fileName = "30mNewCATE_gteSmd10kmCForestElv_3kmCForestBuffer";
  // var fileName = "30mNewCATE_gteSmd10kmCForestElv_3kmCForestBuffer_AOI"; // No clipping to the study domain.
  // var fileName = "30mNewCATE_gteSmd10kmCForestElv_3kmCForestBuffer_BBox"; // Output the area within the bounding box.
  
  // Buffer of the closed forests in the buffered raw CATE.
  var fileName = "30mNewCATE_gteSmd10kmCForestElv_3kmCForestBuffer_BufRawCATEclosedForests_AOI"; // No clipping to the study domain.
  
  Export.image.toAsset({
    image: newCATE,
    description: fileName, 
    assetId: wdNA + "Climate-Based_ATE/"
      + fileName, 
    crs: "EPSG:4326",
    scale: 30,
    region: AOI,
    // region: BBox, // Output the area within the bounding box.
    maxPixels: 1e13
  }); 
}

