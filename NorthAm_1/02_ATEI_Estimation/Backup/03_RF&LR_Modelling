/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var samples = ee.FeatureCollection("users/treeline/NorthAmerica_GME/Pixel_Sampling/Random/manuallySampled_1000points_NorthAmerica"),
    northAmerica = 
    /* color: #d63000 */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-114.70405611134206, 49.62740035170891],
          [-114.70405611134206, 48.27189191243317],
          [-113.2290822475539, 48.27189191243317],
          [-113.2290822475539, 49.62740035170891]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
/*
  Introduction:
    1) Build a RF model with a fixed number of trees. 
    2) Train the RF regressor with different sets of variables.
  
  Update:
    9/30/2020.
*/


/* Setup. */

// Asset path.
var wdNorthA = "users/treeline/NorthAmerica_GME/";

// // Define the extent of North America. 
// var northAmerica = ee.Geometry.Polygon({
//     coords: [[[-165.69002926658334, 72.44551256468144],
//           [-169.40248634956492, 65.69009098298687],
//           [-172.25893166206492, 63.826281515474996],
//           [171.35638590722195, 52.855285271231274],
//           [-159.1340353549648, 17.264443722753843],
//           [-122.14862062448367, 9.59539750905343],
//           [-79.06711256993691, 6.243890041056693],
//           [-77.03677448989225, 7.40316087095261],
//           [-76.78408894301725, 8.990725120234067],
//           [-75.7244458156751, 12.403191738791786],
//           [-71.5276684719251, 13.751533985801833],
//           [-62.8264965969251, 11.651035844929385],
//           [-62.005942990095036, 9.999896817210585],
//           [-60.791953732282536, 9.96743692413247],
//           [-55.5884807162513, 13.889226127218825],
//           [-47.99315852039507, 58.68729606716915],
//           [-66.52860968724042, 71.51769835770313],
//           [-77.86650031224042, 74.25356562488685],
//           [-89.90751593724042, 74.22969620284344],
//           [-106.04844453284761, 74.3012200035139],
//           [-114.63975312659761, 74.20581277506923],
//           [-120.18954789130242, 74.88484689543225],
//           [-136.27353226630242, 74.6772015427699]]],
//     geodesic: true
// });

// Read the sampled data with the extracted variables of interest.
// var sampled = ee.FeatureCollection(wdNorthA + "Pixel_Sampling/Random/" +
//   "testing_extractedVariables_maxNDVI_avgNDVI_smd2019");
var sampled = ee.FeatureCollection(wdNorthA + "Pixel_Sampling/Random/" +
  "extractedVariables_smd2019_GausOrien_MaxAvgPost");

print("Sampled:", sampled.first())

var seed = 9999;

// Divide the dataset into training and testing.
var random = sampled.randomColumn('random', seed);
var training = random.filter(ee.Filter.lte("random", 0.7));
var testing = random.filter(ee.Filter.gt("random", 0.7));


/* Build a RF model with a fixed number of trees. */

// Create a Random Forest classifier with custom parameters.
var classifier = ee.Classifier.smileRandomForest({
  numberOfTrees: 20, 
  variablesPerSplit: null, // If unspecified, uses the square root of the number of variables.
  minLeafPopulation: 1, 
  bagFraction: 0.5, 
  maxNodes: null, // If unspecified, defaults to no limit.
  seed: seed
});


/* Train the RF regressor with different sets of variables. */

// Property to predict.
var target = 'InOut';

// Name of predicted variable.
var RFpredicted = ee.String(target).cat('_RFpredicted');

// Different sets of variables.
var rawVars = ["maxOrien", "maxNDVImag", "maxNDVIGau", 
            "avgOrien", "avgNDVImag", "avgNDVIGau"];

// var postVars = ["maxOrien", "maxNDVImag", "maxNDVIGau", 
//             "postOrien", "avgPostMag", "avgPostGau"];

// Function to perform RF prediction.
function RFprediction(inputVars) {
  // Fit the RF model based on the training data.
  var RFregressor = classifier.setOutputMode('REGRESSION') 
    .train({
      features: training,
      classProperty: target, 
      inputProperties: inputVars
    });   
  
  // Perform the RF regression on the testing data.
  var predicted = testing.classify({
    classifier: RFregressor, 
    outputName: RFpredicted
  });
  
  return predicted;
}

// Function to create a scatter plot and estimate the prediction accuracy.
function createScatterPlot(predictionResult, chartTitle) {
  // Scatterplot of the RF regression result. 
  var x = predictionResult.aggregate_array(RFpredicted);
  var y = predictionResult.aggregate_array(target);
  
  // print(chartTitle + " (predicted vs. actual):", x.zip(y))
  
  var chart = ui.Chart.array.values(y, 0, x);
  
  chart = chart.setOptions({
    title: chartTitle,
    hAxis: { title: 'Predicted', viewWindow: {min: 0, max: 1} },
    vAxis: { title: "Actual", viewWindow: {min: 0, max: 1} },
    pointSize: 3,
    legend: {position: 'none'}
  });
  
  print(chart)
  
  // print(predictionResult)
  
  var accuracy = predictionResult.map(classifyResult).aggregate_mean("correct");
  
  print("Prediction accuracy:", accuracy)
  // print(allPredicted.map(classifyResult).reduceColumns(ee.Reducer.mean(), ["correct"])) // Same result.
}

// Function to classify the predicted result.
function classifyResult(feature) {
  var predicted = ee.Number(feature.get(RFpredicted));
  
  var oldClass = feature.get("InOut");
  
  var newClass = ee.Algorithms.If({
    condition: predicted.gte(0.5), 
    trueCase: 1, 
    falseCase: 0
  });
  
  var correct = ee.Algorithms.If({
    condition: ee.Number(newClass).eq(oldClass), 
    trueCase: 1, 
    falseCase: 0
  });
  
  return feature.set("newClass", newClass, "correct", correct);
}

// RF prediction.
var rawPredicted = RFprediction(rawVars);
// var postPredicted = RFprediction(postVars);

// Accuracy assessment.
createScatterPlot(rawPredicted, "Variables based on the raw NDVI");
// createScatterPlot(postPredicted, "Variables based on the positive NDVI");


if (true) {
  /* Image classification. */
  
  // ALOS elevation.
  var ALOSelv = ee.Image('JAXA/ALOS/AW3D30/V2_2').select('AVE_DSM')
    .reproject({
      crs: "EPSG:4326",
      scale: 30
    });
  
  // Load the climatic ATE.
  var CATE = ee.Image(wdNorthA + "CATE/" + 
    "3kmBuffered_30mReprj_500mCATE3kmBuffer_gteAvgClsdFrstElv_10kmRes10pxFocalMean_10kmClsdFrstBuffer")
    .select("gteFocalMean_30mReprj")
    .reproject({
      crs: "EPSG:4326",
      scale: 30
    });
  
  // Create a mask using the Hansen dataset (V 1.7) to define the area of land surface.
  var land = ee.Image('UMD/hansen/global_forest_change_2019_v1_7') // The newest version of the Hansen dataset.
    .select('datamask')
    .eq(1) // Select the "mapped land surface" in the Hansen dataset.
    .reproject({
      crs: "EPSG:4326",
      scale: 30
    });
  
  
  /* Image processing function definition. */
  
  // This function removes invalid pixels.
  var removeInvalid_L57 = function(img) {
    // Remove edge pixels that don't occur in all bands
    var noNA = img.mask().reduce(ee.Reducer.min());
    
    // Identify pixels with all the surface reflectance bands within the valid range: 0-10000.
    var lowerLimit = img.gt(0).reduce(ee.Reducer.min());
    var upperLimit = img.lt(1e4).reduce(ee.Reducer.min());
    
    var maskedB3B4 = img.updateMask(noNA)
      .updateMask(lowerLimit)
      .updateMask(upperLimit)
      .select(["B3", "B4"]); // Select "B3" and "B4" for further calculating the NDVI.
    
    return maskedB3B4;
  };

  
  // This function calculates NDVI of Landsat 5 & 7 imagery.
  var calNDVI_L57 = function(i){
    var ndvi = i.addBands(i.normalizedDifference(['B4', 'B3'])
      .rename('NDVI'))
      .select('NDVI');
    
    return ndvi;
  };

  
  // This function combine all the processing steps.
  function imageProcessing_L57(image) {
    var invalidRemoved = removeInvalid_L57(image);
    var ndviCalculated = calNDVI_L57(invalidRemoved);
    
    // Remove water-covered regions.
    var waterRemoved = ndviCalculated.updateMask(land);
    
    return waterRemoved;
  }


  // This function removes invalid pixels.
  var removeInvalid_L8 = function(img) {
    // Remove edge pixels that don't occur in all bands
    var noNA = img.mask().reduce(ee.Reducer.min());
    
    // Identify pixels with all the surface reflectance bands within the valid range: 0-10000.
    var lowerLimit = img.gt(0).reduce(ee.Reducer.min());
    var upperLimit = img.lt(1e4).reduce(ee.Reducer.min());
    
    var maskedB4B5 = img.updateMask(noNA)
      .updateMask(lowerLimit)
      .updateMask(upperLimit)
      .select(["B4", "B5"]); // Select "B4" and "B5" for further calculating the NDVI.
    
    return maskedB4B5;
  };
  
  // This function calculates NDVI of Landsat imagery.
  var calNDVI_L8 = function(i) {
    var ndvi = i.addBands(i.normalizedDifference(['B5', 'B4'])
      .rename('OLI_NDVI'))
      .select('OLI_NDVI');
    
    return ndvi;
  };
  
  // This function Convert the OLI NDVI to the ETM+ NDVI.
  // ETM+ = 0.0029 + 0.9589 OLI
  var ETM_NDVI = function(i) {
    var ETM = i.addBands(i.select("OLI_NDVI")
      .multiply(0.9589).add(0.0029)
      .rename("ETM_NDVI"))
      .select("ETM_NDVI");
    
    var postiveNDVI = ETM.updateMask(ETM.gt(0))
      .rename("postiveNDVI");
    
    return ETM.addBands(postiveNDVI);
  };
  
  function imageProcessing_L8(image) {
    var invalidRemoved = removeInvalid_L8(image);
    var ndviCalculated = calNDVI_L8(invalidRemoved);
    var ndviConverted = ETM_NDVI(ndviCalculated);
    
    // Remove water-covered regions.
    var waterRemoved = ndviConverted.updateMask(land);
    
    return waterRemoved;
  }
  
  
  /* Import the Landsat-5 Surface Reflectance dataset. */
  
  // Bands of surface reflectance.
  var bands = ['B[1-5]', 'B7'];
  
  // Landsat 5.
  var LT5_1984 = ee.ImageCollection("LANDSAT/LT05/C01/T1_SR")
    .select(bands)
    .filterBounds(northAmerica)
    .filterDate('1984-01-01', '1985-01-01'); // The end date is exclusive. 


  /* Import the Landsat-8 Surface Reflectance dataset. */
  
  // // Bands of surface reflectance.
  // var bands = ["B[1-7]"];
  
  // // Landsat 8 data in 2019.
  // var L8_2019 = ee.ImageCollection("LANDSAT/LC08/C01/T1_SR")
  //   .select(bands)
  //   .filterBounds(northAmerica)
  //   .filterDate('2019-01-01', '2020-01-01'); // The end date is exclusive.
  
  
  /* Image processing and analysis. */
  
  // Image pre-processing and NDVI calculation.
  var ndvi1984 = LT5_1984.map(imageProcessing_L57);
  // var ndvi2019 = L8_2019.map(imageProcessing_L8);
  
  // Annual max. NDVI.
  var maxNDVI1984 = ndvi1984.select("NDVI").max()
    .rename("maxNDVI1984")
    .reproject({
      crs: "EPSG:4326",
      scale: 30
    });
  
  // var maxNDVI2019 = ndvi2019.select("ETM_NDVI").max()
  //   .rename("maxNDVI2019")
  //   .reproject({
  //     crs: "EPSG:4326",
  //     scale: 30
  //   });
  
  // Annual average NDVI.
  var avgNDVI1984 = ndvi1984.select("NDVI").mean()
    .rename("avgNDVI1984")
    .reproject({
      crs: "EPSG:4326",
      scale: 30
    });
  
  // var avgNDVI2019 = ndvi2019.select("ETM_NDVI").mean()
  //   .rename("avgNDVI2019")
  //   .reproject({
  //     crs: "EPSG:4326",
  //     scale: 30
  //   });
  
  // // Annual average NDVI in 2019.
  // var avgPostNDVI2019 = ndvi2019.select("postiveNDVI").mean()
  //   .rename("avgPostNDVI2019")
  //   .reproject({
  //     crs: "EPSG:4326",
  //     scale: 30
  //   });
  
  
  /* Image smoothing. */
  
  // Define a circular smoothing kernel of 10 pixels.
  var Kn = ee.Kernel.circle({
    radius: 10 // Default units: "pixels".
  }); 
  
  maxNDVI1984 = maxNDVI1984.reduceNeighborhood({
    // The median reducer is less smooth than the mean reducer, 
    // but the former one makes the spatial variation of NDVI more abrupt (i.e., less gradual),
    // which then provides a sharper gradient (i.e., with larger magnitude).
    reducer: ee.Reducer.median(),
    kernel: Kn,
    skipMasked: false // Do NOT mask output pixels if the corresponding input pixel is masked.
  }).reproject({
    crs: "EPSG:4326",
    scale: 30
  }).rename("maxNDVI1984");
  
  avgNDVI1984 = avgNDVI1984.reduceNeighborhood({
    // The median reducer is less smooth than the mean reducer, 
    // but the former one makes the spatial variation of NDVI more abrupt (i.e., less gradual),
    // which then provides a sharper gradient (i.e., with larger magnitude).
    reducer: ee.Reducer.median(),
    kernel: Kn,
    skipMasked: false // Do NOT mask output pixels if the corresponding input pixel is masked.
  }).reproject({
    crs: "EPSG:4326",
    scale: 30
  }).rename("avgNDVI1984");
  
  // maxNDVI2019 = maxNDVI2019.reduceNeighborhood({
  //   // The median reducer is less smooth than the mean reducer, 
  //   // but the former one makes the spatial variation of NDVI more abrupt (i.e., less gradual),
  //   // which then provides a sharper gradient (i.e., with larger magnitude).
  //   reducer: ee.Reducer.median(),
  //   kernel: Kn,
  //   skipMasked: false // Do NOT mask output pixels if the corresponding input pixel is masked.
  // }).reproject({
  //   crs: "EPSG:4326",
  //   scale: 30
  // }).rename("maxNDVI2019");
  
  // avgNDVI2019 = avgNDVI2019.reduceNeighborhood({
  //   // The median reducer is less smooth than the mean reducer, 
  //   // but the former one makes the spatial variation of NDVI more abrupt (i.e., less gradual),
  //   // which then provides a sharper gradient (i.e., with larger magnitude).
  //   reducer: ee.Reducer.median(),
  //   kernel: Kn,
  //   skipMasked: false // Do NOT mask output pixels if the corresponding input pixel is masked.
  // }).reproject({
  //   crs: "EPSG:4326",
  //   scale: 30
  // }).rename("avgNDVI2019");
  
  // avgPostNDVI2019 = avgPostNDVI2019.reduceNeighborhood({
  //   // The median reducer is less smooth than the mean reducer, 
  //   // but the former one makes the spatial variation of NDVI more abrupt (i.e., less gradual),
  //   // which then provides a sharper gradient (i.e., with larger magnitude).
  //   reducer: ee.Reducer.median(),
  //   kernel: Kn,
  //   skipMasked: false // Do NOT mask output pixels if the corresponding input pixel is masked.
  // }).reproject({
  //   crs: "EPSG:4326",
  //   scale: 30
  // }).rename("avgPostNDVI2019");
  
  ALOSelv = ALOSelv.reduceNeighborhood({
    // The mean reducer is smoother than the median reducer, 
    // which then provides a less scattered gradient direction dataset.
    reducer: ee.Reducer.mean(),
    kernel: Kn,
    skipMasked: false // Do NOT mask output pixels if the corresponding input pixel is masked.
  }).reproject({
    crs: "EPSG:4326",
    scale: 30
  }).rename("AVE_DSM");
  
  
  /* Compute the gradient magnitude and direction of NDVI and elevation. */
  
  // Compute the image gradient in the X and Y directions.
  var maxNDVIgrad = maxNDVI1984.gradient()
    .reproject({
      crs: "EPSG:4326",
      scale: 30
    });
  
  var avgNDVIgrad = avgNDVI1984.gradient()
    .reproject({
      crs: "EPSG:4326",
      scale: 30
    });
    
  // var maxNDVIgrad = maxNDVI2019.gradient()
  //   .reproject({
  //     crs: "EPSG:4326",
  //     scale: 30
  //   });
  
  // var avgNDVIgrad = avgNDVI2019.gradient()
  //   .reproject({
  //     crs: "EPSG:4326",
  //     scale: 30
  //   });
  
  // var avgPostGrad = avgPostNDVI2019.gradient()
  //   .reproject({
  //     crs: "EPSG:4326",
  //     scale: 30
  //   });
  
  var elvGrad = ALOSelv.gradient()
    .reproject({
      crs: "EPSG:4326",
      scale: 30
    });
  
  // Compute the magnitude of the gradient: "hypot" calculates the magnitude of the 2D vector [x, y].
  var maxNDVImag = maxNDVIgrad.select('y').hypot(maxNDVIgrad.select('x'))
    .rename("maxNDVImag");
  
  var avgNDVImag = avgNDVIgrad.select('y').hypot(avgNDVIgrad.select('x'))
    .rename("avgNDVImag");
  
  // var avgPostMag = avgPostGrad.select('y').hypot(avgPostGrad.select('x'))
  //   .rename("avgPostMag");
  
  // var elvMag = elvGrad.select('y').hypot(elvGrad.select('x'))
  //   .rename("elvMag");
  
  // Compute the direction of the gradient: "atan2" calculates the angle formed by the 2D vector [x, y].
  var maxNDVIdir = maxNDVIgrad.select('y').atan2(maxNDVIgrad.select('x'))
    .rename("maxNDVIdir");
  
  var avgNDVIdir = avgNDVIgrad.select('y').atan2(avgNDVIgrad.select('x'))
    .rename("avgNDVIdir");
  
  // var avgPostDir = avgPostGrad.select('y').atan2(avgPostGrad.select('x'))
  //   .rename("avgPostDir");
  
  var elvDir = elvGrad.select('y').atan2(elvGrad.select('x'))
    .rename("elvDir");
  
  
  /* Generate the orientation and gaussian components of ATEI. */
  
  // Calculate the orientation component of ATEI. 
  // ***Need to be updated.
  // Max. Orien.
  var maxAngle = maxNDVIdir.subtract(elvDir).abs()
    .reproject({
      crs: "EPSG:4326",
      scale: 30
    }).rename("maxNDVIelvAngle");
  
  var center = 3.0309;
  
  var determinedN = 14.7240;
  
  var cos = maxAngle.subtract(center).add(Math.PI);
  
  var base = ee.Image(1).subtract(cos.cos()).divide(2);
  
  var maxOrien = base.pow(determinedN)
    .rename("maxOrien");
  
  // Avg. Orien.
  var avgAngle = avgNDVIdir.subtract(elvDir).abs()
    .reproject({
      crs: "EPSG:4326",
      scale: 30
    }).rename("avgNDVIelvAngle");
  
  var center = 3.0576;
  
  var determinedN = 14.8532;
  
  var cos = avgAngle.subtract(center).add(Math.PI);
  
  var base = ee.Image(1).subtract(cos.cos()).divide(2);
  
  var avgOrien = base.pow(determinedN)
    .rename("avgOrien");
  
  // print(avgNDVI1984)
  
  // // Avg. postive Orien.
  // var postAngle = avgPostDir.subtract(elvDir).abs()
  //   .reproject({
  //     crs: "EPSG:4326",
  //     scale: 30
  //   }).rename("avgPostElvAngle");
  
  // var center = 2.9955;
  
  // var determinedN = 7.6109;
  
  // var cos = postAngle.subtract(center).add(Math.PI);
  
  // var base = ee.Image(1).subtract(cos.cos()).divide(2);
  
  // var postOrien = base.pow(determinedN)
  //   .rename("postOrien");
  
  
  // Calculate the Gaussian component of ATEI.
  // ***Need to be updated.
  // Max. Gaus.
  var b = 0.5070;
  
  var denominator = -0.01605632;
  
  var maxNDVIGau = maxNDVI1984.subtract(b).pow(2)
                      .divide(denominator)
                      .exp()
                      .rename("maxNDVIGau");
  
  // Avg. Gaus.
  var b = 0.0982;
  
  var denominator = -0.00155682;
  
  var avgNDVIGau = avgNDVI1984.subtract(b).pow(2)
                      .divide(denominator)
                      .exp()
                      .rename("avgNDVIGau");
  
  // // Post. Gaus.
  // var b = 0.1458;
  
  // var denominator = -0.0017405;
  
  // var postNDVIGau = avgPostNDVI2019.subtract(b).pow(2)
  //                     .divide(denominator)
  //                     .exp()
  //                     .rename("avgPostGau");
  
  
  /* Variable Extraction. */
  
  // Combine the variables of interest.
  var variables = maxNDVImag.addBands(avgNDVImag)
    // .addBands(avgPostMag)
    .addBands(maxOrien)
    .addBands(avgOrien)
    // .addBands(postOrien)
    .addBands(maxNDVIGau)
    .addBands(avgNDVIGau)
    // .addBands(postNDVIGau)
    .updateMask(CATE) // Mask the result after computing the gradient to avoid missing pixels along the boundary of the study domain.
    .updateMask(land) // Remove any remaining water-covered regions.
    // .float();
  
  // print(variables)
  
  
  /* LR Modelling. */
  
  // Fit the logistic regression model based on all data.
  // Perform the RF regression on the testing data.
  
  // Raw average NDVI.
  var LR_logit_Raw = variables.expression({
    expression: '-2.70943 + 1577.94752 * maxMag + 0.47197 * maxOrien + 0.01736 * maxGaus ' + 
      '+ 2205.36385 * avgMag + 1.28471 * avgOrien + 1.92666 * avgGaus', 
    map: {
      'maxMag': variables.select('maxNDVImag'),
      'maxOrien': variables.select('maxOrien'),
      'maxGaus': variables.select('maxNDVIGau'),
      'avgMag': variables.select('avgNDVImag'),
      'avgOrien': variables.select('avgOrien'),
      'avgGaus': variables.select('avgNDVIGau')
    }
  }); // Cross-validation accuracy: 0.8558972.
  
  var LR_logitE_Raw = LR_logit_Raw.exp();
  
  // Calculate the ATEI.
  var LRpredictedImg_Raw = LR_logitE_Raw.divide(LR_logitE_Raw.add(1))
    .rename("LRpredictedImg_Raw");
  
  // // Average positive NDVI.
  // var LR_logit_Post = variables.expression({
  //   expression: '-2.33408 + 2342.71080 * maxMag + 0.89330 * maxOrien + 0.05594 * maxGaus ' + 
  //     '- 387.07364 * avgMag + 0.46284 * avgOrien + 1.41500 * avgGaus', 
  //   map: {
  //     'maxMag': variables.select('maxNDVImag'),
  //     'maxOrien': variables.select('maxOrien'),
  //     'maxGaus': variables.select('maxNDVIGau'),
  //     'avgMag': variables.select('avgPostMag'),
  //     'avgOrien': variables.select('postOrien'),
  //     'avgGaus': variables.select('avgPostGau')
  //   }
  // }); // Cross-validation accuracy: 0.8389243.
  
  // var LR_logitE_Post = LR_logit_Post.exp();
  
  // // Calculate the ATEI.
  // var LRpredictedImg_Post = LR_logitE_Post.divide(LR_logitE_Post.add(1))
  //   .rename("LRpredictedImg_Post");
  
  // // Combine the two results.
  // var LRpredictedImg = LRpredictedImg_Raw.addBands(LRpredictedImg_Post)
  //   .float();
  
  // print(LRpredictedImg.bandTypes())

  
  /* RF modelling. */
  
  // Raw NDVI.
  // Fit the RF model based on the sampled data.
  var RFregressor_Raw = classifier.setOutputMode('REGRESSION') 
    .train({
      features: sampled,
      classProperty: target, 
      inputProperties: rawVars
    }); 
  
  // Perform the RF regression on an image.
  var RFpredictedImg_Raw = variables.classify({
    classifier: RFregressor_Raw, 
    outputName: RFpredicted
  }).rename("RFpredictedImg_Raw");
  
  // // Positive NDVI.
  // // Fit the RF model based on the sampled data.
  // var RFregressor_Post = classifier.setOutputMode('REGRESSION') 
  //   .train({
  //     features: sampled,
  //     classProperty: target, 
  //     inputProperties: postVars
  //   }); 
  
  // // Perform the RF regression on an image.
  // var RFpredictedImg_Post = variables.classify({
  //   classifier: RFregressor_Post, 
  //   outputName: RFpredicted
  // }).rename("RFpredictedImg_Post");
  
  // var RFpredictedImg = RFpredictedImg_Raw.addBands(RFpredictedImg_Post)
  //   .float();
  
  //  Combine all the results.
  var combined = RFpredictedImg_Raw.addBands(LRpredictedImg_Raw)
    // .addBands(LRpredictedImg_Post)
    // .addBands(avgNDVI2019)
    // .addBands(avgPostNDVI2019)
    .float();
  
  print(combined.bandTypes())
  
  if (true) {
    // print(predictedImg.projection().nominalScale())
    
    // var outputName = "RF_predictedImg_new";
    // var outputName = "RFpredictedImg_rawVSpositive_2";
    
    // Export.image.toAsset({
    //   image: RFpredictedImg.clip(geometry), 
    //   description: outputName, 
    //   assetId: wdNorthA + "Pixel_Sampling/Random/" + outputName,
    //   region: geometry, 
    //   scale: 30, 
    //   crs: "EPSG:4326", 
    //   maxPixels: 1e13
    // });
    
    var outputName2 = "LRvsRF_predictedImg_1984_2";
    // var outputName2 = "LRvsRF_predictedImg_2019_2";
    
    Export.image.toAsset({
      image: combined.clip(northAmerica), 
      description: outputName2, 
      assetId: wdNorthA + "Pixel_Sampling/Random/" + outputName2,
      region: northAmerica, 
      scale: 30, 
      crs: "EPSG:4326", 
      maxPixels: 1e13
    });
  }
  
} else {
  /* Read the classified image. */
  
  var classifiedImg = ee.Image(wdNorthA + "Pixel_Sampling/Random/" + 
    "LRvsRF_predictedImg_rawVSpositive_2");
  
  var avgPostNDVI2019 = classifiedImg.select("avgPostNDVI2019");
  var avgNDVI2019 = classifiedImg.select("avgNDVI2019");
  var RFpredictedImg_Raw = classifiedImg.select("RFpredictedImg_Raw");
  var RFpredictedImg_Post = classifiedImg.select("RFpredictedImg_Post");
  var LRpredictedImg_Raw = classifiedImg.select("LRpredictedImg_Raw");
  var LRpredictedImg_Post = classifiedImg.select("LRpredictedImg_Post");
}


/* Visualization. */
  
if (true) {
  
  var palette = ["a50026","d73027","f46d43","fdae61","fee090",
    "ffffbf","e0f3f8","abd9e9","74add1","4575b4","313695"]
    .reverse();
  
  // var point = ee.Geometry.Point([-115.49024400807646, 51.32579263179932]); // Calgary.
  // var point = ee.Geometry.Point([-148.99293, 63.737]); // Alaska.
  
  // var point = ee.Geometry.Point([-113.49153672863031, 48.74125005784002]); // GNP.
  // var point = ee.Geometry.Point([-144.331, 61.0655]); // Alaska (tree vs. non-tree).
  var point = ee.Geometry.Point([-105.6712, 40.2642]); // RMNP.
  
  var ndvi_palette =
    'FFFFFF, CE7E45, DF923D, F1B555, FCD163, 99B718, 74A901, 66A000, 529400,' +
    '3E8601, 207401, 056201, 004C00, 023B01, 012E01, 011D01, 011301';

  var NDVIvisParams = {min: -0.2, max: 1, palette: ndvi_palette};

  Map.setOptions("hybrid");
  Map.centerObject(point, 12);
  
  // Map.addLayer(avgNDVI2019, NDVIvisParams, "Average raw NDVI");
  
  // // Map.addLayer(avgPostNDVI2019, NDVIvisParams, "Average positive NDVI");
  
  // Map.addLayer(RFpredictedImg_Raw,// .updateMask(RFpredictedImg_Raw), 
  //   {min: 0, max: 1, palette: palette}, "RF predicted result (raw NDVI)", true);
  
  // // Map.addLayer(RFpredictedImg_Post,//.updateMask(RFpredictedImg_Post),
  // //   {min: 0, max: 1, palette: palette}, "RF predicted result (positive NDVI)", true);
    
  // Map.addLayer(LRpredictedImg_Raw,//.updateMask(LRpredictedImg_Raw), 
  //   {min: 0, max: 1, palette: palette}, "LR predicted result (raw NDVI)", true);
  
  // Map.addLayer(LRpredictedImg_Post,//.updateMask(LRpredictedImg_Post), 
  //   {min: 0, max: 1, palette: palette}, "LR predicted result (positive NDVI)", true);
    
  Map.addLayer(samples, {color: "red"}, "Samples", false);
} 