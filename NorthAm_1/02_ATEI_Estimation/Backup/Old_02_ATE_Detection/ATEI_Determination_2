/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var sampled = ee.FeatureCollection("users/treeline/NorthAmerica_GME/Pixel_Sampling/Validation/Edited_Combined_Stratified_Sampling_noUC_centroids_6subs_anlATEIcomponents_L5_westernUS_2009to2011");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
print("Sample size:", sampled.size())

/* Preparation of the inputted feature collection of sample points. */

// Random seed.
var seed = 5;

// k folder value
var k = 10;

// Randomly sort the sampled points.
var sorted = sampled.randomColumn('random', seed).sort('random');

// Number of samples in each fold.
var size = sorted.size().divide(k);

var folds = ee.List.sequence(0, k-1).iterate(function(n, list) {
  n = ee.Number(n);
  
  // First sample and the number of samples in each fold.
  var start = size.multiply(n).floor();
  var count = size.multiply(n.add(1)).floor().subtract(start);
  
  // Extract the samples in each fold and set the corresponding fold number.
  var partition = ee.FeatureCollection(sorted.toList(count, start)).map(function(f) {
    return f.set('fold', n);
  });
  
  // Add samples with the fold number to a list.
  return ee.List(list).add(partition);
}, []);

// print("folds:", folds, ee.List(folds).get(0))

var collection = ee.FeatureCollection(ee.List(folds)).flatten();
// print("fold collection:", collection)

// Extract the fold numbers.
var folds = collection.distinct('fold').select('fold');
// print("fold numbers:", folds)

// Define a filter to determine if samples are in or out of a fold.
var filter = ee.Filter.equals({leftField: 'fold', rightField: 'fold'});

// Add the data out of the fold as the training set.
folds = ee.Join.saveAll('training').apply(folds, collection, filter.not());

// Add the data in the fold as the validation set.
folds = ee.Join.saveAll('validation').apply(folds, collection, filter);

// print("Splitted Folds:", folds)

print('Training Data Folds', folds.aggregate_array('training'))
print('Validation Data Folds', folds.aggregate_array('validation'))


/* Build a set of RF regressors with different numbers of trees. */

// Define a range of tree numbers.
var treeNumMin = 2;
var treeNumMax = 50;
var treeNums = ee.List.sequence(treeNumMin, treeNumMax);

// Property to predict.
var target = 'InOut';

// Name of predicted variable.
var predicted = ee.String(target).cat('_RFpredicted');

// Calculate the average accuracy of the RF model with each number of trees.
var avgRFresults = ee.FeatureCollection(treeNums.map(function(n){
  var treeNum = ee.Number(n);
  
  // Create a Random Forest classifier with custom parameters.
  var classifier = ee.Classifier.smileRandomForest({
    numberOfTrees: treeNum, 
    variablesPerSplit: null, // If unspecified, uses the square root of the number of variables.
    minLeafPopulation: 1, 
    bagFraction: 0.5, 
    maxNodes: null, // If unspecified, defaults to no limit.
    seed: seed
  });
  
  // Cross-validation.
  var RFresults = ee.FeatureCollection(folds.map(function(fold) {
    var trainingFold = ee.FeatureCollection(ee.List(fold.get('training')));
    var testingFold = ee.FeatureCollection(ee.List(fold.get('validation')));
    
    // Train the RF regressor.  
    var RFregressor = classifier.setOutputMode('REGRESSION') 
      .train({
        features: trainingFold, 
        classProperty: target, 
        inputProperties: ["Orie", "Grad", "Gaus"]
      });   
        
    // Perform the RF regression on the testing fold.
    var testingResult = testingFold.classify({
      classifier: RFregressor, 
      outputName: predicted
    });
    
    // Correlation between the observed and predicted values. 
    var correlation = testingResult.reduceColumns({
      reducer: ee.Reducer.pearsonsCorrelation(),
      selectors: [target, predicted]
    });
    
    // Accuracy assessment.
    var errorMatrix = testingResult.errorMatrix({
      actual: target, 
      predicted: predicted
    });
    
    var accuracy = errorMatrix.accuracy();
    
    var RFresult = ee.Feature(null,
    {
      R: correlation.get('correlation'),
      accuracy: accuracy
    });
  
    return RFresult;
  }));
  
  // Average the correlation and accuracy of the predicted results.
  var avgR = RFresults.aggregate_mean('R');
  var avgAccuracy = RFresults.aggregate_mean('accuracy');
  
  var avgRFresult = ee.Feature(null,
    {
      treeNum: treeNum,
      avgR: avgR,
      avgAccuracy: avgAccuracy
    });
  
  return avgRFresult;
}));

// print("Average RF accuracy", avgRFresults)


/* Examine the accuracy value of the RF model with each number of trees. */

// Scatterplot of tree number and average accuracy. 
var x1 = avgRFresults.aggregate_array('treeNum');
var y1 = avgRFresults.aggregate_array('avgAccuracy');

var chart1 = ui.Chart.array.values(y1, 0, x1);

chart1 = chart1.setOptions({
  hAxis: { title: 'Tree Number', viewWindow: {min: treeNumMin, max: treeNumMax} },
  vAxis: { title: 'Average Accuracy', viewWindow: {min: 0, max: 1} },
  pointSize: 1,
  legend: 'none'
});

print(chart1)

// Scatterplot of tree number and average Pearson's r. 
var x2 = avgRFresults.aggregate_array('treeNum');
var y2 = avgRFresults.aggregate_array('avgR');

var chart2 = ui.Chart.array.values(y2, 0, x2);

chart2 = chart2.setOptions({
  hAxis: { title: 'Tree Number', viewWindow: {min: treeNumMin, max: treeNumMax} },
  vAxis: { title: "Average Pearson's r", viewWindow: {min: -1, max: 1} },
  pointSize: 1,
  legend: 'none'
});

print(chart2)

