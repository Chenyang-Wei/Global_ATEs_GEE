/*
  Introduction:
  1) Pre-process the Landsat surface reflectance data (no cloud or cloud shadow masking).
  2) Calculate annual maximum/average NDVIs over the study period of time.
  3) Convert the OLI NDVI to the ETM+ NDVI according to the result of D.P. Roy et al. 
    (Remote Sensing of Environment 185 (2016) 57–70):
    ETM+ = 0.0029 + 0.9589 OLI.
  4) Remove water body from NDVIs to avoid its impact 
    (normally with low NDVI values) on the focal calculation of NDVI.
  5) Calculate the annual maximum/average NDVIs at each LANDSAT pixel.
  6) Smooth the annual maximum/average NDVIs by calculating their focal median values 
    within a 10-pixel circular kernel.
  7) Calculate the annual gradient direction and magnitude of the smoothed NDVIs.
  8) Extract the annual smoothed NDVIs and gradient variables within the study domain 
    (i.e., the climatic ATE).
  
  Update: 11/2/2020.
  
  Notes:
  1) LANDSAT-8 surface reflectance from 2014 to 2019.
  
  Launch time: 
  1） Mean: 6d.
*/


/* Setup. */

// Determine whether calculate the annual maximum or average NDVI.
var max = true;

// Define the extent of North America. 
var northAmerica = ee.Geometry.Polygon({
    coords: [[[-165.69002926658334, 72.44551256468144],
          [-169.40248634956492, 65.69009098298687],
          [-172.25893166206492, 63.826281515474996],
          [171.35638590722195, 52.855285271231274],
          [-159.1340353549648, 17.264443722753843],
          [-122.14862062448367, 9.59539750905343],
          [-79.06711256993691, 6.243890041056693],
          [-77.03677448989225, 7.40316087095261],
          [-76.78408894301725, 8.990725120234067],
          [-75.7244458156751, 12.403191738791786],
          [-71.5276684719251, 13.751533985801833],
          [-62.8264965969251, 11.651035844929385],
          [-62.005942990095036, 9.999896817210585],
          [-60.791953732282536, 9.96743692413247],
          [-55.5884807162513, 13.889226127218825],
          [-47.99315852039507, 58.68729606716915],
          [-66.52860968724042, 71.51769835770313],
          [-77.86650031224042, 74.25356562488685],
          [-89.90751593724042, 74.22969620284344],
          [-106.04844453284761, 74.3012200035139],
          [-114.63975312659761, 74.20581277506923],
          [-120.18954789130242, 74.88484689543225],
          [-136.27353226630242, 74.6772015427699]]],
    geodesic: true
});

// Asset path.
var wdNorthA = "users/treeline/NorthAmerica_GME/";

// // Load the geometry of the selected "hybas_12" basins with the buffered CATE.
// var selectedBasinsGeo = ee.FeatureCollection(wdNorthA + "Annual_NDVI/" + 
//   "Hybas12Basins_with3kmBufferedCATE").geometry();

// Determine a target projection system.
var proj = {
  crs: "EPSG:4326",
  scale: 30
};

// Load the climatic ATE with a 3-km buffer.
var CATEwithBuffer = ee.Image(wdNorthA + "CATE/" + 
  "3kmBuffered_30mReprj_500mCATE3kmBuffer_gteAvgClsdFrstElv_10kmRes10pxFocalMean_10kmClsdFrstBuffer")
  .reproject(proj);

// print("CATE with Buffer:", CATEwithBuffer.bandTypes(), 
//   CATEwithBuffer.projection().crs(), 
//   CATEwithBuffer.projection().nominalScale())

// Extract the climatic ATE.
var CATE = CATEwithBuffer.select("gteFocalMean_30mReprj");

// Get the 3-km buffer of the CATE.
var cateBuffer = CATEwithBuffer.select("Buffered_3km");

// Create a mask using the Hansen dataset (V 1.7) to define the area of land surface.
var land = ee.Image("UMD/hansen/global_forest_change_2019_v1_7") // The newest version of the Hansen dataset.
  .select('datamask')
  .eq(1) // Select the "mapped land surface" in the Hansen dataset.
  .reproject(proj);


/* Image processing function definition. */

// This function extracts pixels within the buffered CATE.
var bufferExtraction = function(img) {
  var withinBuffer = img.updateMask(cateBuffer);
  
  return withinBuffer;
};

// This function removes invalid pixels in each Landsat-8 image.
var removeInvalid_L8 = function(img) {
  // Remove edge pixels that don't occur in all bands.
  var noNA = img.mask().reduce(ee.Reducer.min());
  
  // Identify pixels with all the surface reflectance bands within the valid range: 0-10000.
  var lowerLimit = img.gt(0).reduce(ee.Reducer.min());
  var upperLimit = img.lt(1e4).reduce(ee.Reducer.min());
  
  var maskedB4B5 = img.updateMask(noNA)
    .updateMask(lowerLimit)
    .updateMask(upperLimit)
    .select(["B4", "B5"]); // Select "B4" and "B5" for further calculating the NDVI.
  
  return maskedB4B5;
};

// This function calculates NDVI of Landsat-8 imagery.
var calNDVI_L8 = function(i) {
  var ndvi = i.addBands(i.normalizedDifference(['B5', 'B4'])
    .rename('OLI_NDVI'))
    .select('OLI_NDVI');
  
  return ndvi;
};

// This function Convert the OLI NDVI to the ETM+ NDVI.
// ETM+ = 0.0029 + 0.9589 OLI
var ETM_NDVI = function(i) {
  var ETM = i.addBands(i.select("OLI_NDVI")
    .multiply(0.9589).add(0.0029)
    .rename("ETM_NDVI"))
    .select("ETM_NDVI");
  
  return ETM;
};

// This function combines all the processing steps.
function imageProcessing(img) {
  var bufferExtracted = bufferExtraction(img);
  var invalidRemoved = removeInvalid_L8(bufferExtracted);
  var ndviCalculated = calNDVI_L8(invalidRemoved);
  var ndviConverted = ETM_NDVI(ndviCalculated);
  
  // Remove water-covered regions to avoid its impact 
  // (normally with low NDVI values) on the focal calculation of NDVI.
  var waterRemoved = ndviConverted.updateMask(land);
  
  return waterRemoved;
}

// Define a circular smoothing kernel of 10 pixels.
var Kn = ee.Kernel.circle({
  radius: 10 // Default units: "pixels."
}); 

// This function smooths the raw annual NDVI, 
// and computes the gradient magnitude and direction of the smoothed NDVI.
var smoothing_gradientCalculation = function(img) {
  // Get the information of year.
  var yr = img.get("year");
  
  // Image smoothing.
  var smoothed = img.reduceNeighborhood({
    // The median reducer is less smooth than the mean reducer, 
    // but the former one makes the spatial variation of NDVI more abrupt (i.e., less gradual),
    // which then provides a sharper gradient (i.e., with larger magnitude).
    reducer: ee.Reducer.median(),
    kernel: Kn,
    skipMasked: false // Do NOT mask output pixels if the corresponding input pixels are masked.
  }).reproject(proj).rename("smdNDVI");
  
  // Compute the image gradient of the smoothed NDVI in the X and Y directions.
  var gradient = smoothed.gradient()
    .reproject(proj);
  
  // Compute the magnitude of the gradient: 
  // "hypot" calculates the magnitude of the 2D vector [x, y].
  var magnitude = gradient.select('y').hypot(gradient.select('x'))
    .rename("magnitude");
  
  // Compute the direction of the gradient: 
  // "atan2" calculates the angle formed by the 2D vector [x, y].
  // (Gradient: -179 ~ 180 (-PI ~ PI), 
  // south: 0, north: 180 (PI), 
  // west : 90 (PI/2), east: -90 (-PI/2)).
  var direction = gradient.select('y').atan2(gradient.select('x'))
    .rename("direction");
  
  // Combine the smoothed NDVI and the gradient magnitude and direction.
  var combined = smoothed.addBands(magnitude)
    .addBands(direction);
  
  // Mask the result after computing the gradient to avoid missing pixels
  // along the boundary of CATE.
  var masked = combined.updateMask(CATE)
    .updateMask(land); // Remove any remaining water-covered regions.
  
  // Add a property of year.
  var withYear = masked.set({year: yr})
    .float(); // Convert the PixelType to float.
  
  return withYear;
};

// This function converts each image collection of NDVI variables to a multi-band image 
// and renames each NDVI variable with the information of year.
function convertGradient(current, previous) {
  // When convert a "floating point" to a "string", the result contains a ".", which isn't allowed in band names.
  var yearName = ee.String(ee.Number(current.get("year")).int());
  
  // Define new band names with the information of year.
  var smdName = ee.String("sNDVI_").cat(yearName);
  var magName = ee.String("mag_").cat(yearName);
  var dirName = ee.String("dir_").cat(yearName);

  // Rename the current image.
  current = current.select(["smdNDVI", "magnitude", "direction"], 
    [smdName, magName, dirName]);
  
  var converted = ee.Algorithms.If(
    ee.Algorithms.IsEqual(previous, null), // Whether or not the first image.
    current, // True: for the first image.
    ee.Image(previous).addBands(current) // False: for the rest images.
  );
  
  return converted;
}


/* Import the Landsat-8 Surface Reflectance dataset. */

// Bands of surface reflectance.
var bands = ["B[1-7]"];

// Landsat 8.
var L8 = ee.ImageCollection("LANDSAT/LC08/C01/T1_SR")
  .select(bands)
  // .filterBounds(selectedBasinsGeo) // Select images in the determined hydro-basins.
  .filterBounds(northAmerica) // Select images in North America.
  .filterDate('2014-01-01', '2020-01-01'); // The end date is exclusive.

// print("Raw Landsat 8:", L8.first().bandTypes(),
//   L8.first().projection().crs(),
//   L8.first().projection().nominalScale())


/* Image processing and analysis. */

// Image pre-processing and NDVI calculation.
var ndvi = L8.map(imageProcessing);

// print("Landsat 8 - NDVI:", ndvi_L8.first().bandTypes())

// Determine the list of years.
var years = ee.List.sequence(2014, 2019);

// Annual maximum/average NDVI calculation.
var annualNDVI_ic = ee.ImageCollection.fromImages(
  years.map(function (y) {
    // Extract all NDVIs in the same year.
    var allNDVIs = ndvi.filter(ee.Filter.calendarRange(y, y, 'year'));
    
    if (max) {
      // Calculate their annual maximum value.
      var maxNDVI = allNDVIs.max()
        .set('year', y); // Add the corresponding "year" as a new property.
      
      return maxNDVI;
      
    } else {
      // Calculate their annual mean value.
      var avgNDVI = allNDVIs.mean()
        .set('year', y); // Add the corresponding "year" as a new property.
      
      return avgNDVI;
    }
})); // Return an image collection.

// print("Raw NDVI IC:", annualNDVI_ic)


/* NDVI smoothing and gradient calculation. */

// Get an image collection of the smoothed annual NDVIs 
// and their gradient variables.
var NDVIgrad_ic = annualNDVI_ic.map(smoothing_gradientCalculation);

// print("NDVIgrad_ic:", NDVIgrad_ic,
//   NDVIgrad_ic.first().bandTypes(),
//   NDVIgrad_ic.first().projection().crs(),
//   NDVIgrad_ic.first().projection().nominalScale())

// Convert the image collection to a multi-band image.
var NDVIgradImg = ee.Image(NDVIgrad_ic.iterate(convertGradient));

print("NDVIgradImg:", NDVIgradImg.bandTypes(),
  NDVIgradImg.projection().crs(),
  NDVIgradImg.projection().nominalScale())


/* Export or visualize the result. */

if (true) {
  // Export the smoothed NDVIs and their gradient variables.
  if (max) {
    var fileName = "medianSmdAnlMaxNDVI_gradMagDir_L8_2014to2019";
    // var fileName = "medianSmdAnlMaxNDVI_gradMagDir_L8_2014to2019_Hybas12";
  } else {
    var fileName = "medianSmdAnlAvgNDVI_gradMagDir_L8_2014to2019";
  }
  
  Export.image.toAsset({
    image: NDVIgradImg, 
    description: fileName, 
    assetId: wdNorthA + "Annual_NDVI/" + fileName,
    region: northAmerica, 
    crs: "EPSG:4326",
    scale: 30,
    maxPixels: 1e13
  });
  
} else {
  // Visualization.
  Map.setOptions("hybrid");
  Map.setCenter(-113.724166, 48.5763, 12);
  
  var ndvi_palette =
      'FFFFFF, CE7E45, DF923D, F1B555, FCD163, 99B718, 74A901, 66A000, 529400,' +
      '3E8601, 207401, 056201, 004C00, 023B01, 012E01, 011D01, 011301';
  
  Map.addLayer(CATE, 
    {palette: "FF0000"}, "CATE", false, 1);
  
  Map.addLayer(NDVIgradImg.select("sNDVI_2014"), 
    {min: 0, max: 1, palette: ndvi_palette},
    "sNDVI_2014", true);
  
  Map.addLayer(NDVIgradImg.select("mag_2014"), 
    {min: 0, max: 3e-3, palette: "FFFFFF, FF0000"}, 
    "mag_2014", false, 0.5);
  
  Map.addLayer(NDVIgradImg.select("dir_2014"), 
    {min: -3, max: 3, palette: "FFFFFF, 0000FF"}, 
    "dir_2014", false);
}

