/**
 * Introduction:
 * 1) Extract the HydroSHEDS basins ("hybas_12") 
 *  with both closed forests on the lower slope or in the valley
 *  and non-forested areas on the upper slope or the cliff
 *  within the new CATE.
 * 
 * Update: 3/5/2021.
 * 
 * Runtime: 8h.
 */


/* Load the required datasets. */

// Target projection.
var targetPrj = {
  crs: "EPSG:4326",
  scale: 30
};

// Set the working directory.
var wdNA = "users/treeline/NorthAmerica_GME/";

// Load the new CATE.
var newCATE = ee.Image(wdNA + "Climate-Based_ATE/" +
  "30mNewCATE_gteSmd10kmCForestElv_3kmCForestBuffer_BufRawCATEclosedForests_AOI");

// print("newCATE:", newCATE.bandTypes(),
//   newCATE.projection().crs(),
//   newCATE.projection().nominalScale())

// Load the study domain.
var studyDomain = ee.FeatureCollection(wdNA + "Climate-Based_ATE/" +
  "NorthAmerica_LSIB_SIMPLE");

// Most detailed HydroSHEDS basins (level 12) intersecting the study domain.
var basins = ee.FeatureCollection("WWF/HydroSHEDS/v1/Basins/hybas_12")
  .filterBounds(ee.Feature(studyDomain.first()).geometry());


/* Pre-process the ALOS landform dataset. */

// The landform dataset is based on the 30m "AVE" band of JAXA's ALOS DEM 
// (available in EE as JAXA/ALOS/AW3D30_V1_1).
// There are stripes in the area over 60 degrees in latitude.
var rawLF = ee.Image('CSP/ERGo/1_0/Global/ALOS_landforms').select('constant')
  .reproject(targetPrj);

// Remove the high-latitude NA (invalid) stripes 
// in the landform dataset (based on the ALOS DEM V1.1).
var ALOSv11 = ee.Image("JAXA/ALOS/AW3D30_V1_1").select("AVE")
  .reproject(targetPrj);

var maskedLF = rawLF.updateMask(ALOSv11.mask());

// Landforms within the new CATE.
var CATE_LF = maskedLF.updateMask(newCATE);

// print("CATE_LF:", CATE_LF.bandTypes(),
//   CATE_LF.projection().crs(),
//   CATE_LF.projection().nominalScale())


/* Extract the landforms of interest in the new CATE. */

// Cliff and upper slopes.
var upper = CATE_LF.gte(15).and(CATE_LF.lte(24));

// Lower slope and valleys.
var lower = CATE_LF.gte(31);


/* Load the Copernicus Global Land Cover datasets (v3.0.1) from 2015 to 2019. */

// Set the file path and band name of land cover data.
var lcPath = "COPERNICUS/Landcover/100m/Proba-V-C3/Global/";

var lcName = "discrete_classification";

// Function to read the annual land cover datasets.
function readAnnualLC(year) {
  return ee.Image(lcPath + year).select(lcName);
}

// Read the datasets of 2015-2019.
var landCover = ee.ImageCollection.fromImages([
  readAnnualLC(2015),
  readAnnualLC(2016),
  readAnnualLC(2017),
  readAnnualLC(2018),
  readAnnualLC(2019),
]);


/* Extract and reproject the closed forests (tree canopy > 70 %) in 2015-2019. */

// Function to extract the annual closed forests.
function extractCF(lcImg) {
  return lcImg.gte(111).and(lcImg.lte(116));
}

// Annual closed forests from 2015 to 2019.
var annualCF = landCover.map(extractCF);

// Extract and reproject areas classified as closed forests in ALL the five years.
var CF_5yr = annualCF.min()
  .reproject(targetPrj);

// print("CF_5yr:", CF_5yr.bandTypes(),
//   CF_5yr.projection().crs(),
//   CF_5yr.projection().nominalScale())


/* Extract and reproject the non-forested areas in 2015-2019. */

// Function to extract the annual non-forested areas
// (from "Shrubs" to "Moss and lichen.").
function extractNonF(lcImg) {
  return lcImg.gte(20).and(lcImg.lte(100));
}

// Annual non-forested areas from 2015 to 2019.
var annualNonF = landCover.map(extractNonF);

// Extract and reproject areas classified as non-forested areas in ALL the five years.
var NonF_5yr = annualNonF.min()
  .reproject(targetPrj);

// print("NonF_5yr:", NonF_5yr.bandTypes(),
//   NonF_5yr.projection().crs(),
//   NonF_5yr.projection().nominalScale())


/* Obtain the qualified closed forests and non-forested areas. */

// Closed forests on the lower slope or in the valley.
var closedForests = CF_5yr.updateMask(lower)
  .selfMask()
  .rename("closedForests");

// non-forested areas on the upper slope or the cliff.
var nonForested = NonF_5yr.updateMask(upper)
  .selfMask()
  .rename("nonForested");

// Combine the two types of extracted areas.
var extracted = closedForests.addBands(nonForested);

print("extracted:", extracted.bandTypes(),
  extracted.projection().crs(), 
  extracted.projection().nominalScale())


/* Select the HydroSHEDS basins with both types of 
  the extracted regions within the new CATE. */

// Extract the first pair pixels within each basin.
var basins_extracted = extracted.reduceRegions({
  collection: basins,
  reducer: ee.Reducer.firstNonNull(), 
  scale: 30,
  crs: "EPSG:4326"
});

// Select basins with non-null extracted pixels.
var selectedBasins = basins_extracted
  .filter(ee.Filter.and(
    ee.Filter.neq("closedForests", null),
    ee.Filter.neq("nonForested", null)));


if (false) {
  // Visualization.
  Map.setCenter(-113.7571, 48.829, 12);
  Map.setOptions("hybrid");
  
  Map.addLayer(newCATE, {palette: "FFFF00"}, "newCATE", true, 0.5);
  Map.addLayer(closedForests, {palette: "00FF00"}, "closedForests", true);
  Map.addLayer(nonForested, {palette: "0000FF"}, "nonForested", true);
  Map.addLayer(basins, {color: "FF0000"}, "Basins", true);

} else if (true) {
  // Export the result.
  var fileName = "30mNewCATE_Hybas12Basins_LowerClosedForests_UpperNonForested";
  
  Export.table.toAsset({
    collection: selectedBasins, 
    description: fileName, 
    assetId: wdNA + "Transect_Analysis/" 
      + fileName
  });
}

