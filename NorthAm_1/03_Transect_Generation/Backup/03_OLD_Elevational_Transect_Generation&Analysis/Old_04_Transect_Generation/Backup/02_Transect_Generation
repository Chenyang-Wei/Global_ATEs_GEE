/**
 * Introduction:
 * 1) Vectorize the segmented CATE.
 * 2) Generate and buffer an elevational transect from the highest pixel to the lowest pixel within each selected polygon.
 * 
 * Date: 6/28/2020.
 */


// Setup.

// Define the extent of North America. 
var northAmerica = ee.Geometry.Polygon({
    coords: [[[-165.69002926658334, 72.44551256468144],
          [-169.40248634956492, 65.69009098298687],
          [-172.25893166206492, 63.826281515474996],
          [171.35638590722195, 52.855285271231274],
          [-159.1340353549648, 17.264443722753843],
          [-122.14862062448367, 9.59539750905343],
          [-79.06711256993691, 6.243890041056693],
          [-77.03677448989225, 7.40316087095261],
          [-76.78408894301725, 8.990725120234067],
          [-75.7244458156751, 12.403191738791786],
          [-71.5276684719251, 13.751533985801833],
          [-62.8264965969251, 11.651035844929385],
          [-62.005942990095036, 9.999896817210585],
          [-60.791953732282536, 9.96743692413247],
          [-55.5884807162513, 13.889226127218825],
          [-47.99315852039507, 58.68729606716915],
          [-66.52860968724042, 71.51769835770313],
          [-77.86650031224042, 74.25356562488685],
          [-89.90751593724042, 74.22969620284344],
          [-106.04844453284761, 74.3012200035139],
          [-114.63975312659761, 74.20581277506923],
          [-120.18954789130242, 74.88484689543225],
          [-136.27353226630242, 74.6772015427699]]],
    geodesic: true
});

// // Define a testing region.
// var testing = ee.Geometry.Polygon(
//         [[[-113.94481160044707, 48.89580901886171],
//           [-113.94481160044707, 48.78192131463045],
//           [-113.65848042368926, 48.78192131463045],
//           [-113.65848042368926, 48.89580901886171]]], null, false)

// Asset path.
var wdNorthA = "users/treeline/North_America/";
var wd500m = "users/treeline/North_America/CATE/500mCATE/"; // 500-m CATE.

// Raw CATE.
var rawCATE = ee.Image(wd500m + "3kmBuf500mCATE_gte10kmSmdClsdFrstElvMean_10kmBufClsdFrst");

// Segmented CATE.
var segCATE = ee.Image(wdNorthA + "Transects/" + 
  "Segmented_3kmBuf500mCATEgte10kmFrstElv_distToRidges_ALOSlandformsLte14_ridgeRemoved");

// Segmented CATE projection.
var segPrj = segCATE.projection();
var segCRS = segPrj.crs();
var segScale = segPrj.nominalScale();

print("Segmented CATE:", 
  segCATE.bandTypes(),
  segCRS, 
  segScale);

// ALOS elevation within the segmented CATE.
var elvName = "segElv";

var segElv = ee.Image('JAXA/ALOS/AW3D30/V2_2').select('AVE_DSM')
  .updateMask(segCATE).rename(elvName);


/* Check forested regions in the CATE. */

// // Copernicus land cover product.
// var copernicus = ee.ImageCollection("COPERNICUS/Landcover/100m/Proba-V/Global")
//   .select('discrete_classification').first();

// // Closed forests in the Copernicus dataset.
// var closedForests = copernicus.gte(111).and(copernicus.lte(116))
//   .updateMask(segCATE);


/* Vectorize the segmented study domain. */

var polygons = segCATE.reduceToVectors({ 
  geometry: northAmerica,
  // geometry: testing,
  maxPixels: 1e13,
  scale: segScale, 
  crs: segCRS,
  geometryType: "polygon",
  eightConnected: false 
  // Only pixels that share an edge are considered adjacent.
});

// print("Segmented polygons:", polygons.first(), polygons.size())


/* Test the reduceRegion function. */

// var elvMinMax_testing = segElv.reduceRegion({
//   reducer: ee.Reducer.minMax(),
//   geometry: testing,
//   scale: elvScale, 
//   crs: elvCRS,
//   maxPixels: 1e13
// })

// print(elvMinMax_testing)

/* Determine pixel coordinates in the CATE. */

// Create an image of pixel coordinates.
var rawCoords = ee.Image.pixelLonLat();

// Elevation dataset projection.
var elvPrj = segElv.projection();
var elvCRS = elvPrj.crs();
var elvScale = elvPrj.nominalScale();

// print("Elevation projection:", elvCRS, elvScale)

// Reproject the coordinate dataset to the elevation projection system.
var coords = rawCoords.reproject({
  crs: elvCRS,
  scale: elvScale
}).updateMask(segCATE);

print("Coordinate dataset projection:", 
  coords.projection().crs(), 
  coords.projection().nominalScale());


/* Define a function for generating and buffering the elevational transect. */

var generateBufferedTransects = function(feature) {  
  // Get the geometry of each selected polygon.
  var geom = feature.geometry();
  
  // Calculate the maximum and minimum elevation values 
  // of ridge or valley pixels.
  var elvMinMax = segElv.reduceRegion({
    reducer: ee.Reducer.minMax(),
    geometry: geom,
    scale: elvScale, 
    crs: elvCRS,
    maxPixels: 1e13
  });
  
  // Extract the coordinates of pixels with the maximum elevation.
  var elvMax = elvMinMax.get(elvName + "_max");
  var maxCoords = coords.updateMask(segElv.eq(ee.Number.parse(elvMax)));
  
  // Extract the coordinates of pixels with the minimum elevation.
  var elvMin = elvMinMax.get(elvName + "_min");
  var minCoords = coords.updateMask(segElv.eq(ee.Number.parse(elvMin)));
  
  // Convert the extracted coordinates to two lists.
  var maxList = maxCoords.reduceRegion({
    reducer: ee.Reducer.toList(),
    geometry: geom,
    scale: elvScale, 
    crs: elvCRS,
    maxPixels: 1e13
  });
  
  var minList = minCoords.reduceRegion({
    reducer: ee.Reducer.toList(),
    geometry: geom,
    scale: elvScale, 
    crs: elvCRS,
    maxPixels: 1e13
  });
  
  // Choose only the coordinates of the first qualified pixel in each list.
  var maxLon = ee.List(maxList.get('longitude')).get(0);
  var minLon = ee.List(minList.get('longitude')).get(0);
  
  var maxLat = ee.List(maxList.get('latitude')).get(0);
  var minLat = ee.List(minList.get('latitude')).get(0);
  
  // Merge the coordinates of the two pixels into a list.
  var lonList = ee.List([maxLon, minLon]);
  var latList = ee.List([maxLat, minLat]);
  
  var coordList = lonList.zip(latList);
  
  // Construct a line string between the two pixels based on the merged coordinates.
  var lineString = ee.Algorithms.GeometryConstructors.LineString(coordList);
  
  // Get the length of the generated line string.
  var lsLength = lineString.length(); // In meters.
  
  // Add the length property to the line string.
  var transect = ee.Feature(lineString).set("Length_m", lsLength);
  
  // Create a 30-m buffer for the line string.
  var buffered = transect.buffer(30); // If no projection is specified, the unit is meters.
  
  return buffered;
};


/* Generate and buffer the elevational transect within each segmented polygon. */
  
var bufferedTransects = ee.FeatureCollection(polygons
  .map(generateBufferedTransects));

// print("Buffered transects:", bufferedTransects.first(), bufferedTransects.size())


if (false) {
  /* Visualization. */
  
  var elvPalette = ['006600', '002200', 'fff700', 'ab7634', 'c4d0ff', 'ffffff'];
  var elvVis = {min: 1000, max: 3500, palette: elvPalette};
  
  Map.setCenter(-113.7571, 48.829, 16);
  Map.setOptions("hybrid");
  
  Map.addLayer(rawCATE, {palette: "FFFF00"}, "rawCATE", false);
  Map.addLayer(segCATE, {palette: "0000FF"}, "segCATE", true);
  
  // Map.addLayer(closedForests.selfMask(), {palette: "228B22"}, "closedForests", false);
  
  Map.addLayer(polygons, {color: "00FF00"}, "polygons", true);
  Map.addLayer(segElv, elvVis, "elevation", false);
  
  Map.addLayer(coords.select("longitude"), {palette: "00FFFF"}, "longitude", false);
  
  Map.addLayer(bufferedTransects, {color: "FF0000"}, "bufferedTransects", true);
}

else {
  /* Output the result.*/
  
  var fileName = "30mBufTransects_segCATEelvMaxToMin_3kmBuf500mCATEgte10kmFrstElv";
  
  Export.table.toAsset({
    collection: bufferedTransects, 
    description: fileName, 
    assetId: wdNorthA + "Transects/" + fileName
  });
}
