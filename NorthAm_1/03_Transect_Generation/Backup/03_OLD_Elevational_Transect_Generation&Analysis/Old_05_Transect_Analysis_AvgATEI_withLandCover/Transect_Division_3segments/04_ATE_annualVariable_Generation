/**
 * Introduction:
 * 1) Generate the variables of interest for the identified ATE within each transect in each year.
 * 
 * Update: 2/16/2021.
 * 
 * Runtime: 
 * 1) To Drive (.CSV): 57s ~ 5h.
*/


/* Load and preprocess the required datasets. */

// Set the work directory.
var wd = "users/treeline/NorthAmerica_GME/";

// Target projection system.
var targetPrj = {
    crs: "EPSG:4326",
    scale: 30
  };

// Annual ATEIs.
var ATEI_1 = ee.Image(wd +
  "Annual_ATEI/ATEI_medianSmdAnlMaxAvgNDVIs_1984to1999");
var ATEI_2 = ee.Image(wd +
  "Annual_ATEI/ATEI_medianSmdAnlMaxAvgNDVIs_2000to2019");

var ATEI = ATEI_1.addBands(ATEI_2)
  .reproject(targetPrj);

// ALOS elevation.
var ALOSelv = ee.Image('JAXA/ALOS/AW3D30/V2_2').select('AVE_DSM')
  .reproject(targetPrj);

// ATE divides file path.
var dividesPath = wd
  + "Transects/SelectedHybas4Basins_closedForestsLowerSlopeValley_nonForestedUpperSlope/"
  + "CenterLines/"
  + "AnnualDivides_AnnualATEI_Pt307toPt507/"
  + "AnnualDivides_";


/* Weight the elevation with the ATE. */

// Calculate the ATEI-weighted elevation.
var ATEIwtd_Elv = ATEI.multiply(ALOSelv);

// Function to rename the ATEI-weighted elevation.
function renameWtdElv(currentYear, previousResult) {
  // When convert a "floating point" to a "string", the result contains a ".", which isn't allowed in band names.
  var yearName = ee.String(ee.Number(currentYear).int());
  
  // Rename the ATEI-weighted elevation.
  var oldName = ee.String("ATEI_").cat(yearName);
  var newName = ee.String("wtdElv").cat(yearName);
  var renamedBand = ATEIwtd_Elv.select([oldName], [newName]);
  
  // Add the renamed band to the previous image.
  var combinedImg = ee.Image(previousResult).addBands(renamedBand);
  
  return combinedImg;
}

// Years of interest.
var yearList = ee.List.sequence(1984, 2019);

// Rename the ATEI-weighted elevation and combine it with the ATEI image.
var ATEIwtdElv_ATEI = ee.Image(yearList.iterate({
  function: renameWtdElv, 
  first: ATEI
}));

// print("ATEIwtdElv_ATEI:", ATEIwtdElv_ATEI.bandTypes(),
//   ATEIwtdElv_ATEI.projection().crs(),
//   ATEIwtdElv_ATEI.projection().nominalScale())


/* Sum the ATEI and the ATEI-weighted elevation within each ATE in each year. */

// Set the distance of buffer.
var bufDist = 45;

// Function to buffer the ATE divides.
function buffering(feature) {
  return feature.buffer(bufDist);
}

// Set the number of divide groups.
var groupNo = 10;

// Create a list of group IDs.
var groupIDlist = ee.List.sequence(1, groupNo);

// Function to sum the variables of interest within each ATE divides in each group.
function sumVars(groupID) {
  var lowerLimit = groupSize.multiply(ee.Number(groupID).subtract(1));
  var upperLimit = groupSize.multiply(groupID);
  
  // Select ATE divides in each group.
  var groupedDivides = ee.FeatureCollection(annualDvdList.slice(lowerLimit, upperLimit));
  
  // Sum the annual variables within each ATE divides in each group.
  var groupedAnnualSum = annualVars.reduceRegions({
    collection: groupedDivides, 
    reducer: ee.Reducer.sum(), 
    scale: 30, 
    crs: "EPSG:4326"
  });
  
  return groupedAnnualSum;
}

// Annually sum the ATEI and the ATEI-weighted elevation.
for (var year = 1984; year <= 2019; year ++) {
// for (var year = 1984; year <= 1985; year ++) { // Testing.
  // Get the annual variables of interest.
  var annualVars = ATEIwtdElv_ATEI.select("ATEI_" + year, "wtdElv" + year);
  
  // Buffer the ATE divides in each year.
  var annualDivides = ee.FeatureCollection(dividesPath + year).map(buffering);
  
  // Convert the buffered divides to a list.
  var dividesNo = annualDivides.size();
  var annualDvdList = annualDivides.toList(dividesNo);
  // print(dividesNo)
  
  // Group and analyze the ATE divides.
  var groupSize = dividesNo.divide(groupNo).ceil();
  // print(groupSize)
  
  var annualSum = ee.FeatureCollection(groupIDlist.map(sumVars)).flatten();
  
  // print(annualSum.first(),
  //   annualSum.size())
  
  // Export the annual results to the Asset.
  if (false) {
    var fileName = "ATEIwtdElv_" + year;
    // print("fileName:", fileName)
    
    Export.table.toAsset({
      collection: annualSum, 
      description: fileName, 
      assetId: wd + "Transects/SelectedHybas4Basins_closedForestsLowerSlopeValley_nonForestedUpperSlope/"
        + "CenterLines/"
        + "AnnualDivides_AnnualATEI_Pt307toPt507/" 
        + "ATEIwtdElv_ATEsum/"
        + fileName
    });
  }
  
  // Export the annual results to the Drive.
  if (true) {
    var fileName = "ATEIwtdElv_" + year;
    
    Export.table.toDrive({
      collection: annualSum, 
      description: fileName, 
      folder: "ATEIwtdElv_ATEsum2", 
      fileFormat: "CSV"
    });
  }
}


// var annualSum = ee.FeatureCollection([]);

// for (var group = 0; group < groupNo; group ++) {
//   // var lowerLimit = group * groupSize;
//   // var upperLimit = (group + 1) * groupSize;
//   var lowerLimit = groupSize.multiply(group);
//   var upperLimit = groupSize.multiply(group + 1);
//   print(lowerLimit, upperLimit)
  
//   // Select ATE divides in each group.
//   var groupedDivides = ee.FeatureCollection(annualDvdList.slice(lowerLimit, upperLimit));
  
//   // Sum the annual variables within each ATE divides in each group.
//   var groupedAnnualSum = annualVars.reduceRegions({
//     collection: groupedDivides, 
//     reducer: ee.Reducer.sum(), 
//     scale: 30, 
//     crs: "EPSG:4326"
//   });
  
//   annualSum = annualSum.merge(groupedAnnualSum);
// }