/**
 * Introduction:
 * 1) Buffer the combined center lines.
 * 2) Sum the ATEI and the ATEI-weighted elevation within each transect.
 * 
 * Update: 2/18/2021.
 * 
 * Runtime: 
 * 1) CSV: 2h.
 * 2) SHP: 3h.
*/


/* Load datasets. */

// Set the work directory.
var wd = "users/treeline/NorthAmerica_GME/";

// Combined center lines.
var combined = ee.FeatureCollection(wd
  + "Transects/SelectedHybas4Basins_closedForestsLowerSlopeValley_nonForestedUpperSlope/"
  + "CenterLines/"
  + "Combined_CenterLines");

// print(combined.first(), combined.size()) // 470593.

// Export the combined center lines to the Drive.
if (false) {
  var fileName = "CombinedCL";
  
  Export.table.toDrive({
    collection: combined, 
    description: fileName, 
    folder: fileName, 
    fileFormat: "CSV"
  });
}

// Target projection system.
var targetPrj = {
    crs: "EPSG:4326",
    scale: 30
  };

// Annual ATEIs.
var ATEI_1 = ee.Image(wd +
  "Annual_ATEI/ATEI_medianSmdAnlMaxAvgNDVIs_1984to1999");
var ATEI_2 = ee.Image(wd +
  "Annual_ATEI/ATEI_medianSmdAnlMaxAvgNDVIs_2000to2019");

var ATEI = ATEI_1.addBands(ATEI_2)
  .reproject(targetPrj);

// ALOS elevation.
var ALOSelv = ee.Image('JAXA/ALOS/AW3D30/V2_2').select('AVE_DSM')
  .reproject(targetPrj);


/* Weight the elevation with the ATE. */

// Calculate the ATEI-weighted elevation.
var ATEIwtd_Elv = ATEI.multiply(ALOSelv);

// Function to rename the ATEI-weighted elevation.
function renameWtdElv(currentYear, previousResult) {
  // When convert a "floating point" to a "string", the result contains a ".", which isn't allowed in band names.
  var yearName = ee.String(ee.Number(currentYear).int());
  
  // Rename the ATEI-weighted elevation.
  var oldName = ee.String("ATEI_").cat(yearName);
  var newName = ee.String("wtdElv").cat(yearName);
  var renamedBand = ATEIwtd_Elv.select([oldName], [newName]);
  
  // Add the renamed band to the previous image.
  var combinedImg = ee.Image(previousResult).addBands(renamedBand);
  
  return combinedImg;
}

// Years of interest.
var yearList = ee.List.sequence(1984, 2019);

// Rename the ATEI-weighted elevation and combine it with the ATEI image.
var ATEIwtdElv_ATEI = ee.Image(yearList.iterate({
  function: renameWtdElv, 
  first: ATEI
}));

// print("ATEIwtdElv_ATEI:", ATEIwtdElv_ATEI.bandTypes(),
//   ATEIwtdElv_ATEI.projection().crs(),
//   ATEIwtdElv_ATEI.projection().nominalScale())


/* Sum the ATEI and the ATEI-weighted elevation within each ATE in each year. */

// Set the distance of buffer.
var bufDist = 45;

// Buffer the center lines.
function buffering(feature) {
  return feature.buffer(bufDist);
}

var transects = combined.map(buffering);

// Export the buffered center lines to the Drive.
if (false) {
  var fileName = "BufferedCL";
  
  Export.table.toDrive({
    collection: transects, 
    description: fileName, 
    folder: fileName, 
    fileFormat: "SHP"
    // fileFormat: "CSV"
  });
}

// Convert the transects to a list.
var tranNo = transects.size();
var tranList = transects.toList(tranNo);
// print(tranNo)

// Group and analyze the transects.
var groupNo = 100;
var groupSize = tranNo.divide(groupNo).ceil();
// print(groupSize)

// Create a list of group IDs.
var groupIDlist = ee.List.sequence(1, groupNo);

// Function to sum the variables of interest within each transect in each group.
function sumVars(groupID) {
  var lowerLimit = groupSize.multiply(ee.Number(groupID).subtract(1));
  var upperLimit = groupSize.multiply(groupID);
  
  // Select transects in each group.
  var groupedTran = ee.FeatureCollection(tranList.slice(lowerLimit, upperLimit));
  
  // Sum the annual variables within each transect in each group.
  var groupedTranSum = ATEIwtdElv_ATEI.reduceRegions({
    collection: groupedTran, 
    reducer: ee.Reducer.sum(), 
    scale: 30, 
    crs: "EPSG:4326"
  });
  
  return groupedTranSum;
}

var transectSum = ee.FeatureCollection(groupIDlist.map(sumVars)).flatten();

// print(transectSum.first(), transectSum.size())

// Export the annual results to the Asset.
if (false) {
  var fileName = "ATEIwtdElv_transectSum";
  
  Export.table.toAsset({
    collection: transectSum, 
    description: fileName, 
    assetId: wd + "Transects/SelectedHybas4Basins_closedForestsLowerSlopeValley_nonForestedUpperSlope/"
      + "CenterLines/"
      + fileName
  });
}

// Export the annual results to the Drive.
if (true) {
  // var fileName = "ATEIwtdElv_transectSum";
  var fileName = "ATEIwtdElv_transectSum2";
  
  Export.table.toDrive({
    collection: transectSum, 
    description: fileName, 
    folder: fileName, 
    // fileFormat: "SHP"
    fileFormat: "CSV"
  });
}