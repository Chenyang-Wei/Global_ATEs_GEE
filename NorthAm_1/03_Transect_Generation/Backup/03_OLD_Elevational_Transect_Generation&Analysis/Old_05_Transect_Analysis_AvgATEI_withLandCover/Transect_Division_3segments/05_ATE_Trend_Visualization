/*
  Introduction:
  1) Extract pixels close to the annual ATEI-weighted average elevation in the annually identified ATE within each transect. 
  2) Visualize and blend the ATEI, qualified pixels, and the transect outline into an image collection.
  
  Update: 2/19/2021.
*/


/* Load datasets. */

// Set the work directory.
var wd = "users/treeline/NorthAmerica_GME/";

// Set the path of annual divides.
var dvdPath = wd + 
  "Transects/" +
  "SelectedHybas4Basins_closedForestsLowerSlopeValley_nonForestedUpperSlope/" +
  "CenterLines/AnnualDivides_AnnualATEI_Pt307toPt507/";

// Transects with the annual ATE elevations.
var transects = ee.FeatureCollection(dvdPath +
  "AnnualVars_allTrends_gte10obs");

print("transects:", transects.first(), 
  transects.size()) // 187486.

// Complete dataset of transects.
var completeTran = ee.FeatureCollection(wd + 
  "Transects/" +
  "SelectedHybas4Basins_closedForestsLowerSlopeValley_nonForestedUpperSlope/" +
  "CenterLines/" +
  "Combined_CenterLines").map(function(f) {
    return f.buffer(45);
  });

// ALOS elevation.
var ALOSelv = ee.Image('JAXA/ALOS/AW3D30/V2_2').select('AVE_DSM')
  .reproject({
    crs: "EPSG:4326",
    scale: 30
  });

// Annual ATEIs.
var ATEI_1 = ee.Image(wd +
  "Annual_ATEI/ATEI_medianSmdAnlMaxAvgNDVIs_1984to1999");
var ATEI_2 = ee.Image(wd +
  "Annual_ATEI/ATEI_medianSmdAnlMaxAvgNDVIs_2000to2019");

var ATEI = ATEI_1.addBands(ATEI_2);

// print(ATEI.projection().crs(), ATEI.projection().nominalScale())

// DOQQ image.
var DOQQ = ee.ImageCollection('USDA/NAIP/DOQQ')
  .filter(ee.Filter.date('2017-01-01', '2018-12-31'))
  .select(['R', 'G', 'B'])
  .median();

// Function to read the annual divides.
function readAnnualDvd(year) {
  return ee.FeatureCollection(dvdPath + "AnnualDivides_" + year)
    .set("Year", year);
}

// Read the divides of 1984-2019.
var annualDivides = ee.FeatureCollection([]);

var annualDvd;

for (var year = 1984; year <= 2019; year ++) {
  annualDvd = readAnnualDvd(year);
  // annualDivides = annualDivides.merge(annualDvd);
  annualDivides = ee.FeatureCollection(annualDivides, annualDvd);
}

print("annualDivides:", annualDivides.first())


/* Extract pixels close to the annual ATEI-weighted average elevation. */

// Set a threshold of the distance to the average elevation.
var diffThres = 50;

// Function to extract the pixels with the ATE elevation.
function extractATEpixels(currentYear, previousResult) {
  // When convert a "floating point" to a "string", the result contains a ".", which isn't allowed in band names.
  var yearName = ee.String(ee.Number(currentYear).int());
  
  // Get the name of the ATEI-weighted average elevation.
  var elvName = ee.String("ATE_").cat(yearName);
  
  // Create an image of the annual elevation.
  var annualElv = transects.reduceToImage({
    properties: [elvName], 
    reducer: ee.Reducer.first().setOutputs([elvName])
  });
  
  // Absolute distance to the average elevation.
  var elvDiff = ALOSelv.subtract(annualElv).abs();
  
  // Extract the qualified pixels.
  var extracted = elvDiff.lte(diffThres).selfMask()
    .rename(elvName);
  
  // Add the result to the previous image.
  var combinedImg = ee.Image(previousResult).addBands(extracted);
  
  return combinedImg;
}

// Function to extract the pixels with the transect elevation.
function extractWAEpixels(currentYear, previousResult) {
  // When convert a "floating point" to a "string", the result contains a ".", which isn't allowed in band names.
  var yearName = ee.String(ee.Number(currentYear).int());
  
  // Get the name of the ATEI-weighted average elevation.
  var elvName = ee.String("wAE_").cat(yearName);
  
  // Create an image of the annual elevation.
  var annualElv = transects.reduceToImage({
    properties: [elvName], 
    reducer: ee.Reducer.first().setOutputs([elvName])
  });
  
  // Absolute distance to the average elevation.
  var elvDiff = ALOSelv.subtract(annualElv).abs();
  
  // Extract the qualified pixels.
  var extracted = elvDiff.lte(diffThres).selfMask()
    .rename(elvName);
  
  // Add the result to the previous image.
  var combinedImg = ee.Image(previousResult).addBands(extracted);
  
  return combinedImg;
}

// Years of interest.
var yearList = ee.List.sequence(1984, 2019);

// Extract the qualified pixels and combine them with the ATEI image.
var extractedATE_ATEI = ee.Image(yearList.iterate({
  function: extractATEpixels, 
  first: ATEI
})).reproject({
  crs: "EPSG:4326",
  scale: 30
});

// print("extractedATE_ATEI:", extractedATE_ATEI.bandTypes(),
//   extractedATE_ATEI.projection().crs(),
//   extractedATE_ATEI.projection().nominalScale())

var extractedPx_ATEI = ee.Image(yearList.iterate({
  function: extractWAEpixels, 
  first: extractedATE_ATEI
})).reproject({
  crs: "EPSG:4326",
  scale: 30
});

// print("extractedPx_ATEI:", extractedPx_ATEI.bandTypes(),
//   extractedPx_ATEI.projection().crs(),
//   extractedPx_ATEI.projection().nominalScale())


/* Visualize and blend the ATEI, qualified pixels, and the transect outline into an image collection. */

// Visualization parameters.
var ATEI_opacity = 0.5;
var wAE_opacity = 0.5;

// var PiYG = ["8e0152","c51b7d","de77ae","f1b6da","fde0ef","f7f7f7","e6f5d0","b8e186","7fbc41","4d9221","276419"].reverse();
var spectral = ["9e0142","d53e4f","f46d43","fdae61","fee08b","ffffbf","e6f598","abdda4","66c2a5","3288bd","5e4fa2"].reverse();
var RWB = "0000FF, FFFFFF, FF0000";
var BW = "000000, FFFFFF";

// ATEI.
var ATEIvisParams = {min: 0, max: 1, palette: RWB};
var ATEIvisParams_blend = {min: 0, max: 1, palette: RWB, opacity: ATEI_opacity};

// ATE elevation.
var ATEvisParams = {palette: "228B22"};
var ATEvisParams_blend = {palette: "228B22"};

// Transect elevation.
var wAEvisParams = {palette: "FFFF00", opacity: wAE_opacity};
var wAEvisParams_blend = {palette: "FFFF00", opacity: wAE_opacity};

var trendVisParams = {min: -1, max: 1, palette: RWB};
// var trendVisParams_noLF = {min: -1, max: 1, palette: RWB};

var pointColor = "00FFFF";

var DOQQvis = {
  min: 0.0,
  max: 255.0,
};

// Visualize the transect outline with the ATE elevation trend.
var emptyDouble = ee.Image().double();

var ATETrnd_OL = emptyDouble
  .paint({
    featureCollection: transects, 
    color: "ATETrnd", 
    width: 3
  });

var visualizedOutlines = ATETrnd_OL.visualize(trendVisParams);

// Use the DOQQ image as a background.
var visualizedDOQQ = DOQQ.visualize(DOQQvis);

// Blend and visualize the images.
var blended_IC = ee.ImageCollection.fromImages(yearList.map(function(year) {
  // When convert a "floating point" to a "string", the result contains a ".", which isn't allowed in band names.
  var yearName = ee.String(ee.Number(year).int());
  
  // Get the annual ATEI name.
  var ATEIname = ee.String("ATEI_").cat(yearName);
  
  // Get the name of the ATE elevation.
  var ATEname = ee.String("ATE_").cat(yearName);
  
  // Get the name of the transect elevation.
  var wAEname = ee.String("wAE_").cat(yearName);
  
  // Image visualization.
  var visualizedATEI = extractedPx_ATEI.select(ATEIname)
    .visualize(ATEIvisParams_blend);
  
  var visualizedATE = extractedPx_ATEI.select(ATEname)
    .visualize(ATEvisParams_blend);
  
  var visualizedWAE = extractedPx_ATEI.select(wAEname)
    .visualize(wAEvisParams_blend);
  
  // Blend the ATEI, qualified pixels, and the transect outline.
  var blended = visualizedDOQQ.blend(visualizedATEI)
    .blend(visualizedATE)
    .blend(visualizedWAE)
    .blend(visualizedOutlines);
  
  return blended;
}));

// Add an empty image at the end of the image collection.
blended_IC = blended_IC.merge(ee.Image.constant(0.5).visualize(ATEIvisParams));

// print(blended_IC)
// print(blended_IC.first().projection().crs(), blended_IC.first().projection().nominalScale()) // No need to reprojection.


/* Function definition. */

// Function to define parameters for creating an animation.
function defineParams(pt) {
  var thumbParams = {
    dimensions: 512,
    region: pt.buffer(1e3),
    framesPerSecond: 2,
    crs: 'EPSG:3857'
  };
  
  return thumbParams;
}

// Function to extract the ATE elevation trend at the clicked point.
function extractTrend(pt) {
  var selectedTransects = transects.filterBounds(pt);
  
  var extractedTrend = ee.Algorithms.If({
    condition: selectedTransects.size().neq(0), 
    trueCase: ee.Number(selectedTransects.first().get("ATETrnd")).format("%.3f"), // Round the result to three decimals.
    falseCase: "no selected transect"
  });
  
  return extractedTrend;
}


/* Create a zoom box to show a detailed information around the clicked point. */

// CSS styles.
var titleStyle = {
  fontWeight: 'bold',
  fontSize: "20px",
  padding: "0px 2px",
  stretch: 'horizontal',
  textAlign: 'center',
  color: '228B22'
};

var instroStyle = {
  fontSize: "15px",
  padding: "0px 2px",
  stretch: 'horizontal',
  textAlign: 'left',
  color: 'gray'
};

// An empty panel to hold all the widgets.
var zoomBox = ui.Panel({
  style: {
    width: "520px",
    border: '3px solid #228B22'
  }
});

// Title.
var zoomTitle = ui.Label({
  value: 'Estimated Local ATE Dynamics', 
  style: titleStyle
});

var zoomIntro1 = ui.Label({
  value: 'Please select an year of interest (1984-2019) and click on the map to extract the local information.', 
  style: instroStyle
});

var zoomIntro2 = ui.Label({
  value: '1) The detected ATE is shown in red.', 
  style: instroStyle
});

var zoomIntro3 = ui.Label({
  value: '2) Pixels close to the estimated ATE elevation are displayed in yellow.', 
  style: instroStyle
});

// Year slider.
var defaultYear = 2000;

var yearSlider = ui.Slider({
  min: 1984, 
  max: 2019, 
  value: defaultYear, 
  step: 1, 
  onChange: function(year) {
    var ATEI_layer = ui.Map.Layer(extractedPx_ATEI.select("ATEI_" + year), 
      ATEIvisParams, "ATEI in " + year, true, ATEI_opacity);
    var ATE_layer = ui.Map.Layer(extractedPx_ATEI.select("ATE_" + year), 
      ATEvisParams, "ATE elevation in " + year + " (turn off when zoom out)");
    var wAE_layer = ui.Map.Layer(extractedPx_ATEI.select("wAE_" + year), 
      wAEvisParams, "Transect elevation in " + year + " (turn off when zoom out)");
    
    map.layers().set(0, ATEI_layer);
    map.layers().set(2, ATE_layer);
    map.layers().set(3, wAE_layer);
  },
  style: {stretch: "horizontal"}
});

// Determine a default point.
var point = ee.Geometry.Point([-113.93139, 48.88857]);

// Create an animation of ATEI around the clicked point.
var thumbNail = ui.Thumbnail(blended_IC, defineParams(point));

// Extract the local elevation trend.
var trendLabel = ui.Label("Local estimated ATE elevation trend (m/year): " + 
  extractTrend(point).getInfo());

var zoomInfo = ui.Panel().add(trendLabel).add(thumbNail);

// Add widgets to the zoom box.
zoomBox.add(zoomTitle);
zoomBox.add(zoomIntro1);
zoomBox.add(zoomIntro2);
zoomBox.add(zoomIntro3);
zoomBox.add(yearSlider);
zoomBox.add(zoomInfo);


/* Visualization on the map. */

var map = ui.Map();

// Create a split panel for the map and the zoom box.
var splitPanel = ui.SplitPanel({
  firstPanel: map,
  secondPanel: zoomBox,
});

map.style().set("cursor", "crosshair");
map.setOptions("HYBRID");
map.centerObject(point, 14);

// Add layers of interest.
map.addLayer(extractedPx_ATEI.select("ATEI_" + defaultYear), 
  ATEIvisParams, "ATEI in " + defaultYear, true, ATEI_opacity);

map.addLayer(completeTran, {color: "00FF00"}, "All transects");

map.addLayer(extractedPx_ATEI.select("ATE_" + defaultYear), 
  ATEvisParams, "ATE elevation in " + defaultYear + " (turn off when zoom out)");

map.addLayer(extractedPx_ATEI.select("wAE_" + defaultYear), 
  wAEvisParams, "Transect elevation in " + defaultYear + " (turn off when zoom out)");

map.addLayer(visualizedOutlines, {}, "ATE elevation trend"); // Add outlines to show the color when zoomed out.

map.addLayer(point, {color: pointColor}, "Clicked point");

// Set the top layer.
var topLayer = 5;

map.onClick(function(coordinates){
  var point = ee.Geometry.Point([coordinates.lon, coordinates.lat]);
  var thumbNail = ui.Thumbnail(blended_IC, defineParams(point));
  var trendLabel = ui.Label("Local estimated ATE elevation trend (m/year): " + 
    extractTrend(point).getInfo());

  map.centerObject(point, 14);
  
  zoomInfo.clear();
  zoomInfo.add(trendLabel).add(thumbNail);
  
  var clicked = ui.Map.Layer(point, {color: pointColor}, "Clicked point");
  map.layers().set(topLayer, clicked);
});

ui.root.clear();
ui.root.add(splitPanel);

