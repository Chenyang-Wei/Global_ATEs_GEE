/**
 * Introduction:
 * 1) Extract the coordinates of pixels over the optimal ATEI threshold
 *  along each transect center line in each year.
 * 2) Group each set of the adjacent extracted pixels into one ATE segment 
 *  through a buffering operation.
 * 3) Select transect center lines with only one segment for each year.
 * 4) Output the variables of interest for all the annual segments.
 * 
 * Update: 4/6/2021.
 * 
 * Runtime: No result after 8 days.
*/


/* Data preparation. */

// A target projection system.
var targetPrj = {
  crs: "EPSG:4326", 
  scale: 30
};

// Set the working directory.
var wdNA = "users/treeline/NorthAmerica_GME/";

// Load the transect center lines.
var centerLines = ee.FeatureCollection(wdNA + 
  "Transect_Analysis/" + 
  "TransectCL_withID_20210405");
  // .limit(20) // Testing.

// print("centerLines:", centerLines.first(), // With ID.
//   centerLines.size()) // 703172.

// Function to print the image information.
function printImgInfo(name, image) {
  print(name,
    image.bandTypes(),
    image.projection().crs(),
    image.projection().nominalScale());
}

// Annual ATEIs based on the annual maximum NDVIs (cloud masked and biome involved).
var annualATEI = ee.Image(wdNA +
  "ATEI_Estimation/AnnualATEI_1984to2020_Biomes356_medianSmdAnnualMaxNDVI_meanSmdElv_newCATE_AOI");

// printImgInfo("annualATEI:", annualATEI)


/* Create an ATEI mask over the optimal threshold. */

// An optimal ATEI threshold with the highest Youden Index 
//  of the validation dataset (over 1000 samples).
var threshold = 0.4329;

// Create an ATEI mask over the threshold.
var ATEImask = annualATEI.gt(threshold);

// printImgInfo("ATEImask:", ATEImask)

// Generate an image of coordinates with the target projection.
var coords = ee.Image.pixelLonLat()
  .reproject(targetPrj);

// printImgInfo("coords:", coords)


/* Function definition. */

// Function to generate annual ATE segments along each center line.
var buf = 30;

function generateSegments(CL) {
  // Extract the coordinate lists of pixels over the threshold.
  var longList = ee.List(CL.get("longitude"));
  var latList = ee.List(CL.get("latitude"));
  
  var longLat = longList.zip(latList);
  
  // Total number of the extracted pixels.
  var pxCount = longLat.size();
  
  // Create an ATE segment for each set of the adjacent extracted pixels.
  var segments = ee.Geometry.MultiPoint(longLat)
    .buffer(buf)
    .intersection(CL.geometry());
  
  // Get the geometry type of the ATE segments.
  var segType = segments.type();
  
  // Copy and set the variables of interest.
  segments = ee.Feature(segments).copyProperties({
    source: CL, 
    exclude: ["latitude", "longitude"] // List-typed properties can not be exported to the Asset.
  }).set({
    pxCount: pxCount,
    segType: segType
  });
  
  return segments;
}


/* Generate ATE segments and corresponding VOIs by year. */

var yearList = ee.List.sequence(1984, 2020);

var ATEsegments = yearList.map(function(year) {
  // Extract the qualified pixel coordinates in each year.
  var yearString = ee.String(ee.Number(year).int());
  var annualATEImask = ATEImask.select(ee.String("ATEI_").cat(yearString));
  var annuallyMaskedCoords = coords.updateMask(annualATEImask);
  
  // Extract the annual qualified pixel coordinates along each center line.
  var annualCLcoords = ee.FeatureCollection(centerLines.map(function extractCLcoords(CL) {
    var CLcoords = annuallyMaskedCoords.reduceRegions({
      collection: CL, 
      reducer: ee.Reducer.toList(), 
      scale: 30,
      crs: "EPSG:4326"
    });
    
    return CLcoords;
  })).flatten();

  // Remove center lines with no qualified pixel.
  annualCLcoords = annualCLcoords.filter(ee.Filter.and(
    ee.Filter.neq("longitude", []),
    ee.Filter.neq("latitude", [])
  ));
  
  // Generate annual ATE segments along each center line.
  var generatedSegs = annualCLcoords.map(generateSegments);
  
  // Remove center lines with multiple ATE segments in one year 
  //  (The geometry type should NOT be "MultiLineString").
  var selectedSegs = generatedSegs.filter(ee.Filter.eq("segType", "LineString"));
  
  // Generate the variables of interest for each selected ATE segment.
  var annualSegs = selectedSegs.map(function generateVOIs(seg) {
    // Get the length of the annual ATE segment.
    var ATEsegLen = seg.length();
    
    // Extract the coordinates of segment end points.
    var segCoords = seg.geometry().coordinates();
    
    var endPt1 = ee.List(segCoords.get(0));
    var endPt2 = ee.List(segCoords.get(1));
    
    var endPt1Long = endPt1.get(0);
    var endPt1Lat = endPt1.get(1);
    
    var endPt2Long = endPt2.get(0);
    var endPt2Lat = endPt2.get(1);
    
    // Set the variables of interest.
    var ATEseg = seg.set({
      ATEsegLen: ATEsegLen,
      
      endPt1Long: endPt1Long,
      endPt1Lat: endPt1Lat,
      
      endPt2Long: endPt2Long,
      endPt2Lat: endPt2Lat,
      
      Year: year
    });
    
    return ATEseg;
  });
  
  return annualSegs;
});

// Convert the result to a feature collection.
ATEsegments = ee.FeatureCollection(ATEsegments).flatten();

// print("ATEsegments:", ATEsegments.limit(10),
//   ATEsegments.size(),
//   ATEsegments.geometry().projection().crs())


if (false) {
  // Visualize the result.
  Map.setOptions("HYBRID");
  Map.centerObject(ATEsegments.first(), 15);
  
  Map.addLayer(annualATEI.select("ATEI_1984"), {palette: "0000FF, FFFFFF, FF0000"},
    "ATEI_1984", true, 0.5);
  Map.addLayer(centerLines, {color: "00FF00"}, "centerLines");
  Map.addLayer(ee.Feature(ATEsegments.first()), {color: "FFFF00"}, "ATEsegments");

} else {
  // Output the result to the Asset.
  var fileName = "TransectCL_annualSegments_ATEIgtPt4329";
  
  Export.table.toAsset({
    collection: ATEsegments, 
    description: fileName, 
    assetId: wdNA + 
      "Transect_Analysis/" + 
      fileName
  });
}

