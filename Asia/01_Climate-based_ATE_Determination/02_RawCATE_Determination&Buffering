/**
 * Introduction: 
 * 1) Downscale the climatically estimated treeline elevation (V1.2 CHELSA TLH dataset)
 *  from 30 arc-second to 30 m.
 * 2) Calculate the average climatic treeline elevation from 1979 to 2013 within
 *  the "Global Mountain Explorer (GME) K3" mountain ranges.
 * 3) Extract the region within a vertical distance to the temporal average climate treeline elevation 
 *  at the 30-m level as the raw climate-based ATE (CATE).
 * 4) Determine a surrounding region of the extracted raw CATE.
 * 
 * Update: 6/2/2021.
 * 
 * Runtime: 20h.
*/


/* Load and reproject the required dataset(s). */

// Set the 10-km buffered bounding box of the study domain.
//  (Note: the maximum longitude is set to 180 degrees.)
var asiaAOI = ee.Geometry.Rectangle({
  coords: [[25.070944865790178,-12.370472853749458],
    [180,81.37103685520522]],
  geodesic: false
});

// Target projection.
var targetPrj = {
  crs: "EPSG:4326",
  scale: 30
};

// Set the working directories.
var wdGlobal = "users/treeline/Global/";
var wdGME = wdGlobal + "Global_Mountain_Explorer/";
var wdAsia = "users/RealEarth/Asia_ATE/";

// Function to print the image information.
function printImgInfo(name, image) {
  print(name,
    image.bandTypes(),
    image.projection().crs(),
    image.projection().nominalScale());
}

// Global Mountain Explorer K3 Binary dataset.  
var k3Binary = ee.Image(wdGME +
  "k3binary")
  .reproject(targetPrj);

// printImgInfo("k3Binary:", k3Binary)

// ALOS elevation (Version 3.2, released in January 2021) in the AOI.
var ALOSelv = ee.ImageCollection('JAXA/ALOS/AW3D30/V3_2').select('DSM')
  .filterBounds(asiaAOI)
  .mosaic()
  .reproject(targetPrj);

// printImgInfo("ALOSelv:", ALOSelv)

// Load the 30-arcsec Chelsa climatically estimated treeline elevation dataset.
var chelsa_tlh = ee.Image(wdGlobal + "Global_CHELSA_TLH_V1_2/" +
  "Stacked_CHELSA_v12_TLH_1979to2013_10000pixels_NAinterpolated_Predictor2_Zlevel9_DeflateCompressed");

// printImgInfo("chelsa_tlh:", chelsa_tlh)

// Read the 30-arcsec GMTED (Global Multi-resolution Terrain Elevation Data) dataset.
var gmted = ee.Image(wdGlobal + "GMTED/GMTED2010_30arcsec")
  .reproject({
    crs: chelsa_tlh.projection().crs(),
    scale: chelsa_tlh.projection().nominalScale()
  });

// printImgInfo("gmted:", gmted)


/* Temporal average the annual climatic treeline elevations. */

// Reproject the CHELSA treeline elevation to the 30-m level.
var TLHreprj = ee.ImageCollection.fromImages(
  chelsa_tlh.bandNames().map(function(b){
    // Select the CHELSA treeline elevation in each year.
    var tlh = chelsa_tlh.select([b]);
    
    // Calculate the absolute treeline height at 30 arcsec.
    var height = tlh.add(gmted);
    // add(): Only the intersection of unmasked pixels between the two inputs of the operation 
    //  are considered and returned as unmasked, all else are masked.
    
    // Downscale the absolute treeline height from 30 arc-secoonnd to 30 m
    //  by using the "bilinear" resampling algorithm.
    var heightReprj = height.resample("bilinear")
      .reproject(targetPrj);
    
    // Rename the reprojected treeline elevation.
    return heightReprj.rename("TLH");
  })
);

// print("TLHreprj (image collection)",
//   TLHreprj,
//   TLHreprj.first().projection().crs(),
//   TLHreprj.first().projection().nominalScale());

// Calculate the temporal average treeline elevation from 1979 to 2013
//  at the 30-m level.
var avgTLH = TLHreprj.mean()
  .reproject(targetPrj);

// printImgInfo("avgTLH:", avgTLH)

// Extract the temporal average treeline elevation within the GME K3 mountain ranges.
avgTLH = avgTLH.updateMask(k3Binary);


/* Extract the raw CATE within an absolute vertical distance 
  to the temporal average treeline elevation. */ 

// Calculate the absolute vertical distance to the average treeline elevation.
var absTLHdist = avgTLH.subtract(ALOSelv).abs(); 

// Extract the raw CATE within a certain distance.
var CATEthres = 500; // In meters.

var rawCATE = absTLHdist.lte(CATEthres);

// printImgInfo("rawCATE:", rawCATE)


/* Determine a surrounding region of the extracted CATE. */

// Determine the size of neighborhood for distance calculation.
var neighborhood = 200; // Number of 30-m pixels.

// Calculate the distance to the raw CATE 
//  (i.e., the nearest non-zero valued pixel in the input) 
//  at each pixel within the given neighborhood size, 
//  regardless of the input's mask.
var surroundingDist = rawCATE.fastDistanceTransform({
  neighborhood: neighborhood,
  units: "pixels",
  metric: "squared_euclidean"
}).sqrt() // Get the distance in the number of 30-m pixels.
  .reproject(targetPrj);

// printImgInfo("surroundingDist:", surroundingDist)

// Threshold of the horizontal distance for the surrounding region.
var surroundingThres = 100; // Number of 30-m pixels.

// Identify the surrounding area.
var surroundingArea = surroundingDist.lte(surroundingThres)
  .selfMask();

// printImgInfo("surroundingArea:", surroundingArea)


/* Export the result. */

if (true) {
  var fileName = "3kmBuffered_30mRawCATE_" + CATEthres + "mToAvgTLH_Asia";

  Export.image.toAsset({
    image: surroundingArea,
    description: fileName, 
    assetId: wdAsia + "Climate-Based_ATE/"
      + fileName, 
    crs: "EPSG:4326",
    scale: 30,
    region: asiaAOI,
    maxPixels: 1e13
  }); 
}

