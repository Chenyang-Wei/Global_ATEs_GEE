/**
 * Introduction:
 * 1) Combine the elevational-NDVI-gradient trend of each transect
 *  with the temporal NDVI variables of the corresponding
 *  lower and upper segments.
 * 
 * Update: 12/16/2021.
 * 
 * Runtime:
 */


/* Load module(s). */

var GATE = require("users/ChenyangWei/Public:Modules/Global_ATE");
var TNA = require("users/ChenyangWei/Public:Modules/Transect_NDVI_Analysis");
var FC_AP = require("users/ChenyangWei/Public:Modules/FeatureCollection_Analysis&Processing");


/* Data and function preparation. */

// Set the major working directory.
var wd_Main = GATE.wd_Asia;


/* Operations by Asian AOI (1 ~ 6). */

for (var AOI_ID = 1; AOI_ID <= 6; AOI_ID ++) {
  
  // Set the working directory of the AOI.
  var wd_AOI = wd_Main
    + "Transect_NDVI_Analysis/"
    + "AOI_Asia_" + AOI_ID
    + "/";
  
  // Determine the universal file path of
  //  the transects with the elevational-NDVI-gradient trends.
  var wd_Transects = wd_AOI
    + TNA.elvNDVIgradientTrends_Lte10km_fileName
    + "/"
    + TNA.gradientTrends_byBasinGroup_fileName;
  
  // Determine the universal file path of
  //  the lower and upper segments with the temporal NDVI variables.
  var wd_LowerSegments = wd_AOI
    + TNA.lowerSegments_NDVItVars_fileName
    + "/"
    + TNA.lowerNDVItVars_byBasinGroup_fileName;
  
  var wd_UpperSegments = wd_AOI
    + TNA.upperSegments_NDVItVars_fileName
    + "/"
    + TNA.upperNDVItVars_byBasinGroup_fileName;
  
  
  /* Operations by basin group (1 ~ 5). */
  
  for (var basinGroupID = 1; basinGroupID <= 5; basinGroupID ++) {
    
    // Load the transects with the elevational-NDVI-gradient trends.
    var transects = ee.FeatureCollection(wd_Transects
      + basinGroupID);
    
    // Load the lower and upper segments with the temporal NDVI variables.
    var lowerSegments = ee.FeatureCollection(wd_LowerSegments
      + basinGroupID);
    
    var upperSegments = ee.FeatureCollection(wd_UpperSegments
      + basinGroupID);
    
    
    /* Combine the elevational-NDVI-gradient trend of each transect
      with the temporal NDVI variables of the corresponding
      lower and upper segments. */
    
    // Remove the unnecessary properties from each type of segments.
    var unnecessaryPrpts = ["Hybas_ID", "SegmentID"];
    
    var lowerSegments_PrptsRemoved = FC_AP.FtrCol_PropertyRemoval(lowerSegments, unnecessaryPrpts);
    
    var upperSegments_PrptsRemoved = FC_AP.FtrCol_PropertyRemoval(upperSegments, unnecessaryPrpts);
    
    // Rename the property of the observation numbers for the transects.
    var transects_PrptRenamed = FC_AP.FtrCol_PropertyRename(transects, 
      ["yearCount"], ["gradYears"]);
    
    // Rename the property of the observation numbers for each type of segments.
    var prptToRename_Segments = ["count_Year"];
    
    var lowerSegments_PrptRenamed = FC_AP.FtrCol_PropertyRename(lowerSegments_PrptsRemoved, 
      prptToRename_Segments, ["lower_Years"]);
    
    var upperSegments_PrptRenamed = FC_AP.FtrCol_PropertyRename(upperSegments_PrptsRemoved, 
      prptToRename_Segments, ["upper_Years"]);
    
    // Combine each transect with the corresponding lower and upper segments.
    var transects_LowerSegments = FC_AP.combine_twoFtrCols_byCommonProperty(
      transects_PrptRenamed, lowerSegments_PrptRenamed, "CL_newID"
    );
    
    var transects_LowerUpperSegments = FC_AP.combine_twoFtrCols_byCommonProperty(
      transects_LowerSegments, upperSegments_PrptRenamed, "CL_newID"
    );
    
    
    if (true) { //// true OR false.
    
      print("transects_PrptRenamed:",
        transects_PrptRenamed.first(),
        transects_PrptRenamed.size());
    
      print("lowerSegments_PrptRenamed:",
        lowerSegments_PrptRenamed.size());
    
      print("upperSegments_PrptRenamed:",
        upperSegments_PrptRenamed.size());
    
    } else { //// Export the result(s).
      
      var wd_Output = wd_AOI
        + TNA.transects_LowerUpperSegments_fileName
        + "/";
      
      var fileName = TNA.TLUs_byBasinGroup_fileName
        + basinGroupID;
      
      Export.table.toAsset({
        collection: transects_LowerUpperSegments, 
        description: fileName, 
        assetId: wd_Output
          + fileName
      });
    }
  }
}

