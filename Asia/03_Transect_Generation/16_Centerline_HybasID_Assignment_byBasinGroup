/**
 * Introduction:
 * 1) Assign the Hybas ID of each centerline centroid
 *  to the centerline that shares the same "CL_newID"
 *  and drop the old centerline ID of that centerline
 *  by basin group.
 * 
 * Update: 10/22/2021.
 * 
 * Runtime: 10m ~ 2h.
 */


/* Load module(s). */

var GATE = require("users/ChenyangWei/Public:Modules/Global_ATE");


/* Data and function preparation. */

// Set the major working directory.
var wd_Main = GATE.wd_Asia 
  + "Elevational_Transect_Generation/";

// Load the raw transect centerlines.
var rawCLs = ee.FeatureCollection(wd_Main
  + GATE.rawCLs_AllBasinGroups_fileName);

// Check the loaded data.
var check = false; // true OR false.

if (check) {
  print("rawCLs:", 
    rawCLs.first(),
    rawCLs.size());
}


/* Operations by Asian AOI (1 ~ 6). */

for (var AOI_ID = 1; AOI_ID <= 6; AOI_ID ++) {
  
  // Set the working directory of the AOI.
  var wd_AOI = wd_Main
    + "AOI_Asia_" + AOI_ID + "/";
  
  // Determine the universal file path of the centerline centroids with Hybas IDs.
  var wd_Centroids = wd_AOI
    + GATE.CLcentroids_withHybasIDs_fileName
    + "/"
    + GATE.CLcentroids_withHybasIDs_byBasinGroup_fileName;
  
  
  /* Operations by basin group (1 ~ 5). */
  
  for (var basinGroupID = 1; basinGroupID <= 5; basinGroupID ++) {
    
    // Load the centerline centroids with Hybas IDs of each basin group.
    var CLcentroids_withHybasIDs = ee.FeatureCollection(wd_Centroids
      + basinGroupID);
    

    /* Assign the Hybas ID of each centerline centroid
      to the centerline that shares the same "CL_newID"
      and drop the old centerline ID of that centerline. */
    
    var CLs_withHybasIDs = 
      GATE.assignHybasIDs_toFeatures_byCLnewID_and_DropCLoldID(
        rawCLs, CLcentroids_withHybasIDs);

    
    if (check) {
      print("basinGroupID:", basinGroupID);
    
      print("CLcentroids_withHybasIDs:", 
        CLcentroids_withHybasIDs.first());
      
      print("CLs_withHybasIDs:", 
        CLs_withHybasIDs.first());
    
    } else {
      //// Export the results by basin group.
      var wd_Output = wd_AOI
        + GATE.CLs_withHybasIDs_fileName
        + "/";
      
      var fileName = GATE.CLs_withHybasIDs_byBasinGroup_fileName
        + basinGroupID;
      
      Export.table.toAsset({
        collection: CLs_withHybasIDs, 
        description: fileName, 
        assetId: wd_Output + fileName
      });
    }
  }
}

