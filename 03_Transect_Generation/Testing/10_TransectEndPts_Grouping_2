/**
 * Introduction:
 * 1) Group the transect endpoints.
 * 
 * Update: 9/7/2021.
 * 
 * Runtime: m.
 */


/* Load module(s). */
var IMG = require("users/ChenyangWei/Public:Modules/Image_Analysis&Processing");
var GATE = require("users/ChenyangWei/Public:Modules/Global_ATE");
var VIS = require("users/ChenyangWei/Public:Modules/Visualization");


/* Data preparation. */

// Working directory.
var wd_Main = GATE.wd_Europe;

// Target projection.
var targetPrj = IMG.WGS84_30m;

// Load the lowest lower closed-forest point within each medial axis buffer.
var CFpts = ee.FeatureCollection(wd_Main + "Temp_2/" // Testing.
  + GATE.CFpts_fileName);

// Load the highest upper non-forested point within each medial axis buffer.
var NonFpts = ee.FeatureCollection(wd_Main + "Temp_2/" // Testing.
  + GATE.NonFpts_fileName);


/* Group the transect endpoints. */

var groupDist = 90;

// Buffer each endpoint.
var buffered_NonFpts = NonFpts.map(function(pt) {
  return pt.buffer(groupDist);
}).union();

var buffered_CFpts = CFpts.map(function(pt) {
  return pt.buffer(groupDist);
}).union();

// Convert each multiPolygon to a set of polygons.
var buffered_NonFpts_Plgs = ee.FeatureCollection(buffered_NonFpts.first().geometry().coordinates().map(function(coords) {
  var plg = ee.Geometry.Polygon(coords);
  
  return ee.Feature(plg);
}));

var buffered_CFpts_Plgs = ee.FeatureCollection(buffered_CFpts.first().geometry().coordinates().map(function(coords) {
  var plg = ee.Geometry.Polygon(coords);
  
  return ee.Feature(plg);
}));


/* Group all the endpoints that intersect each buffer. */

// Define a spatial filter as geometries that intersect.
var spatialFilter = ee.Filter.intersects({
  leftField: ".geo",
  rightField: ".geo"
});

// Define a save all join.
var saveAllJoin = ee.Join.saveAll({
  matchesKey: "grouped_Pts",
});

// Apply the join.
var NonFpts_grouped = saveAllJoin.apply(buffered_NonFpts_Plgs, NonFpts, spatialFilter);

var CFpts_grouped = saveAllJoin.apply(buffered_CFpts_Plgs, CFpts, spatialFilter);


// Get the centroid and the ID list of each group of endpoints.
var NonFpts_grouped_Ctds = NonFpts_grouped.map(function(group) {
  var grouped_Pts = ee.FeatureCollection(ee.List(group.get("grouped_Pts")));
  
  var ctd = grouped_Pts.geometry().centroid();
  
  var ptID_list = grouped_Pts.aggregate_array("Buffer_ID");
  
  return ee.Feature(ctd).set("NonFptID_list", ptID_list);
});

var CFpts_grouped_Ctds = CFpts_grouped.map(function(group) {
  var grouped_Pts = ee.FeatureCollection(ee.List(group.get("grouped_Pts")));
  
  var ctd = grouped_Pts.geometry().centroid();
  
  var ptID_list = grouped_Pts.aggregate_array("Buffer_ID");
  
  return ee.Feature(ctd).set("CFptID_list", ptID_list);
});


// print("NonFpts_grouped_Ctds", 
//   NonFpts_grouped_Ctds.first(), 
//   NonFpts_grouped_Ctds.size())

// print("CFpts_grouped_Ctds", 
//   CFpts_grouped_Ctds.first(),
//   CFpts_grouped_Ctds.size())


/* Connect the two types of points with the same ID. */

var lineString = ee.FeatureCollection(CFpts_grouped_Ctds.map(function(CF_ptGroup) {
  // Get a list of the IDs of the grouped closed forest points.
  var CFptID_list = CF_ptGroup.get("CFptID_list");
  
  var CFpt_Geom = CF_ptGroup.geometry();
  
  var lineString_List = ee.List(CFptID_list).map(function(CFptID) {
    // Extract the non-forested point sharing the same ID.
    var NonF_pt = NonFpts_grouped_Ctds.filter(ee.Filter.listContains({
      leftField: "NonFptID_list", 
      rightValue: CFptID
    })).first();
    
    var NonFpt_Geom = NonF_pt.geometry();
    
    // Connect the closed forest and non-forested points.
    var lsGeom = ee.Geometry.LineString([CFpt_Geom, NonFpt_Geom]);
    
    return ee.Feature(lsGeom);
  });
  
  return ee.FeatureCollection(lineString_List);
}));

lineString = lineString.flatten();

// print("lineString", lineString.first(), lineString.size())


/* Remove the duplicate lineStrings. */

var noDuplicates = lineString.distinct(".geo");


if (false) { // true OR false.

  // Visualization.
  Map.setOptions("satellite");
  
  Map.centerObject(CFpts, 14); 
  
  Map.addLayer(CFpts, {color: "00FF00"}, "CFpts", true);
  
  // Map.addLayer(buffered_CFpts, {color: "008000"}, "buffered_CFpts", true);
  
  Map.addLayer(buffered_CFpts_Plgs, {color: "FF00FF"}, "buffered_CFpts_Plgs", true);
  
  Map.addLayer(CFpts_grouped_Ctds, {color: "darkgreen"}, "CFpts_grouped_Ctds", true);
  
  Map.addLayer(NonFpts, {color: "0000FF"}, "NonFpts", true);
  
  // Map.addLayer(buffered_NonFpts, {color: "000080"}, "buffered_NonFpts", true);
  
  Map.addLayer(buffered_NonFpts_Plgs, {color: "FFFF00"}, "buffered_NonFpts_Plgs", true);
  
  Map.addLayer(NonFpts_grouped_Ctds, {color: "darkblue"}, "NonFpts_grouped_Ctds", true);
  
  Map.addLayer(lineString, {color: "FF0000"}, "lineString", true);
  
} else {
  //// Export the result(s).
  var fileName = "lineString_noDuplicates_" + groupDist +"mGrouped";
  
  Export.table.toAsset({
    collection: noDuplicates, 
    description: fileName, 
    assetId: wd_Main + "Temp_2/" // Testing.
      + fileName
  });
}