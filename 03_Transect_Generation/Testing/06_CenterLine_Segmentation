/**
 * Introduction:
 * 1) Segment the study domain by the centerline between ridge and valley.
 * 2) Segment the study domain by ridge, valley, and their centerline.
 * 
 * Update: 8/13/2021.
 * 
 * Runtime: 54s ~ 1m.
*/


/* Load module(s). */
var IMG = require("users/ChenyangWei/Public:Modules/Image_Analysis&Processing");
var GATE = require("users/ChenyangWei/Public:Modules/Global_ATE");
var VIS = require("users/ChenyangWei/Public:Modules/Visualization");


/* Data preparation. */

// Extract the most detailed (level 12) HydroSHEDS basin.
var POI = ee.Geometry.Point([10.35857, 46.51679]);
var basin = ee.Feature(ee.FeatureCollection("WWF/HydroSHEDS/v1/Basins/hybas_12")
  .filterBounds(POI).first());

// Working directory.
var wd_Temp = "users/ChenyangWei/Temp/";

// Target projection.
var targetPrj = IMG.WGS84_30m;

// Centerline between ridge and valley.
var ridgeValley_CL = ee.Image(wd_Temp + "ridgeValley_centerLine");


/* Segmentation. */

var distParams = {
  neighborhood: 1e3,
  units: "pixels",
  metric: "squared_euclidean" // Get the distance in the squared number of 30-m pixels.
};


// Define a Laplacian, or isotropic-edge-detection kernel.
var laplacian = ee.Kernel.laplacian8({ 
  normalize: false 
});

function segmentation(landform) {
  var LF_dist = landform.fastDistanceTransform(distParams).reproject(targetPrj);
  
  // Apply the Laplacian edge-detection kernel to detect the boundary of the ridge distance.
  var edgy = LF_dist.convolve(laplacian)
    .reproject(targetPrj);

  var segmented = edgy.gt(0);
  
  return segmented;
}

var seg_RVcl = segmentation(ridgeValley_CL)
  .updateMask(ridgeValley_CL.not());

// var CL_dist = ridgeValley_CL.fastDistanceTransform(distParams)
//   .sqrt()
//   .reproject(targetPrj);

// var CL_buf = CL_dist.lte(20);


// Function to extract mountain ridge and valley landforms.
var extractRidges = function(landforms) {
  var ridges = landforms.lte(14);
  
  return ridges;
};

var extractValleys = function(landforms) {
  var valleys = landforms.gte(41);
  
  return valleys;
};


/* Pre-process the ALOS landform dataset. */

// The landform dataset is based on the 30m "AVE" band of JAXA's ALOS DEM 
//  (available in EE as JAXA/ALOS/AW3D30_V1_1).
//  There are stripes of invalid data in areas over 60 degrees in latitude.
var rawLF = ee.Image('CSP/ERGo/1_0/Global/ALOS_landforms').select('constant')
  .reproject(targetPrj);

// Remove the high-latitude stripes of invalid landforms  
//  in the landform dataset (based on the ALOS DEM V1.1).
var ALOSv11 = ee.Image("JAXA/ALOS/AW3D30_V1_1").select("AVE")
  .reproject(targetPrj);

var LF_noInvaid = rawLF.updateMask(ALOSv11.mask());


/* Extract the landforms of mountain ridges both inside and outside the new CATE.
  Including: peak/ridge (warm/normal/cool) and mountain/divide. */

// Extract the mountain ridge pixels.
var ridge = extractRidges(LF_noInvaid);

// Valley.
var valley = extractValleys(LF_noInvaid);

// Ridge or valley or centerline.
var RVorCL = ridge.or(valley).or(ridgeValley_CL); 

var seg_RVorCL = segmentation(RVorCL)
  .updateMask(RVorCL.not());

var medialAxis = ridge.or(valley).selfMask().medialAxis()
  .reproject(targetPrj);

// Extract the distance at the medial axis.
var medial_sqDist = medialAxis.select("medial")
  .updateMask(ridgeValley_CL);

if (false) { // true OR false.
  // Visualization.
  Map.setOptions("satellite");
  
  // Map.centerObject(POI, 14); 
  
  Map.addLayer(seg_RVcl.selfMask(), {palette: "0000FF"}, "seg_RVcl", false);
  
  Map.addLayer(seg_RVorCL.selfMask(), {palette: "FFFF00"}, "seg_RVorCL", false);
  
  Map.addLayer(ridgeValley_CL.selfMask(), {palette: "FF0000"}, "ridgeValley_CL", false);
  
  Map.addLayer(ridge.selfMask(), {palette: "00FFFF"}, "ridge", false);
  
  Map.addLayer(valley.selfMask(), {palette: "00FF00"}, "valley", false);
  
  Map.addLayer(medialAxis.select("medial").sqrt(), 
    {min: 0, max: 50, palette: "00FF00, FFFFFF, FF00FF"}, "medialAxis", false);

  Map.addLayer(medial_sqDist, 
    {min: 0, max: 500, palette: "0000FF, FFFFFF, FFA500"}, "medial_sqDist", true);

  
} else {
  // Output the results.
  Export.image.toAsset({
    image: seg_RVcl,
    description: "segmented_byRVcenterline", 
    assetId: wd_Temp
      + "segmented_byRVcenterline", 
    crs: "EPSG:4326",
    scale: 30,
    region: basin.bounds(),
    maxPixels: 1e13
  }); 
  
  Export.image.toAsset({
    image: seg_RVorCL,
    description: "segmented_byRidgeValleyORcenterline", 
    assetId: wd_Temp
      + "segmented_byRidgeValleyORcenterline", 
    crs: "EPSG:4326",
    scale: 30,
    region: basin.bounds(),
    maxPixels: 1e13
  }); 
  
  Export.image.toAsset({
    image: medial_sqDist,
    description: "medialAxis_centerLine_sqDist", 
    assetId: wd_Temp
      + "medialAxis_centerLine_sqDist", 
    crs: "EPSG:4326",
    scale: 30,
    region: basin.bounds(),
    maxPixels: 1e13
  }); 
}
