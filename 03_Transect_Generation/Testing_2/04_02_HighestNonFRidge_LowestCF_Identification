/**
 * Introduction:
 * 1) Identify the highest non-forested ridge 
 *  and lowest closed forest points 
 *  in each buffer of the medial-axis points.
 * 
 * Update: 9/20/2021.
 * 
 * Runtime: 3m.
 */


/* Load module(s). */

var IMG = require("users/ChenyangWei/Public:Modules/Image_Analysis&Processing");
var GATE = require("users/ChenyangWei/Public:Modules/Global_ATE");


/**** The following section needs to be updated. ****/

// Set the area of interest.
var AOI = GATE.AOI_Alps; // Testing.

// Set the working directory.
var wd_Main = GATE.wd_Europe;

// Set the cloud asset directory.
var cloud_Main = GATE.cloud_Europe;

/**** The section above needs to be updated. ****/


/* Data and function preparation. */

// Load the buffered medial-axis points.
var buffered_MedCtds = ee.FeatureCollection(cloud_Main + "Cloud_Temp/" // Testing.
  + "distBuffered_PxCtds");

// Load the new CATE.
var newCATE = ee.Image(wd_Main + "Climate-Based_ATE/" 
  + GATE.newCATE_fileName);

// Target projection.
var targetPrj = IMG.WGS84_30m;

// Function to read the annual land cover datasets.
var readAnnualLC = GATE.readAnnualCoperLandCover;


/* Extract the landforms of ridges. */

// Load and reproject the ALOS landforms dataset in the new CATE.
var LF_noInvaid_newCATE = GATE.loadReproject_ALOSlandforms(targetPrj)
  .updateMask(newCATE);

// Ridges in the new CATE.
var ridges = GATE.extractRidgeLandforms(LF_noInvaid_newCATE);


/* Obtain the non-forested ridge and closed forest areas
  in the new CATE. */

// Read the Land Cover datasets of 2015-2019.
var landCover = ee.ImageCollection.fromImages([
  readAnnualLC(2015),
  readAnnualLC(2016),
  readAnnualLC(2017),
  readAnnualLC(2018),
  readAnnualLC(2019),
]);

// Extract and reproject the elevation of closed forests 
//   (tree canopy > 70 %) in 2015-2019.
var CF_inAllYrs = GATE.extractClosedForests_inAllYears(landCover, targetPrj);

// Extract and reproject the non-forested areas in 2015-2019.
var nonF_inAllYrs = GATE.extractNonForested_inAllYears(landCover, targetPrj);

// Non-forested areas in the ridges.
var nonF_Ridges = nonF_inAllYrs.updateMask(ridges)
  .selfMask();


/* Extract the highest non-forested ridge 
  and lowest closed forest points
  within each buffer of the pixel centroids 
  along the medial axis. */

// ALOS elevation (Version 3.2, released in January 2021) in the AOI.
var ALOSelv = GATE.load_ALOSelevation(AOI, targetPrj);

// Extract the elevational extremes per buffer.
var selectedBuffers_withElvMinMax = GATE.extractElvMinMax_perBuffer(ALOSelv, 
  CF_inAllYrs, nonF_Ridges, targetPrj, buffered_MedCtds);


/* In each selected buffer along the medial axis, 
  construct the highest non-forested ridge 
  and lowest closed forest points, respectively. */

var CFpts = GATE.constructPOIs_byBuffer(selectedBuffers_withElvMinMax, 
  "CF_Long", "CF_Lat");

var NonFpts = GATE.constructPOIs_byBuffer(selectedBuffers_withElvMinMax, 
  "nonF_Long", "nonF_Lat");


if (true) {
  //// Export the result(s).
  Export.table.toAsset({
    collection: CFpts, 
    description: "LowestCFpts_rawMedCtds", 
    assetId: cloud_Main + "Cloud_Temp/" // Testing.
      + "LowestCFpts_rawMedCtds"
  });
  
  Export.table.toAsset({
    collection: NonFpts, 
    description: "HighestNonFRidgePts_rawMedCtds", 
    assetId: cloud_Main + "Cloud_Temp/" // Testing.
      + "HighestNonFRidgePts_rawMedCtds"
  });
}

