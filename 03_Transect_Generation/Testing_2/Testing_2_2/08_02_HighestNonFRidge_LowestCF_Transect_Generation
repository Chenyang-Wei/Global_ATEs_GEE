/**
 * Introduction:
 * 1) Construct a elevational transect centerline between 
 *  each pair of the grouped upper and lower endpoints.
 * 
 * Update: 9/17/2021.
 * 
 * Runtime: 1m.
 */


/* Load module(s). */

var IMG = require("users/ChenyangWei/Public:Modules/Image_Analysis&Processing");
var GATE = require("users/ChenyangWei/Public:Modules/Global_ATE");


/**** The following section needs to be updated. ****/

// Set the area of interest.
var AOI = GATE.AOI_Alps; // Testing.

// Set the working directory.
var wd_Main = GATE.wd_Europe;

// Set the cloud asset directory.
var cloud_Main = GATE.cloud_Europe;

/**** The section above needs to be updated. ****/


/* Data and function preparation. */

// Load the grouped lowest closed forest points.
var groupedLowestCF = ee.FeatureCollection(cloud_Main + "Cloud_Temp/" // Testing.
  + "groupedLowestCF_90m_90mGroupedCtd");

print(groupedLowestCF.first(), groupedLowestCF.size())

// Load the grouped highest non-forested ridge points.
var groupedHighestNonF_Ridge = ee.FeatureCollection(cloud_Main + "Cloud_Temp/" // Testing.
  + "groupedHighestNonF_Ridge_90m_90mGroupedCtd");

print(groupedHighestNonF_Ridge.first(), groupedHighestNonF_Ridge.size())


/* Construct a elevational transect centerline between 
  each pair of the grouped upper and lower endpoints. */

var transectCLs = GATE.constructTransectCLs(groupedLowestCF, groupedHighestNonF_Ridge);

print(transectCLs.first(), transectCLs.size())


if (false) { // true OR false.

  //// Export the result(s).
  Export.table.toAsset({
    collection: transectCLs, 
    description: "transectCLs_LowestCF_HighestNonFridge_90m_90mGroupedCtd", 
    assetId: cloud_Main + "Cloud_Temp/" // Testing.
      + "transectCLs_LowestCF_HighestNonFridge_90m_90mGroupedCtd"
  });
}

