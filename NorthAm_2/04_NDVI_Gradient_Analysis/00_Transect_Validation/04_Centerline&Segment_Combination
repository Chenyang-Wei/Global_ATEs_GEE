/**
 * Introduction:
 * 
 *  1) Load and preprocess the lower and upper segments.
 * 
 *  2) Combine the variables of the selected centerlines and
 *    the corresponding lower and upper segments.
 * 
 *  3) Buffer each produced centerline by 45 m.
 * 
 * 
 * Need to check: 5.
 * 
 * Update: 8/4/2022.
 * 
 * Runtime: 1h ~ 2h (shared).
 */


/* Load module(s). */

var GATE = require("users/ChenyangWei/Public:Modules/Global_ATE");
var TNA = require("users/ChenyangWei/Public:Modules/Transect_NDVI_Analysis");
var FC_AP = require("users/ChenyangWei/Public:Modules/FeatureCollection_Analysis&Processing");


/* Setup. */

// Set the major working directory.
var wd_Main = GATE.wd_NorthAmerica   /**** 1) Need to change. ****/
  + "Elevational_Transect_Generation/";

// Determine the universal file path of
//  the selected transect centerlines.
var wd_SelectedCLs = wd_Main
  + TNA.selectedCLs_fileName
  + "/"
  + TNA.selectedCLs_byBasinGroup_fileName;   /**** 2) Need to check. ****/

// Determine the universal file path of transect segments.
var wd_Segments = wd_Main
  + TNA.segments_withNDVIcanopyHt_FullName
  + "/"
  + TNA.segments_withNDVIcanopyHt_ShortName;   /**** 3) Need to check. ****/

// Name the centerline ID.
var CL_ID = "CL_newID";   /**** 4) Need to check. ****/

// Determine the properties of interest.
var old_PropNames_List = ee.List([CL_ID])
  .cat([
    "avg_CanopyHt", "canopyHt_PxNum",
    "avg_NDVI", "NDVI_PxNum"
  ]);

// Name the properties for the lower segments.
var lowerSeg_PropNames_List = ee.List([CL_ID])
  .cat([
    "L_CanopyHt", "L_CH_PxNum",
    "L_NDVI", "L_ND_PxNum"
  ]);

// Name the properties for the upper segments.
var upperSeg_PropNames_List = ee.List([CL_ID])
  .cat([
    "U_CanopyHt", "U_CH_PxNum",
    "U_NDVI", "U_ND_PxNum"
  ]);

// Whether test the algorithm.
var test = false; // true OR false.


/* Perform the following operations for each basin group. */

for (var basinGroupID = 1; basinGroupID <= 5; basinGroupID ++) {

  // Load the selected transect centerlines of each basin group.
  var selectedCLs = ee.FeatureCollection(wd_SelectedCLs
    + basinGroupID);
  
  // Load the transect segments of each basin group.
  var segments = ee.FeatureCollection(wd_Segments
    + "_BasinGroup_"
    + basinGroupID);
  

  /* 1) Load and preprocess the lower and upper segments. */
  
  // Load the two types of segments.
  var lowerSegments = segments.filter(ee.Filter.eq("SegmentID", 1));
  
  var upperSegments = segments.filter(ee.Filter.eq("SegmentID", 2));
  
  // Select and rename the properties of interest.
  var lowerSegments_PropSelected = lowerSegments.select({
    propertySelectors: old_PropNames_List, 
    newProperties: lowerSeg_PropNames_List
  });
  
  var upperSegments_PropSelected = upperSegments.select({
    propertySelectors: old_PropNames_List, 
    newProperties: upperSeg_PropNames_List
  });
  

  /* 2) Combine the variables of the selected centerlines and
    the corresponding lower and upper segments. */
  
  var CLs_withLowerSegments = FC_AP.combine_twoFtrCols_byCommonProperty(
    selectedCLs, lowerSegments_PropSelected, CL_ID
  );
  
  var CLs_withBothSegments = FC_AP.combine_twoFtrCols_byCommonProperty(
    CLs_withLowerSegments, upperSegments_PropSelected, CL_ID
  );
  
  
  /* 3) Buffer each produced centerline by 45 m. */
  
  var transects_withBothSegments = TNA.buffer_Centerlines_by45m(CLs_withBothSegments);


  if (test) { //// Check the datasets.
    
    var numDiff = selectedCLs.size().multiply(2)
      .subtract(segments.size());
    
    print("Difference in numbers:", numDiff);
    
  } else { //// Export the result(s).
    
    var wd_Output = wd_Main
      + TNA.transects_withBothSegments_FullName   /**** 5) Need to create. ****/
      // "transects_withBothSegments_NDVIcanopyHt".
      + "/";
    
    var fileName = TNA.transects_withBothSegments_ShortName
      + "_BasinGroup_"
      + basinGroupID;
    
    Export.table.toAsset({
      collection: transects_withBothSegments, 
      description: fileName, 
      assetId: wd_Output
        + fileName
    });
  }
}


/* Map the datasets. */

if (test) {

  print("selectedCLs:", 
    selectedCLs.first(),
    selectedCLs.size());

  print("transects_withBothSegments:", 
    transects_withBothSegments.first());

  Map.setOptions("satellite");
  Map.centerObject(selectedCLs.first(), 12);
  
  Map.addLayer(selectedCLs, 
    {color: "FF0000"}, "selectedCLs");
  
  Map.addLayer(lowerSegments, 
    {color: "00FF00"}, "lowerSegments");
  
  Map.addLayer(upperSegments, 
    {color: "0000FF"}, "upperSegments");
}


